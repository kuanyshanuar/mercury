// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: identityserviceapi_authentication_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthenticationServiceClient is the client API for AuthenticationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthenticationServiceClient interface {
	// *
	// Creates a new user.
	// If the user exists, an error "Already exists" will be returned.
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	// *
	// Login the user with email and password.
	// If the user does not exist, an error "Not found" will be returned.
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	// *
	// Validates a sms code.
	// If the code does not exist, an error "Not found" will be returned.
	ValidateCode(ctx context.Context, in *ValidateCodeRequest, opts ...grpc.CallOption) (*ValidateCodeResponse, error)
	// *
	// Send reset password token.
	// If the code does not exist, an error "Not found" will be returned.
	SendResetPasswordToken(ctx context.Context, in *SendResetPasswordTokenRequest, opts ...grpc.CallOption) (*SendResetPasswordTokenResponse, error)
	// *
	// Reset password token.
	// If the code does not exist, an error "Not found" will be returned.
	ResetPasswordToken(ctx context.Context, in *ResetPasswordTokenRequest, opts ...grpc.CallOption) (*ResetPasswordTokenResponse, error)
}

type authenticationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthenticationServiceClient(cc grpc.ClientConnInterface) AuthenticationServiceClient {
	return &authenticationServiceClient{cc}
}

func (c *authenticationServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, "/gitlab.com.mercury.identityservice.generated.model.v1.AuthenticationService/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/gitlab.com.mercury.identityservice.generated.model.v1.AuthenticationService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) ValidateCode(ctx context.Context, in *ValidateCodeRequest, opts ...grpc.CallOption) (*ValidateCodeResponse, error) {
	out := new(ValidateCodeResponse)
	err := c.cc.Invoke(ctx, "/gitlab.com.mercury.identityservice.generated.model.v1.AuthenticationService/ValidateCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) SendResetPasswordToken(ctx context.Context, in *SendResetPasswordTokenRequest, opts ...grpc.CallOption) (*SendResetPasswordTokenResponse, error) {
	out := new(SendResetPasswordTokenResponse)
	err := c.cc.Invoke(ctx, "/gitlab.com.mercury.identityservice.generated.model.v1.AuthenticationService/SendResetPasswordToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) ResetPasswordToken(ctx context.Context, in *ResetPasswordTokenRequest, opts ...grpc.CallOption) (*ResetPasswordTokenResponse, error) {
	out := new(ResetPasswordTokenResponse)
	err := c.cc.Invoke(ctx, "/gitlab.com.mercury.identityservice.generated.model.v1.AuthenticationService/ResetPasswordToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthenticationServiceServer is the server API for AuthenticationService service.
// All implementations should embed UnimplementedAuthenticationServiceServer
// for forward compatibility
type AuthenticationServiceServer interface {
	// *
	// Creates a new user.
	// If the user exists, an error "Already exists" will be returned.
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	// *
	// Login the user with email and password.
	// If the user does not exist, an error "Not found" will be returned.
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	// *
	// Validates a sms code.
	// If the code does not exist, an error "Not found" will be returned.
	ValidateCode(context.Context, *ValidateCodeRequest) (*ValidateCodeResponse, error)
	// *
	// Send reset password token.
	// If the code does not exist, an error "Not found" will be returned.
	SendResetPasswordToken(context.Context, *SendResetPasswordTokenRequest) (*SendResetPasswordTokenResponse, error)
	// *
	// Reset password token.
	// If the code does not exist, an error "Not found" will be returned.
	ResetPasswordToken(context.Context, *ResetPasswordTokenRequest) (*ResetPasswordTokenResponse, error)
}

// UnimplementedAuthenticationServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAuthenticationServiceServer struct {
}

func (UnimplementedAuthenticationServiceServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedAuthenticationServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAuthenticationServiceServer) ValidateCode(context.Context, *ValidateCodeRequest) (*ValidateCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateCode not implemented")
}
func (UnimplementedAuthenticationServiceServer) SendResetPasswordToken(context.Context, *SendResetPasswordTokenRequest) (*SendResetPasswordTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendResetPasswordToken not implemented")
}
func (UnimplementedAuthenticationServiceServer) ResetPasswordToken(context.Context, *ResetPasswordTokenRequest) (*ResetPasswordTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPasswordToken not implemented")
}

// UnsafeAuthenticationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthenticationServiceServer will
// result in compilation errors.
type UnsafeAuthenticationServiceServer interface {
	mustEmbedUnimplementedAuthenticationServiceServer()
}

func RegisterAuthenticationServiceServer(s grpc.ServiceRegistrar, srv AuthenticationServiceServer) {
	s.RegisterService(&AuthenticationService_ServiceDesc, srv)
}

func _AuthenticationService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitlab.com.mercury.identityservice.generated.model.v1.AuthenticationService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitlab.com.mercury.identityservice.generated.model.v1.AuthenticationService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_ValidateCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).ValidateCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitlab.com.mercury.identityservice.generated.model.v1.AuthenticationService/ValidateCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).ValidateCode(ctx, req.(*ValidateCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_SendResetPasswordToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendResetPasswordTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).SendResetPasswordToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitlab.com.mercury.identityservice.generated.model.v1.AuthenticationService/SendResetPasswordToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).SendResetPasswordToken(ctx, req.(*SendResetPasswordTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_ResetPasswordToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).ResetPasswordToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitlab.com.mercury.identityservice.generated.model.v1.AuthenticationService/ResetPasswordToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).ResetPasswordToken(ctx, req.(*ResetPasswordTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthenticationService_ServiceDesc is the grpc.ServiceDesc for AuthenticationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthenticationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gitlab.com.mercury.identityservice.generated.model.v1.AuthenticationService",
	HandlerType: (*AuthenticationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _AuthenticationService_CreateUser_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _AuthenticationService_Login_Handler,
		},
		{
			MethodName: "ValidateCode",
			Handler:    _AuthenticationService_ValidateCode_Handler,
		},
		{
			MethodName: "SendResetPasswordToken",
			Handler:    _AuthenticationService_SendResetPasswordToken_Handler,
		},
		{
			MethodName: "ResetPasswordToken",
			Handler:    _AuthenticationService_ResetPasswordToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "identityserviceapi_authentication_service.proto",
}
