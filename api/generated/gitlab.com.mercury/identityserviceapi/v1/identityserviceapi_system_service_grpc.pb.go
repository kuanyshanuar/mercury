// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: identityserviceapi_system_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SystemServiceClient is the client API for SystemService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SystemServiceClient interface {
	// *
	// Creates a builder user.
	// If the user exists, an error "Already exists" will be returned.
	CreateBuilder(ctx context.Context, in *CreateBuilderRequest, opts ...grpc.CallOption) (*CreateBuilderResponse, error)
	// *
	// Updates a builder user.
	// If the user exists, an error "Already exists" will be returned.
	UpdateBuilder(ctx context.Context, in *UpdateBuilderRequest, opts ...grpc.CallOption) (*UpdateBuilderResponse, error)
	// *
	// Updates a builder user.
	// If the user exists, an error "Already exists" will be returned.
	DeleteBuilder(ctx context.Context, in *DeleteBuilderRequest, opts ...grpc.CallOption) (*DeleteBuilderResponse, error)
	// *
	// Returns the builder by id.
	// If the builder does not exist, an error "Not found" will be returned.
	GetBuilder(ctx context.Context, in *GetBuilderRequest, opts ...grpc.CallOption) (*GetBuilderResponse, error)
	// *
	// Returns a list of builders.
	ListBuilders(ctx context.Context, in *ListBuildersRequest, opts ...grpc.CallOption) (*ListBuildersResponse, error)
	// *
	// Creates a new manager.
	CreateManager(ctx context.Context, in *CreateManagerRequest, opts ...grpc.CallOption) (*CreateManagerResponse, error)
	// *
	// Returns a list of managers.
	ListManager(ctx context.Context, in *ListManagerRequest, opts ...grpc.CallOption) (*ListManagerResponse, error)
	// *
	// Returns the manager by id.
	GetManager(ctx context.Context, in *GetManagerRequest, opts ...grpc.CallOption) (*GetManagerResponse, error)
	// *
	// Updates the manager.
	UpdateManager(ctx context.Context, in *UpdateManagerRequest, opts ...grpc.CallOption) (*UpdateManagerResponse, error)
	// *
	// Deletes the manager.
	DeleteManager(ctx context.Context, in *DeleteManagerRequest, opts ...grpc.CallOption) (*DeleteManagerResponse, error)
}

type systemServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSystemServiceClient(cc grpc.ClientConnInterface) SystemServiceClient {
	return &systemServiceClient{cc}
}

func (c *systemServiceClient) CreateBuilder(ctx context.Context, in *CreateBuilderRequest, opts ...grpc.CallOption) (*CreateBuilderResponse, error) {
	out := new(CreateBuilderResponse)
	err := c.cc.Invoke(ctx, "/gitlab.com.mercury.identityservice.generated.model.v1.SystemService/CreateBuilder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) UpdateBuilder(ctx context.Context, in *UpdateBuilderRequest, opts ...grpc.CallOption) (*UpdateBuilderResponse, error) {
	out := new(UpdateBuilderResponse)
	err := c.cc.Invoke(ctx, "/gitlab.com.mercury.identityservice.generated.model.v1.SystemService/UpdateBuilder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) DeleteBuilder(ctx context.Context, in *DeleteBuilderRequest, opts ...grpc.CallOption) (*DeleteBuilderResponse, error) {
	out := new(DeleteBuilderResponse)
	err := c.cc.Invoke(ctx, "/gitlab.com.mercury.identityservice.generated.model.v1.SystemService/DeleteBuilder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) GetBuilder(ctx context.Context, in *GetBuilderRequest, opts ...grpc.CallOption) (*GetBuilderResponse, error) {
	out := new(GetBuilderResponse)
	err := c.cc.Invoke(ctx, "/gitlab.com.mercury.identityservice.generated.model.v1.SystemService/GetBuilder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) ListBuilders(ctx context.Context, in *ListBuildersRequest, opts ...grpc.CallOption) (*ListBuildersResponse, error) {
	out := new(ListBuildersResponse)
	err := c.cc.Invoke(ctx, "/gitlab.com.mercury.identityservice.generated.model.v1.SystemService/ListBuilders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) CreateManager(ctx context.Context, in *CreateManagerRequest, opts ...grpc.CallOption) (*CreateManagerResponse, error) {
	out := new(CreateManagerResponse)
	err := c.cc.Invoke(ctx, "/gitlab.com.mercury.identityservice.generated.model.v1.SystemService/CreateManager", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) ListManager(ctx context.Context, in *ListManagerRequest, opts ...grpc.CallOption) (*ListManagerResponse, error) {
	out := new(ListManagerResponse)
	err := c.cc.Invoke(ctx, "/gitlab.com.mercury.identityservice.generated.model.v1.SystemService/ListManager", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) GetManager(ctx context.Context, in *GetManagerRequest, opts ...grpc.CallOption) (*GetManagerResponse, error) {
	out := new(GetManagerResponse)
	err := c.cc.Invoke(ctx, "/gitlab.com.mercury.identityservice.generated.model.v1.SystemService/GetManager", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) UpdateManager(ctx context.Context, in *UpdateManagerRequest, opts ...grpc.CallOption) (*UpdateManagerResponse, error) {
	out := new(UpdateManagerResponse)
	err := c.cc.Invoke(ctx, "/gitlab.com.mercury.identityservice.generated.model.v1.SystemService/UpdateManager", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) DeleteManager(ctx context.Context, in *DeleteManagerRequest, opts ...grpc.CallOption) (*DeleteManagerResponse, error) {
	out := new(DeleteManagerResponse)
	err := c.cc.Invoke(ctx, "/gitlab.com.mercury.identityservice.generated.model.v1.SystemService/DeleteManager", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SystemServiceServer is the server API for SystemService service.
// All implementations should embed UnimplementedSystemServiceServer
// for forward compatibility
type SystemServiceServer interface {
	// *
	// Creates a builder user.
	// If the user exists, an error "Already exists" will be returned.
	CreateBuilder(context.Context, *CreateBuilderRequest) (*CreateBuilderResponse, error)
	// *
	// Updates a builder user.
	// If the user exists, an error "Already exists" will be returned.
	UpdateBuilder(context.Context, *UpdateBuilderRequest) (*UpdateBuilderResponse, error)
	// *
	// Updates a builder user.
	// If the user exists, an error "Already exists" will be returned.
	DeleteBuilder(context.Context, *DeleteBuilderRequest) (*DeleteBuilderResponse, error)
	// *
	// Returns the builder by id.
	// If the builder does not exist, an error "Not found" will be returned.
	GetBuilder(context.Context, *GetBuilderRequest) (*GetBuilderResponse, error)
	// *
	// Returns a list of builders.
	ListBuilders(context.Context, *ListBuildersRequest) (*ListBuildersResponse, error)
	// *
	// Creates a new manager.
	CreateManager(context.Context, *CreateManagerRequest) (*CreateManagerResponse, error)
	// *
	// Returns a list of managers.
	ListManager(context.Context, *ListManagerRequest) (*ListManagerResponse, error)
	// *
	// Returns the manager by id.
	GetManager(context.Context, *GetManagerRequest) (*GetManagerResponse, error)
	// *
	// Updates the manager.
	UpdateManager(context.Context, *UpdateManagerRequest) (*UpdateManagerResponse, error)
	// *
	// Deletes the manager.
	DeleteManager(context.Context, *DeleteManagerRequest) (*DeleteManagerResponse, error)
}

// UnimplementedSystemServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSystemServiceServer struct {
}

func (UnimplementedSystemServiceServer) CreateBuilder(context.Context, *CreateBuilderRequest) (*CreateBuilderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBuilder not implemented")
}
func (UnimplementedSystemServiceServer) UpdateBuilder(context.Context, *UpdateBuilderRequest) (*UpdateBuilderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBuilder not implemented")
}
func (UnimplementedSystemServiceServer) DeleteBuilder(context.Context, *DeleteBuilderRequest) (*DeleteBuilderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBuilder not implemented")
}
func (UnimplementedSystemServiceServer) GetBuilder(context.Context, *GetBuilderRequest) (*GetBuilderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBuilder not implemented")
}
func (UnimplementedSystemServiceServer) ListBuilders(context.Context, *ListBuildersRequest) (*ListBuildersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBuilders not implemented")
}
func (UnimplementedSystemServiceServer) CreateManager(context.Context, *CreateManagerRequest) (*CreateManagerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateManager not implemented")
}
func (UnimplementedSystemServiceServer) ListManager(context.Context, *ListManagerRequest) (*ListManagerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListManager not implemented")
}
func (UnimplementedSystemServiceServer) GetManager(context.Context, *GetManagerRequest) (*GetManagerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetManager not implemented")
}
func (UnimplementedSystemServiceServer) UpdateManager(context.Context, *UpdateManagerRequest) (*UpdateManagerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateManager not implemented")
}
func (UnimplementedSystemServiceServer) DeleteManager(context.Context, *DeleteManagerRequest) (*DeleteManagerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteManager not implemented")
}

// UnsafeSystemServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SystemServiceServer will
// result in compilation errors.
type UnsafeSystemServiceServer interface {
	mustEmbedUnimplementedSystemServiceServer()
}

func RegisterSystemServiceServer(s grpc.ServiceRegistrar, srv SystemServiceServer) {
	s.RegisterService(&SystemService_ServiceDesc, srv)
}

func _SystemService_CreateBuilder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBuilderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).CreateBuilder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitlab.com.mercury.identityservice.generated.model.v1.SystemService/CreateBuilder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).CreateBuilder(ctx, req.(*CreateBuilderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_UpdateBuilder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBuilderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).UpdateBuilder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitlab.com.mercury.identityservice.generated.model.v1.SystemService/UpdateBuilder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).UpdateBuilder(ctx, req.(*UpdateBuilderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_DeleteBuilder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBuilderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).DeleteBuilder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitlab.com.mercury.identityservice.generated.model.v1.SystemService/DeleteBuilder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).DeleteBuilder(ctx, req.(*DeleteBuilderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_GetBuilder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBuilderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).GetBuilder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitlab.com.mercury.identityservice.generated.model.v1.SystemService/GetBuilder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).GetBuilder(ctx, req.(*GetBuilderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_ListBuilders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBuildersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).ListBuilders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitlab.com.mercury.identityservice.generated.model.v1.SystemService/ListBuilders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).ListBuilders(ctx, req.(*ListBuildersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_CreateManager_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateManagerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).CreateManager(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitlab.com.mercury.identityservice.generated.model.v1.SystemService/CreateManager",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).CreateManager(ctx, req.(*CreateManagerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_ListManager_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListManagerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).ListManager(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitlab.com.mercury.identityservice.generated.model.v1.SystemService/ListManager",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).ListManager(ctx, req.(*ListManagerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_GetManager_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetManagerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).GetManager(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitlab.com.mercury.identityservice.generated.model.v1.SystemService/GetManager",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).GetManager(ctx, req.(*GetManagerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_UpdateManager_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateManagerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).UpdateManager(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitlab.com.mercury.identityservice.generated.model.v1.SystemService/UpdateManager",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).UpdateManager(ctx, req.(*UpdateManagerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_DeleteManager_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteManagerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).DeleteManager(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitlab.com.mercury.identityservice.generated.model.v1.SystemService/DeleteManager",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).DeleteManager(ctx, req.(*DeleteManagerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SystemService_ServiceDesc is the grpc.ServiceDesc for SystemService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SystemService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gitlab.com.mercury.identityservice.generated.model.v1.SystemService",
	HandlerType: (*SystemServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBuilder",
			Handler:    _SystemService_CreateBuilder_Handler,
		},
		{
			MethodName: "UpdateBuilder",
			Handler:    _SystemService_UpdateBuilder_Handler,
		},
		{
			MethodName: "DeleteBuilder",
			Handler:    _SystemService_DeleteBuilder_Handler,
		},
		{
			MethodName: "GetBuilder",
			Handler:    _SystemService_GetBuilder_Handler,
		},
		{
			MethodName: "ListBuilders",
			Handler:    _SystemService_ListBuilders_Handler,
		},
		{
			MethodName: "CreateManager",
			Handler:    _SystemService_CreateManager_Handler,
		},
		{
			MethodName: "ListManager",
			Handler:    _SystemService_ListManager_Handler,
		},
		{
			MethodName: "GetManager",
			Handler:    _SystemService_GetManager_Handler,
		},
		{
			MethodName: "UpdateManager",
			Handler:    _SystemService_UpdateManager_Handler,
		},
		{
			MethodName: "DeleteManager",
			Handler:    _SystemService_DeleteManager_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "identityserviceapi_system_service.proto",
}
