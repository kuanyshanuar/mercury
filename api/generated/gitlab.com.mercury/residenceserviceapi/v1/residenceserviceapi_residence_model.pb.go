// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.3
// source: residenceserviceapi_residence_model.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// Represents the residence write model.
type ResidenceWrite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User id
	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// Status id
	StatusId int64 `protobuf:"varint,2,opt,name=status_id,json=statusId,proto3" json:"status_id,omitempty"`
	// City id
	CityId int64 `protobuf:"varint,3,opt,name=city_id,json=cityId,proto3" json:"city_id,omitempty"`
	// Housing class id
	HousingClassId int64 `protobuf:"varint,4,opt,name=housing_class_id,json=housingClassId,proto3" json:"housing_class_id,omitempty"`
	// Construction type id
	ConstructionTypeId int64 `protobuf:"varint,5,opt,name=construction_type_id,json=constructionTypeId,proto3" json:"construction_type_id,omitempty"`
	// Title of residence
	Title string `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
	// Description of residence
	Description string `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	// Address of residence
	Address string `protobuf:"bytes,8,opt,name=address,proto3" json:"address,omitempty"`
	// Located district
	DistrictId int64 `protobuf:"varint,9,opt,name=district_id,json=districtId,proto3" json:"district_id,omitempty"`
	// Latitude
	Latitude float64 `protobuf:"fixed64,10,opt,name=latitude,proto3" json:"latitude,omitempty"`
	// Longitude
	Longitude float64 `protobuf:"fixed64,11,opt,name=longitude,proto3" json:"longitude,omitempty"`
	// Deadline year
	DeadlineYear int64 `protobuf:"varint,12,opt,name=deadline_year,json=deadlineYear,proto3" json:"deadline_year,omitempty"`
	// Deadline quarter
	DeadlineQuarter int64 `protobuf:"varint,13,opt,name=deadline_quarter,json=deadlineQuarter,proto3" json:"deadline_quarter,omitempty"`
	// The total number of flats in the residence.
	FlatsCount int64 `protobuf:"varint,14,opt,name=flats_count,json=flatsCount,proto3" json:"flats_count,omitempty"`
	// The maximum amount of floors in residence.
	FloorsMax int64 `protobuf:"varint,15,opt,name=floors_max,json=floorsMax,proto3" json:"floors_max,omitempty"`
	// The minimum amount of rooms.
	RoomsMin int64 `protobuf:"varint,16,opt,name=rooms_min,json=roomsMin,proto3" json:"rooms_min,omitempty"`
	// The maximum amount of rooms.
	RoomsMax int64 `protobuf:"varint,17,opt,name=rooms_max,json=roomsMax,proto3" json:"rooms_max,omitempty"`
	// Height of ceiling
	CeilingHeight float32 `protobuf:"fixed32,18,opt,name=ceiling_height,json=ceilingHeight,proto3" json:"ceiling_height,omitempty"`
	// Facade
	//
	// Deprecated: Marked as deprecated in residenceserviceapi_residence_model.proto.
	Facade string `protobuf:"bytes,19,opt,name=facade,proto3" json:"facade,omitempty"`
	// Has HGF
	HasHgf bool `protobuf:"varint,20,opt,name=has_hgf,json=hasHgf,proto3" json:"has_hgf,omitempty"`
	// Is there an elevator in the residence
	//
	// Deprecated: Marked as deprecated in residenceserviceapi_residence_model.proto.
	HasElevator bool `protobuf:"varint,21,opt,name=has_elevator,json=hasElevator,proto3" json:"has_elevator,omitempty"`
	// The minimum price per square
	PricePerSquareMin int64 `protobuf:"varint,22,opt,name=price_per_square_min,json=pricePerSquareMin,proto3" json:"price_per_square_min,omitempty"`
	// The maximum price
	PriceMax int64 `protobuf:"varint,23,opt,name=price_max,json=priceMax,proto3" json:"price_max,omitempty"`
	// The minimum price
	PriceMin int64 `protobuf:"varint,24,opt,name=price_min,json=priceMin,proto3" json:"price_min,omitempty"`
	// The minimum area of flats
	AreaMin float32 `protobuf:"fixed32,25,opt,name=area_min,json=areaMin,proto3" json:"area_min,omitempty"`
	// The maximum area of flats
	AreaMax float32 `protobuf:"fixed32,26,opt,name=area_max,json=areaMax,proto3" json:"area_max,omitempty"`
	// Title image of
	TitleImage string `protobuf:"bytes,27,opt,name=title_image,json=titleImage,proto3" json:"title_image,omitempty"`
	// Images
	Images []string `protobuf:"bytes,28,rep,name=images,proto3" json:"images,omitempty"`
	// Parking type
	ParkingTypeIds []int64 `protobuf:"varint,29,rep,packed,name=parking_type_ids,json=parkingTypeIds,proto3" json:"parking_type_ids,omitempty"`
	// Interior decoration
	InteriorDecorationIds []int64 `protobuf:"varint,30,rep,packed,name=interior_decoration_ids,json=interiorDecorationIds,proto3" json:"interior_decoration_ids,omitempty"`
	// Heating types
	HeatingTypeIds []int64 `protobuf:"varint,31,rep,packed,name=heating_type_ids,json=heatingTypeIds,proto3" json:"heating_type_ids,omitempty"`
	// Elevator types
	ElevatorTypesIds []int64 `protobuf:"varint,32,rep,packed,name=elevator_types_ids,json=elevatorTypesIds,proto3" json:"elevator_types_ids,omitempty"`
	// Flat plans
	FlatPlans []*ResidenceFlatPlanWrite `protobuf:"bytes,33,rep,name=flat_plans,json=flatPlans,proto3" json:"flat_plans,omitempty"`
	// Purchase methods
	PurchaseMethodIds []int64 `protobuf:"varint,34,rep,packed,name=purchase_method_ids,json=purchaseMethodIds,proto3" json:"purchase_method_ids,omitempty"`
	// Slug
	Slug string `protobuf:"bytes,35,opt,name=slug,proto3" json:"slug,omitempty"`
	// Sale status id
	SaleStatusId int64 `protobuf:"varint,36,opt,name=sale_status_id,json=saleStatusId,proto3" json:"sale_status_id,omitempty"`
}

func (x *ResidenceWrite) Reset() {
	*x = ResidenceWrite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_residenceserviceapi_residence_model_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResidenceWrite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResidenceWrite) ProtoMessage() {}

func (x *ResidenceWrite) ProtoReflect() protoreflect.Message {
	mi := &file_residenceserviceapi_residence_model_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResidenceWrite.ProtoReflect.Descriptor instead.
func (*ResidenceWrite) Descriptor() ([]byte, []int) {
	return file_residenceserviceapi_residence_model_proto_rawDescGZIP(), []int{0}
}

func (x *ResidenceWrite) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ResidenceWrite) GetStatusId() int64 {
	if x != nil {
		return x.StatusId
	}
	return 0
}

func (x *ResidenceWrite) GetCityId() int64 {
	if x != nil {
		return x.CityId
	}
	return 0
}

func (x *ResidenceWrite) GetHousingClassId() int64 {
	if x != nil {
		return x.HousingClassId
	}
	return 0
}

func (x *ResidenceWrite) GetConstructionTypeId() int64 {
	if x != nil {
		return x.ConstructionTypeId
	}
	return 0
}

func (x *ResidenceWrite) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ResidenceWrite) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ResidenceWrite) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ResidenceWrite) GetDistrictId() int64 {
	if x != nil {
		return x.DistrictId
	}
	return 0
}

func (x *ResidenceWrite) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *ResidenceWrite) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *ResidenceWrite) GetDeadlineYear() int64 {
	if x != nil {
		return x.DeadlineYear
	}
	return 0
}

func (x *ResidenceWrite) GetDeadlineQuarter() int64 {
	if x != nil {
		return x.DeadlineQuarter
	}
	return 0
}

func (x *ResidenceWrite) GetFlatsCount() int64 {
	if x != nil {
		return x.FlatsCount
	}
	return 0
}

func (x *ResidenceWrite) GetFloorsMax() int64 {
	if x != nil {
		return x.FloorsMax
	}
	return 0
}

func (x *ResidenceWrite) GetRoomsMin() int64 {
	if x != nil {
		return x.RoomsMin
	}
	return 0
}

func (x *ResidenceWrite) GetRoomsMax() int64 {
	if x != nil {
		return x.RoomsMax
	}
	return 0
}

func (x *ResidenceWrite) GetCeilingHeight() float32 {
	if x != nil {
		return x.CeilingHeight
	}
	return 0
}

// Deprecated: Marked as deprecated in residenceserviceapi_residence_model.proto.
func (x *ResidenceWrite) GetFacade() string {
	if x != nil {
		return x.Facade
	}
	return ""
}

func (x *ResidenceWrite) GetHasHgf() bool {
	if x != nil {
		return x.HasHgf
	}
	return false
}

// Deprecated: Marked as deprecated in residenceserviceapi_residence_model.proto.
func (x *ResidenceWrite) GetHasElevator() bool {
	if x != nil {
		return x.HasElevator
	}
	return false
}

func (x *ResidenceWrite) GetPricePerSquareMin() int64 {
	if x != nil {
		return x.PricePerSquareMin
	}
	return 0
}

func (x *ResidenceWrite) GetPriceMax() int64 {
	if x != nil {
		return x.PriceMax
	}
	return 0
}

func (x *ResidenceWrite) GetPriceMin() int64 {
	if x != nil {
		return x.PriceMin
	}
	return 0
}

func (x *ResidenceWrite) GetAreaMin() float32 {
	if x != nil {
		return x.AreaMin
	}
	return 0
}

func (x *ResidenceWrite) GetAreaMax() float32 {
	if x != nil {
		return x.AreaMax
	}
	return 0
}

func (x *ResidenceWrite) GetTitleImage() string {
	if x != nil {
		return x.TitleImage
	}
	return ""
}

func (x *ResidenceWrite) GetImages() []string {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *ResidenceWrite) GetParkingTypeIds() []int64 {
	if x != nil {
		return x.ParkingTypeIds
	}
	return nil
}

func (x *ResidenceWrite) GetInteriorDecorationIds() []int64 {
	if x != nil {
		return x.InteriorDecorationIds
	}
	return nil
}

func (x *ResidenceWrite) GetHeatingTypeIds() []int64 {
	if x != nil {
		return x.HeatingTypeIds
	}
	return nil
}

func (x *ResidenceWrite) GetElevatorTypesIds() []int64 {
	if x != nil {
		return x.ElevatorTypesIds
	}
	return nil
}

func (x *ResidenceWrite) GetFlatPlans() []*ResidenceFlatPlanWrite {
	if x != nil {
		return x.FlatPlans
	}
	return nil
}

func (x *ResidenceWrite) GetPurchaseMethodIds() []int64 {
	if x != nil {
		return x.PurchaseMethodIds
	}
	return nil
}

func (x *ResidenceWrite) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *ResidenceWrite) GetSaleStatusId() int64 {
	if x != nil {
		return x.SaleStatusId
	}
	return 0
}

// *
// Represents the residence read model.
type ResidenceRead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// User id
	UserId int64 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// Status id
	StatusId int64 `protobuf:"varint,3,opt,name=status_id,json=statusId,proto3" json:"status_id,omitempty"`
	// Status
	Status *StatusRead `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	// City id
	CityId int64 `protobuf:"varint,5,opt,name=city_id,json=cityId,proto3" json:"city_id,omitempty"`
	// City
	City *City `protobuf:"bytes,44,opt,name=city,proto3" json:"city,omitempty"`
	// Housing class id.
	HousingClassId int64 `protobuf:"varint,6,opt,name=housing_class_id,json=housingClassId,proto3" json:"housing_class_id,omitempty"`
	// Housing class
	HousingClass *HouseClassRead `protobuf:"bytes,7,opt,name=housing_class,json=housingClass,proto3" json:"housing_class,omitempty"`
	// Construction type id
	ConstructionTypeId int64 `protobuf:"varint,8,opt,name=construction_type_id,json=constructionTypeId,proto3" json:"construction_type_id,omitempty"`
	// Construction type
	ConstructionType *ConstructionTypeRead `protobuf:"bytes,9,opt,name=construction_type,json=constructionType,proto3" json:"construction_type,omitempty"`
	// Title of the residence
	Title string `protobuf:"bytes,10,opt,name=title,proto3" json:"title,omitempty"`
	// Description of residence
	Description string `protobuf:"bytes,11,opt,name=description,proto3" json:"description,omitempty"`
	// Address of the residence
	Address string `protobuf:"bytes,12,opt,name=address,proto3" json:"address,omitempty"`
	// District
	District *DistrictRead `protobuf:"bytes,13,opt,name=district,proto3" json:"district,omitempty"`
	// Latitude
	Latitude float64 `protobuf:"fixed64,14,opt,name=latitude,proto3" json:"latitude,omitempty"`
	// Longitude
	Longitude float64 `protobuf:"fixed64,15,opt,name=longitude,proto3" json:"longitude,omitempty"`
	// Deadline year
	DeadlineYear int64 `protobuf:"varint,16,opt,name=deadline_year,json=deadlineYear,proto3" json:"deadline_year,omitempty"`
	// Deadline quarter
	DeadlineQuarter int64 `protobuf:"varint,17,opt,name=deadline_quarter,json=deadlineQuarter,proto3" json:"deadline_quarter,omitempty"`
	// The total number of flats in the residence
	FlatsCount int64 `protobuf:"varint,18,opt,name=flats_count,json=flatsCount,proto3" json:"flats_count,omitempty"`
	// The maximum amount of floors in residence.
	FloorsMax int64 `protobuf:"varint,19,opt,name=floors_max,json=floorsMax,proto3" json:"floors_max,omitempty"`
	// The minimum amount of rooms.
	RoomsMin int64 `protobuf:"varint,20,opt,name=rooms_min,json=roomsMin,proto3" json:"rooms_min,omitempty"`
	// The maximum amount of rooms.
	RoomsMax int64 `protobuf:"varint,21,opt,name=rooms_max,json=roomsMax,proto3" json:"rooms_max,omitempty"`
	// Height of ceiling
	CeilingHeight float32 `protobuf:"fixed32,22,opt,name=ceiling_height,json=ceilingHeight,proto3" json:"ceiling_height,omitempty"`
	// Facade
	//
	// Deprecated: Marked as deprecated in residenceserviceapi_residence_model.proto.
	Facade string `protobuf:"bytes,23,opt,name=facade,proto3" json:"facade,omitempty"`
	// Has HGF
	HasHgf bool `protobuf:"varint,24,opt,name=has_hgf,json=hasHgf,proto3" json:"has_hgf,omitempty"`
	// Is there an elevator in the residence
	//
	// Deprecated: Marked as deprecated in residenceserviceapi_residence_model.proto.
	HasElevator bool `protobuf:"varint,25,opt,name=has_elevator,json=hasElevator,proto3" json:"has_elevator,omitempty"`
	// The minimum price per square
	PricePerSquareMin int64 `protobuf:"varint,26,opt,name=price_per_square_min,json=pricePerSquareMin,proto3" json:"price_per_square_min,omitempty"`
	// The minimum price
	PriceMin int64 `protobuf:"varint,27,opt,name=price_min,json=priceMin,proto3" json:"price_min,omitempty"`
	// The maximum price
	PriceMax int64 `protobuf:"varint,28,opt,name=price_max,json=priceMax,proto3" json:"price_max,omitempty"`
	// The minimum area of flats
	AreaMin float32 `protobuf:"fixed32,29,opt,name=area_min,json=areaMin,proto3" json:"area_min,omitempty"`
	// The maximum area of flats
	AreaMax float32 `protobuf:"fixed32,30,opt,name=area_max,json=areaMax,proto3" json:"area_max,omitempty"`
	// Title image of the residence
	TitleImage string `protobuf:"bytes,31,opt,name=title_image,json=titleImage,proto3" json:"title_image,omitempty"`
	// Images of
	Images []string `protobuf:"bytes,32,rep,name=images,proto3" json:"images,omitempty"`
	// Number of views
	Views int64 `protobuf:"varint,33,opt,name=views,proto3" json:"views,omitempty"`
	// Number of likes
	Likes int64 `protobuf:"varint,34,opt,name=likes,proto3" json:"likes,omitempty"`
	// flat plans
	FlatPlans []*ResidenceFlatPlanRead `protobuf:"bytes,35,rep,name=flat_plans,json=flatPlans,proto3" json:"flat_plans,omitempty"`
	// parking types
	ParkingTypes []*ParkingTypeRead `protobuf:"bytes,36,rep,name=parking_types,json=parkingTypes,proto3" json:"parking_types,omitempty"`
	// Interior decoration
	InteriorDecorations []*InteriorDecorationRead `protobuf:"bytes,37,rep,name=interior_decorations,json=interiorDecorations,proto3" json:"interior_decorations,omitempty"`
	// Heating types
	HeatingTypes []*HeatingTypeRead `protobuf:"bytes,38,rep,name=heating_types,json=heatingTypes,proto3" json:"heating_types,omitempty"`
	// Elevator types
	ElevatorTypes []*ElevatorTypeRead `protobuf:"bytes,39,rep,name=elevator_types,json=elevatorTypes,proto3" json:"elevator_types,omitempty"`
	// Purchase methods
	PurchaseMethods []*PurchaseMethodRead `protobuf:"bytes,45,rep,name=purchase_methods,json=purchaseMethods,proto3" json:"purchase_methods,omitempty"`
	// Builder
	Builder *BuilderRead `protobuf:"bytes,43,opt,name=builder,proto3" json:"builder,omitempty"`
	// Is favourite flag
	IsFavourite bool `protobuf:"varint,46,opt,name=is_favourite,json=isFavourite,proto3" json:"is_favourite,omitempty"`
	// Created time
	CreatedAt int64 `protobuf:"varint,40,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Update time
	UpdatedAt int64 `protobuf:"varint,41,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// Deleted time
	DeletedAt int64 `protobuf:"varint,42,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	// Sale status id
	SaleStatusId int64 `protobuf:"varint,47,opt,name=sale_status_id,json=saleStatusId,proto3" json:"sale_status_id,omitempty"`
	// SaleStatus
	SaleStatus *SaleStatusRead `protobuf:"bytes,48,opt,name=sale_status,json=saleStatus,proto3" json:"sale_status,omitempty"`
}

func (x *ResidenceRead) Reset() {
	*x = ResidenceRead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_residenceserviceapi_residence_model_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResidenceRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResidenceRead) ProtoMessage() {}

func (x *ResidenceRead) ProtoReflect() protoreflect.Message {
	mi := &file_residenceserviceapi_residence_model_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResidenceRead.ProtoReflect.Descriptor instead.
func (*ResidenceRead) Descriptor() ([]byte, []int) {
	return file_residenceserviceapi_residence_model_proto_rawDescGZIP(), []int{1}
}

func (x *ResidenceRead) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ResidenceRead) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ResidenceRead) GetStatusId() int64 {
	if x != nil {
		return x.StatusId
	}
	return 0
}

func (x *ResidenceRead) GetStatus() *StatusRead {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ResidenceRead) GetCityId() int64 {
	if x != nil {
		return x.CityId
	}
	return 0
}

func (x *ResidenceRead) GetCity() *City {
	if x != nil {
		return x.City
	}
	return nil
}

func (x *ResidenceRead) GetHousingClassId() int64 {
	if x != nil {
		return x.HousingClassId
	}
	return 0
}

func (x *ResidenceRead) GetHousingClass() *HouseClassRead {
	if x != nil {
		return x.HousingClass
	}
	return nil
}

func (x *ResidenceRead) GetConstructionTypeId() int64 {
	if x != nil {
		return x.ConstructionTypeId
	}
	return 0
}

func (x *ResidenceRead) GetConstructionType() *ConstructionTypeRead {
	if x != nil {
		return x.ConstructionType
	}
	return nil
}

func (x *ResidenceRead) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ResidenceRead) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ResidenceRead) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ResidenceRead) GetDistrict() *DistrictRead {
	if x != nil {
		return x.District
	}
	return nil
}

func (x *ResidenceRead) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *ResidenceRead) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *ResidenceRead) GetDeadlineYear() int64 {
	if x != nil {
		return x.DeadlineYear
	}
	return 0
}

func (x *ResidenceRead) GetDeadlineQuarter() int64 {
	if x != nil {
		return x.DeadlineQuarter
	}
	return 0
}

func (x *ResidenceRead) GetFlatsCount() int64 {
	if x != nil {
		return x.FlatsCount
	}
	return 0
}

func (x *ResidenceRead) GetFloorsMax() int64 {
	if x != nil {
		return x.FloorsMax
	}
	return 0
}

func (x *ResidenceRead) GetRoomsMin() int64 {
	if x != nil {
		return x.RoomsMin
	}
	return 0
}

func (x *ResidenceRead) GetRoomsMax() int64 {
	if x != nil {
		return x.RoomsMax
	}
	return 0
}

func (x *ResidenceRead) GetCeilingHeight() float32 {
	if x != nil {
		return x.CeilingHeight
	}
	return 0
}

// Deprecated: Marked as deprecated in residenceserviceapi_residence_model.proto.
func (x *ResidenceRead) GetFacade() string {
	if x != nil {
		return x.Facade
	}
	return ""
}

func (x *ResidenceRead) GetHasHgf() bool {
	if x != nil {
		return x.HasHgf
	}
	return false
}

// Deprecated: Marked as deprecated in residenceserviceapi_residence_model.proto.
func (x *ResidenceRead) GetHasElevator() bool {
	if x != nil {
		return x.HasElevator
	}
	return false
}

func (x *ResidenceRead) GetPricePerSquareMin() int64 {
	if x != nil {
		return x.PricePerSquareMin
	}
	return 0
}

func (x *ResidenceRead) GetPriceMin() int64 {
	if x != nil {
		return x.PriceMin
	}
	return 0
}

func (x *ResidenceRead) GetPriceMax() int64 {
	if x != nil {
		return x.PriceMax
	}
	return 0
}

func (x *ResidenceRead) GetAreaMin() float32 {
	if x != nil {
		return x.AreaMin
	}
	return 0
}

func (x *ResidenceRead) GetAreaMax() float32 {
	if x != nil {
		return x.AreaMax
	}
	return 0
}

func (x *ResidenceRead) GetTitleImage() string {
	if x != nil {
		return x.TitleImage
	}
	return ""
}

func (x *ResidenceRead) GetImages() []string {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *ResidenceRead) GetViews() int64 {
	if x != nil {
		return x.Views
	}
	return 0
}

func (x *ResidenceRead) GetLikes() int64 {
	if x != nil {
		return x.Likes
	}
	return 0
}

func (x *ResidenceRead) GetFlatPlans() []*ResidenceFlatPlanRead {
	if x != nil {
		return x.FlatPlans
	}
	return nil
}

func (x *ResidenceRead) GetParkingTypes() []*ParkingTypeRead {
	if x != nil {
		return x.ParkingTypes
	}
	return nil
}

func (x *ResidenceRead) GetInteriorDecorations() []*InteriorDecorationRead {
	if x != nil {
		return x.InteriorDecorations
	}
	return nil
}

func (x *ResidenceRead) GetHeatingTypes() []*HeatingTypeRead {
	if x != nil {
		return x.HeatingTypes
	}
	return nil
}

func (x *ResidenceRead) GetElevatorTypes() []*ElevatorTypeRead {
	if x != nil {
		return x.ElevatorTypes
	}
	return nil
}

func (x *ResidenceRead) GetPurchaseMethods() []*PurchaseMethodRead {
	if x != nil {
		return x.PurchaseMethods
	}
	return nil
}

func (x *ResidenceRead) GetBuilder() *BuilderRead {
	if x != nil {
		return x.Builder
	}
	return nil
}

func (x *ResidenceRead) GetIsFavourite() bool {
	if x != nil {
		return x.IsFavourite
	}
	return false
}

func (x *ResidenceRead) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *ResidenceRead) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *ResidenceRead) GetDeletedAt() int64 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

func (x *ResidenceRead) GetSaleStatusId() int64 {
	if x != nil {
		return x.SaleStatusId
	}
	return 0
}

func (x *ResidenceRead) GetSaleStatus() *SaleStatusRead {
	if x != nil {
		return x.SaleStatus
	}
	return nil
}

// *
// Represents the residence flat plan write model.
type ResidenceFlatPlanWrite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Residence id
	ResidenceId int64 `protobuf:"varint,1,opt,name=residence_id,json=residenceId,proto3" json:"residence_id,omitempty"`
	// Number of rooms
	NumberOfRooms int32 `protobuf:"varint,2,opt,name=number_of_rooms,json=numberOfRooms,proto3" json:"number_of_rooms,omitempty"`
	// Area
	Area float32 `protobuf:"fixed32,3,opt,name=area,proto3" json:"area,omitempty"`
	// Price
	Price int32 `protobuf:"varint,4,opt,name=price,proto3" json:"price,omitempty"`
	// Images
	Images []string `protobuf:"bytes,5,rep,name=images,proto3" json:"images,omitempty"`
}

func (x *ResidenceFlatPlanWrite) Reset() {
	*x = ResidenceFlatPlanWrite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_residenceserviceapi_residence_model_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResidenceFlatPlanWrite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResidenceFlatPlanWrite) ProtoMessage() {}

func (x *ResidenceFlatPlanWrite) ProtoReflect() protoreflect.Message {
	mi := &file_residenceserviceapi_residence_model_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResidenceFlatPlanWrite.ProtoReflect.Descriptor instead.
func (*ResidenceFlatPlanWrite) Descriptor() ([]byte, []int) {
	return file_residenceserviceapi_residence_model_proto_rawDescGZIP(), []int{2}
}

func (x *ResidenceFlatPlanWrite) GetResidenceId() int64 {
	if x != nil {
		return x.ResidenceId
	}
	return 0
}

func (x *ResidenceFlatPlanWrite) GetNumberOfRooms() int32 {
	if x != nil {
		return x.NumberOfRooms
	}
	return 0
}

func (x *ResidenceFlatPlanWrite) GetArea() float32 {
	if x != nil {
		return x.Area
	}
	return 0
}

func (x *ResidenceFlatPlanWrite) GetPrice() int32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *ResidenceFlatPlanWrite) GetImages() []string {
	if x != nil {
		return x.Images
	}
	return nil
}

// *
// Represents the residence flat plan read model.
type ResidenceFlatPlanRead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Residnece id
	ResidenceId int64 `protobuf:"varint,2,opt,name=residence_id,json=residenceId,proto3" json:"residence_id,omitempty"`
	// Number of rooms
	NumberOfRooms int32 `protobuf:"varint,3,opt,name=number_of_rooms,json=numberOfRooms,proto3" json:"number_of_rooms,omitempty"`
	// Area
	Area float32 `protobuf:"fixed32,4,opt,name=area,proto3" json:"area,omitempty"`
	// Price
	Price int32 `protobuf:"varint,5,opt,name=price,proto3" json:"price,omitempty"`
	// Images
	Images []string `protobuf:"bytes,6,rep,name=images,proto3" json:"images,omitempty"`
	// Created time
	CreatedAt int64 `protobuf:"varint,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Updated time
	UpdatedAt int64 `protobuf:"varint,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// Deleted time
	DeletedAt int64 `protobuf:"varint,9,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
}

func (x *ResidenceFlatPlanRead) Reset() {
	*x = ResidenceFlatPlanRead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_residenceserviceapi_residence_model_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResidenceFlatPlanRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResidenceFlatPlanRead) ProtoMessage() {}

func (x *ResidenceFlatPlanRead) ProtoReflect() protoreflect.Message {
	mi := &file_residenceserviceapi_residence_model_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResidenceFlatPlanRead.ProtoReflect.Descriptor instead.
func (*ResidenceFlatPlanRead) Descriptor() ([]byte, []int) {
	return file_residenceserviceapi_residence_model_proto_rawDescGZIP(), []int{3}
}

func (x *ResidenceFlatPlanRead) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ResidenceFlatPlanRead) GetResidenceId() int64 {
	if x != nil {
		return x.ResidenceId
	}
	return 0
}

func (x *ResidenceFlatPlanRead) GetNumberOfRooms() int32 {
	if x != nil {
		return x.NumberOfRooms
	}
	return 0
}

func (x *ResidenceFlatPlanRead) GetArea() float32 {
	if x != nil {
		return x.Area
	}
	return 0
}

func (x *ResidenceFlatPlanRead) GetPrice() int32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *ResidenceFlatPlanRead) GetImages() []string {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *ResidenceFlatPlanRead) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *ResidenceFlatPlanRead) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *ResidenceFlatPlanRead) GetDeletedAt() int64 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

// *
// Represents the residence search criteria model.
type ResidencesSearchCriteria struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PageRequest
	PageRequest *PageRequest `protobuf:"bytes,1,opt,name=page_request,json=pageRequest,proto3" json:"page_request,omitempty"`
	// Sorting
	Sorts []*Sort `protobuf:"bytes,2,rep,name=sorts,proto3" json:"sorts,omitempty"`
	// Filter by title
	Title string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	// Builder IDs
	BuilderIds []int64 `protobuf:"varint,4,rep,packed,name=builder_ids,json=builderIds,proto3" json:"builder_ids,omitempty"`
	// Filter by city id
	CityId int64 `protobuf:"varint,5,opt,name=city_id,json=cityId,proto3" json:"city_id,omitempty"`
	// Filter by district id
	DistrictId int64 `protobuf:"varint,6,opt,name=district_id,json=districtId,proto3" json:"district_id,omitempty"`
	// Filter by status id
	StatusId int64 `protobuf:"varint,7,opt,name=status_id,json=statusId,proto3" json:"status_id,omitempty"`
	// Filter by min room
	RoomsMin int64 `protobuf:"varint,8,opt,name=rooms_min,json=roomsMin,proto3" json:"rooms_min,omitempty"`
	// Filter by max room
	RoomsMax int64 `protobuf:"varint,9,opt,name=rooms_max,json=roomsMax,proto3" json:"rooms_max,omitempty"`
	// Filter by minimum ceiling height
	CeilingHeightMin float32 `protobuf:"fixed32,10,opt,name=ceiling_height_min,json=ceilingHeightMin,proto3" json:"ceiling_height_min,omitempty"`
	// Filter by maximum ceiling height
	CeilingHeightMax float32 `protobuf:"fixed32,11,opt,name=ceiling_height_max,json=ceilingHeightMax,proto3" json:"ceiling_height_max,omitempty"`
	// Filter by price_min
	HasHgf bool `protobuf:"varint,12,opt,name=has_hgf,json=hasHgf,proto3" json:"has_hgf,omitempty"`
	// Filter by area_min
	AreaMin float32 `protobuf:"fixed32,13,opt,name=area_min,json=areaMin,proto3" json:"area_min,omitempty"`
	// Filter by area_max
	AreaMax float32 `protobuf:"fixed32,14,opt,name=area_max,json=areaMax,proto3" json:"area_max,omitempty"`
	// Filter by minimum price
	PriceMin int64 `protobuf:"varint,15,opt,name=price_min,json=priceMin,proto3" json:"price_min,omitempty"`
	// Filter by maximum price
	PriceMax int64 `protobuf:"varint,16,opt,name=price_max,json=priceMax,proto3" json:"price_max,omitempty"`
	// Filter construction types
	ConstructionTypeIds []int64 `protobuf:"varint,17,rep,packed,name=construction_type_ids,json=constructionTypeIds,proto3" json:"construction_type_ids,omitempty"`
	// Filter parking types
	ParkingTypeIds []int64 `protobuf:"varint,18,rep,packed,name=parking_type_ids,json=parkingTypeIds,proto3" json:"parking_type_ids,omitempty"`
	// Filter interior decoration types
	InteriorDecorationIds []int64 `protobuf:"varint,19,rep,packed,name=interior_decoration_ids,json=interiorDecorationIds,proto3" json:"interior_decoration_ids,omitempty"`
	// Filter by heating types
	HeatingTypesIds []int64 `protobuf:"varint,20,rep,packed,name=heating_types_ids,json=heatingTypesIds,proto3" json:"heating_types_ids,omitempty"`
	// Filter by purchase types
	PurchaseMethodsIds []int64 `protobuf:"varint,21,rep,packed,name=purchase_methods_ids,json=purchaseMethodsIds,proto3" json:"purchase_methods_ids,omitempty"`
	// Filter by elevator types
	ElevatorTypesIds []int64 `protobuf:"varint,22,rep,packed,name=elevator_types_ids,json=elevatorTypesIds,proto3" json:"elevator_types_ids,omitempty"`
	// Filter by housing class id
	HousingClassId int64 `protobuf:"varint,23,opt,name=housing_class_id,json=housingClassId,proto3" json:"housing_class_id,omitempty"`
	// Filter by minimum floors
	FloorsMin int64 `protobuf:"varint,24,opt,name=floors_min,json=floorsMin,proto3" json:"floors_min,omitempty"`
	// Filter by maximum floors
	FloorsMax int64 `protobuf:"varint,25,opt,name=floors_max,json=floorsMax,proto3" json:"floors_max,omitempty"`
	// User id for is_favourite flag
	UserId int64 `protobuf:"varint,26,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *ResidencesSearchCriteria) Reset() {
	*x = ResidencesSearchCriteria{}
	if protoimpl.UnsafeEnabled {
		mi := &file_residenceserviceapi_residence_model_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResidencesSearchCriteria) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResidencesSearchCriteria) ProtoMessage() {}

func (x *ResidencesSearchCriteria) ProtoReflect() protoreflect.Message {
	mi := &file_residenceserviceapi_residence_model_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResidencesSearchCriteria.ProtoReflect.Descriptor instead.
func (*ResidencesSearchCriteria) Descriptor() ([]byte, []int) {
	return file_residenceserviceapi_residence_model_proto_rawDescGZIP(), []int{4}
}

func (x *ResidencesSearchCriteria) GetPageRequest() *PageRequest {
	if x != nil {
		return x.PageRequest
	}
	return nil
}

func (x *ResidencesSearchCriteria) GetSorts() []*Sort {
	if x != nil {
		return x.Sorts
	}
	return nil
}

func (x *ResidencesSearchCriteria) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ResidencesSearchCriteria) GetBuilderIds() []int64 {
	if x != nil {
		return x.BuilderIds
	}
	return nil
}

func (x *ResidencesSearchCriteria) GetCityId() int64 {
	if x != nil {
		return x.CityId
	}
	return 0
}

func (x *ResidencesSearchCriteria) GetDistrictId() int64 {
	if x != nil {
		return x.DistrictId
	}
	return 0
}

func (x *ResidencesSearchCriteria) GetStatusId() int64 {
	if x != nil {
		return x.StatusId
	}
	return 0
}

func (x *ResidencesSearchCriteria) GetRoomsMin() int64 {
	if x != nil {
		return x.RoomsMin
	}
	return 0
}

func (x *ResidencesSearchCriteria) GetRoomsMax() int64 {
	if x != nil {
		return x.RoomsMax
	}
	return 0
}

func (x *ResidencesSearchCriteria) GetCeilingHeightMin() float32 {
	if x != nil {
		return x.CeilingHeightMin
	}
	return 0
}

func (x *ResidencesSearchCriteria) GetCeilingHeightMax() float32 {
	if x != nil {
		return x.CeilingHeightMax
	}
	return 0
}

func (x *ResidencesSearchCriteria) GetHasHgf() bool {
	if x != nil {
		return x.HasHgf
	}
	return false
}

func (x *ResidencesSearchCriteria) GetAreaMin() float32 {
	if x != nil {
		return x.AreaMin
	}
	return 0
}

func (x *ResidencesSearchCriteria) GetAreaMax() float32 {
	if x != nil {
		return x.AreaMax
	}
	return 0
}

func (x *ResidencesSearchCriteria) GetPriceMin() int64 {
	if x != nil {
		return x.PriceMin
	}
	return 0
}

func (x *ResidencesSearchCriteria) GetPriceMax() int64 {
	if x != nil {
		return x.PriceMax
	}
	return 0
}

func (x *ResidencesSearchCriteria) GetConstructionTypeIds() []int64 {
	if x != nil {
		return x.ConstructionTypeIds
	}
	return nil
}

func (x *ResidencesSearchCriteria) GetParkingTypeIds() []int64 {
	if x != nil {
		return x.ParkingTypeIds
	}
	return nil
}

func (x *ResidencesSearchCriteria) GetInteriorDecorationIds() []int64 {
	if x != nil {
		return x.InteriorDecorationIds
	}
	return nil
}

func (x *ResidencesSearchCriteria) GetHeatingTypesIds() []int64 {
	if x != nil {
		return x.HeatingTypesIds
	}
	return nil
}

func (x *ResidencesSearchCriteria) GetPurchaseMethodsIds() []int64 {
	if x != nil {
		return x.PurchaseMethodsIds
	}
	return nil
}

func (x *ResidencesSearchCriteria) GetElevatorTypesIds() []int64 {
	if x != nil {
		return x.ElevatorTypesIds
	}
	return nil
}

func (x *ResidencesSearchCriteria) GetHousingClassId() int64 {
	if x != nil {
		return x.HousingClassId
	}
	return 0
}

func (x *ResidencesSearchCriteria) GetFloorsMin() int64 {
	if x != nil {
		return x.FloorsMin
	}
	return 0
}

func (x *ResidencesSearchCriteria) GetFloorsMax() int64 {
	if x != nil {
		return x.FloorsMax
	}
	return 0
}

func (x *ResidencesSearchCriteria) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

var File_residenceserviceapi_residence_model_proto protoreflect.FileDescriptor

var file_residenceserviceapi_residence_model_proto_rawDesc = []byte{
	0x0a, 0x29, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x61, 0x70, 0x69, 0x5f, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x36, 0x67, 0x69, 0x74,
	0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x2e,
	0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x76, 0x31, 0x1a, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x61, 0x70, 0x69, 0x5f, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xa2, 0x0a, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x69, 0x74,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x68, 0x6f, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x68, 0x6f,
	0x75, 0x73, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64,
	0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x59, 0x65, 0x61, 0x72,
	0x12, 0x29, 0x0a, 0x10, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x71, 0x75, 0x61,
	0x72, 0x74, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x64, 0x65, 0x61, 0x64,
	0x6c, 0x69, 0x6e, 0x65, 0x51, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x66,
	0x6c, 0x61, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x66, 0x6c, 0x61, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x73, 0x4d, 0x61, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x6f, 0x6f, 0x6d, 0x73, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x4d, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d,
	0x73, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x6f, 0x6f,
	0x6d, 0x73, 0x4d, 0x61, 0x78, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x65, 0x69, 0x6c, 0x69, 0x6e, 0x67,
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x63,
	0x65, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1a, 0x0a, 0x06,
	0x66, 0x61, 0x63, 0x61, 0x64, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x06, 0x66, 0x61, 0x63, 0x61, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x5f,
	0x68, 0x67, 0x66, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x61, 0x73, 0x48, 0x67,
	0x66, 0x12, 0x25, 0x0a, 0x0c, 0x68, 0x61, 0x73, 0x5f, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x68, 0x61, 0x73,
	0x45, 0x6c, 0x65, 0x76, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x14, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x5f, 0x6d, 0x69, 0x6e,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x70, 0x72, 0x69, 0x63, 0x65, 0x50, 0x65, 0x72,
	0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x4d, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f,
	0x6d, 0x69, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x4d, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x6d, 0x69, 0x6e, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x61, 0x72, 0x65, 0x61, 0x4d, 0x69, 0x6e, 0x12, 0x19,
	0x0a, 0x08, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x07, 0x61, 0x72, 0x65, 0x61, 0x4d, 0x61, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0e, 0x70, 0x61,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x73, 0x12, 0x36, 0x0a, 0x17,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x03, 0x52, 0x15, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x72, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x68, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0e,
	0x68, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x73, 0x12, 0x2c,
	0x0a, 0x12, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x20, 0x20, 0x03, 0x28, 0x03, 0x52, 0x10, 0x65, 0x6c, 0x65, 0x76,
	0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x49, 0x64, 0x73, 0x12, 0x6d, 0x0a, 0x0a,
	0x66, 0x6c, 0x61, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x4e, 0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65,
	0x72, 0x63, 0x75, 0x72, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x69, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x46, 0x6c, 0x61, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x52, 0x09, 0x66, 0x6c, 0x61, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x70,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x22, 0x20, 0x03, 0x28, 0x03, 0x52, 0x11, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x49, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x6c, 0x75, 0x67, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12,
	0x24, 0x0a, 0x0e, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69,
	0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x61, 0x6c, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x49, 0x64, 0x22, 0xc5, 0x13, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x69, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x61, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x5a, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e,
	0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75,
	0x72, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x61,
	0x64, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x69, 0x74,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x12, 0x50, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3c, 0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65,
	0x72, 0x63, 0x75, 0x72, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x52, 0x04,
	0x63, 0x69, 0x74, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x68, 0x6f, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x5f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x68, 0x6f, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x12, 0x6b,
	0x0a, 0x0d, 0x68, 0x6f, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x48,
	0x6f, 0x75, 0x73, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x65, 0x61, 0x64, 0x52, 0x0c, 0x68,
	0x6f, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x79, 0x0a,
	0x11, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x2e, 0x72, 0x65,
	0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x65, 0x61, 0x64, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x60, 0x0a, 0x08, 0x64, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x67,
	0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72,
	0x79, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x52, 0x65,
	0x61, 0x64, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e,
	0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x64,
	0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x59, 0x65, 0x61, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x64,
	0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x71, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x51,
	0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6c, 0x61, 0x74, 0x73, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x6c, 0x61,
	0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x6c, 0x6f, 0x6f, 0x72,
	0x73, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x6c, 0x6f,
	0x6f, 0x72, 0x73, 0x4d, 0x61, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x5f,
	0x6d, 0x69, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x73,
	0x4d, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x5f, 0x6d, 0x61, 0x78,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x4d, 0x61, 0x78,
	0x12, 0x25, 0x0a, 0x0e, 0x63, 0x65, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x63, 0x65, 0x69, 0x6c, 0x69, 0x6e,
	0x67, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1a, 0x0a, 0x06, 0x66, 0x61, 0x63, 0x61, 0x64,
	0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x66, 0x61, 0x63,
	0x61, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x5f, 0x68, 0x67, 0x66, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x61, 0x73, 0x48, 0x67, 0x66, 0x12, 0x25, 0x0a, 0x0c,
	0x68, 0x61, 0x73, 0x5f, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x68, 0x61, 0x73, 0x45, 0x6c, 0x65, 0x76, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x14, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x11, 0x70, 0x72, 0x69, 0x63, 0x65, 0x50, 0x65, 0x72, 0x53, 0x71, 0x75, 0x61, 0x72,
	0x65, 0x4d, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x69,
	0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x69,
	0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x19,
	0x0a, 0x08, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x07, 0x61, 0x72, 0x65, 0x61, 0x4d, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x72, 0x65,
	0x61, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x61, 0x72, 0x65,
	0x61, 0x4d, 0x61, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x20, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x21, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x69,
	0x65, 0x77, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6b, 0x65, 0x73, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6b, 0x65, 0x73, 0x12, 0x6c, 0x0a, 0x0a, 0x66, 0x6c, 0x61,
	0x74, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x18, 0x23, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e,
	0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75,
	0x72, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x46, 0x6c, 0x61, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x09, 0x66, 0x6c,
	0x61, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x12, 0x6c, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x24, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47,
	0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x72, 0x63,
	0x75, 0x72, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x65, 0x61, 0x64, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x81, 0x01, 0x0a, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x69,
	0x6f, 0x72, 0x5f, 0x64, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x25,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x69, 0x6f, 0x72, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x61, 0x64, 0x52, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x72, 0x44, 0x65,
	0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x6c, 0x0a, 0x0d, 0x68, 0x65, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x26, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x47, 0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65,
	0x72, 0x63, 0x75, 0x72, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x61, 0x64, 0x52, 0x0c, 0x68, 0x65, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x6f, 0x0a, 0x0e, 0x65, 0x6c, 0x65, 0x76, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x27, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x48, 0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x72,
	0x63, 0x75, 0x72, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6c, 0x65, 0x76, 0x61, 0x74, 0x6f,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x61, 0x64, 0x52, 0x0d, 0x65, 0x6c, 0x65, 0x76, 0x61,
	0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x75, 0x0a, 0x10, 0x70, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x2d, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x65, 0x61, 0x64, 0x52, 0x0f,
	0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12,
	0x5d, 0x0a, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x43, 0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65,
	0x72, 0x63, 0x75, 0x72, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x61, 0x64, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x21,
	0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x69, 0x74, 0x65, 0x18, 0x2e,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x46, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x69, 0x74,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x29,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x2a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x24,
	0x0a, 0x0e, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64,
	0x18, 0x2f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x61, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x49, 0x64, 0x12, 0x67, 0x0a, 0x0b, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x67, 0x69, 0x74, 0x6c,
	0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x2e, 0x72,
	0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x61, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x61,
	0x64, 0x52, 0x0a, 0x73, 0x61, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa5, 0x01,
	0x0a, 0x16, 0x52, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x46, 0x6c, 0x61, 0x74, 0x50,
	0x6c, 0x61, 0x6e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x69,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x52, 0x6f,
	0x6f, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x65, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x04, 0x61, 0x72, 0x65, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x73, 0x22, 0x91, 0x02, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x69, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x46, 0x6c, 0x61, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f,
	0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x4f, 0x66, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72,
	0x65, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x61, 0x72, 0x65, 0x61, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xa6, 0x08, 0x0a, 0x18, 0x52, 0x65,
	0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x72,
	0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x12, 0x66, 0x0a, 0x0c, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x67,
	0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72,
	0x79, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52,
	0x0a, 0x05, 0x73, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e,
	0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75,
	0x72, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x73, 0x6f, 0x72,
	0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x69, 0x74,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x4d, 0x69, 0x6e, 0x12, 0x1b, 0x0a,
	0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x4d, 0x61, 0x78, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x65,
	0x69, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6d, 0x69, 0x6e,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x63, 0x65, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x65, 0x69, 0x6c,
	0x69, 0x6e, 0x67, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x63, 0x65, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x4d, 0x61, 0x78, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x5f, 0x68, 0x67,
	0x66, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x61, 0x73, 0x48, 0x67, 0x66, 0x12,
	0x19, 0x0a, 0x08, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x07, 0x61, 0x72, 0x65, 0x61, 0x4d, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x72,
	0x65, 0x61, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x61, 0x72,
	0x65, 0x61, 0x4d, 0x61, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6d,
	0x69, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x72, 0x69, 0x63, 0x65, 0x4d,
	0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x78, 0x12,
	0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x03, 0x52, 0x13,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0e, 0x70,
	0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x73, 0x12, 0x36, 0x0a,
	0x17, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x63, 0x6f, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x03, 0x52, 0x15,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x72, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x0f, 0x68, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x73, 0x49, 0x64,
	0x73, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x12, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73,
	0x49, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x10, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x49, 0x64,
	0x73, 0x12, 0x28, 0x0a, 0x10, 0x68, 0x6f, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x68, 0x6f, 0x75,
	0x73, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66,
	0x6c, 0x6f, 0x6f, 0x72, 0x73, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x73, 0x4d, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x6c,
	0x6f, 0x6f, 0x72, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x73, 0x4d, 0x61, 0x78, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x42, 0x2b, 0x5a, 0x29, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x2f, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_residenceserviceapi_residence_model_proto_rawDescOnce sync.Once
	file_residenceserviceapi_residence_model_proto_rawDescData = file_residenceserviceapi_residence_model_proto_rawDesc
)

func file_residenceserviceapi_residence_model_proto_rawDescGZIP() []byte {
	file_residenceserviceapi_residence_model_proto_rawDescOnce.Do(func() {
		file_residenceserviceapi_residence_model_proto_rawDescData = protoimpl.X.CompressGZIP(file_residenceserviceapi_residence_model_proto_rawDescData)
	})
	return file_residenceserviceapi_residence_model_proto_rawDescData
}

var file_residenceserviceapi_residence_model_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_residenceserviceapi_residence_model_proto_goTypes = []interface{}{
	(*ResidenceWrite)(nil),           // 0: gitlab.com.mercury.residenceservice.generated.model.v1.ResidenceWrite
	(*ResidenceRead)(nil),            // 1: gitlab.com.mercury.residenceservice.generated.model.v1.ResidenceRead
	(*ResidenceFlatPlanWrite)(nil),   // 2: gitlab.com.mercury.residenceservice.generated.model.v1.ResidenceFlatPlanWrite
	(*ResidenceFlatPlanRead)(nil),    // 3: gitlab.com.mercury.residenceservice.generated.model.v1.ResidenceFlatPlanRead
	(*ResidencesSearchCriteria)(nil), // 4: gitlab.com.mercury.residenceservice.generated.model.v1.ResidencesSearchCriteria
	(*StatusRead)(nil),               // 5: gitlab.com.mercury.residenceservice.generated.model.v1.StatusRead
	(*City)(nil),                     // 6: gitlab.com.mercury.residenceservice.generated.model.v1.City
	(*HouseClassRead)(nil),           // 7: gitlab.com.mercury.residenceservice.generated.model.v1.HouseClassRead
	(*ConstructionTypeRead)(nil),     // 8: gitlab.com.mercury.residenceservice.generated.model.v1.ConstructionTypeRead
	(*DistrictRead)(nil),             // 9: gitlab.com.mercury.residenceservice.generated.model.v1.DistrictRead
	(*ParkingTypeRead)(nil),          // 10: gitlab.com.mercury.residenceservice.generated.model.v1.ParkingTypeRead
	(*InteriorDecorationRead)(nil),   // 11: gitlab.com.mercury.residenceservice.generated.model.v1.InteriorDecorationRead
	(*HeatingTypeRead)(nil),          // 12: gitlab.com.mercury.residenceservice.generated.model.v1.HeatingTypeRead
	(*ElevatorTypeRead)(nil),         // 13: gitlab.com.mercury.residenceservice.generated.model.v1.ElevatorTypeRead
	(*PurchaseMethodRead)(nil),       // 14: gitlab.com.mercury.residenceservice.generated.model.v1.PurchaseMethodRead
	(*BuilderRead)(nil),              // 15: gitlab.com.mercury.residenceservice.generated.model.v1.BuilderRead
	(*SaleStatusRead)(nil),           // 16: gitlab.com.mercury.residenceservice.generated.model.v1.SaleStatusRead
	(*PageRequest)(nil),              // 17: gitlab.com.mercury.residenceservice.generated.model.v1.PageRequest
	(*Sort)(nil),                     // 18: gitlab.com.mercury.residenceservice.generated.model.v1.Sort
}
var file_residenceserviceapi_residence_model_proto_depIdxs = []int32{
	2,  // 0: gitlab.com.mercury.residenceservice.generated.model.v1.ResidenceWrite.flat_plans:type_name -> gitlab.com.mercury.residenceservice.generated.model.v1.ResidenceFlatPlanWrite
	5,  // 1: gitlab.com.mercury.residenceservice.generated.model.v1.ResidenceRead.status:type_name -> gitlab.com.mercury.residenceservice.generated.model.v1.StatusRead
	6,  // 2: gitlab.com.mercury.residenceservice.generated.model.v1.ResidenceRead.city:type_name -> gitlab.com.mercury.residenceservice.generated.model.v1.City
	7,  // 3: gitlab.com.mercury.residenceservice.generated.model.v1.ResidenceRead.housing_class:type_name -> gitlab.com.mercury.residenceservice.generated.model.v1.HouseClassRead
	8,  // 4: gitlab.com.mercury.residenceservice.generated.model.v1.ResidenceRead.construction_type:type_name -> gitlab.com.mercury.residenceservice.generated.model.v1.ConstructionTypeRead
	9,  // 5: gitlab.com.mercury.residenceservice.generated.model.v1.ResidenceRead.district:type_name -> gitlab.com.mercury.residenceservice.generated.model.v1.DistrictRead
	3,  // 6: gitlab.com.mercury.residenceservice.generated.model.v1.ResidenceRead.flat_plans:type_name -> gitlab.com.mercury.residenceservice.generated.model.v1.ResidenceFlatPlanRead
	10, // 7: gitlab.com.mercury.residenceservice.generated.model.v1.ResidenceRead.parking_types:type_name -> gitlab.com.mercury.residenceservice.generated.model.v1.ParkingTypeRead
	11, // 8: gitlab.com.mercury.residenceservice.generated.model.v1.ResidenceRead.interior_decorations:type_name -> gitlab.com.mercury.residenceservice.generated.model.v1.InteriorDecorationRead
	12, // 9: gitlab.com.mercury.residenceservice.generated.model.v1.ResidenceRead.heating_types:type_name -> gitlab.com.mercury.residenceservice.generated.model.v1.HeatingTypeRead
	13, // 10: gitlab.com.mercury.residenceservice.generated.model.v1.ResidenceRead.elevator_types:type_name -> gitlab.com.mercury.residenceservice.generated.model.v1.ElevatorTypeRead
	14, // 11: gitlab.com.mercury.residenceservice.generated.model.v1.ResidenceRead.purchase_methods:type_name -> gitlab.com.mercury.residenceservice.generated.model.v1.PurchaseMethodRead
	15, // 12: gitlab.com.mercury.residenceservice.generated.model.v1.ResidenceRead.builder:type_name -> gitlab.com.mercury.residenceservice.generated.model.v1.BuilderRead
	16, // 13: gitlab.com.mercury.residenceservice.generated.model.v1.ResidenceRead.sale_status:type_name -> gitlab.com.mercury.residenceservice.generated.model.v1.SaleStatusRead
	17, // 14: gitlab.com.mercury.residenceservice.generated.model.v1.ResidencesSearchCriteria.page_request:type_name -> gitlab.com.mercury.residenceservice.generated.model.v1.PageRequest
	18, // 15: gitlab.com.mercury.residenceservice.generated.model.v1.ResidencesSearchCriteria.sorts:type_name -> gitlab.com.mercury.residenceservice.generated.model.v1.Sort
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_residenceserviceapi_residence_model_proto_init() }
func file_residenceserviceapi_residence_model_proto_init() {
	if File_residenceserviceapi_residence_model_proto != nil {
		return
	}
	file_common_model_proto_init()
	file_residenceserviceapi_builder_model_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_residenceserviceapi_residence_model_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResidenceWrite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_residenceserviceapi_residence_model_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResidenceRead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_residenceserviceapi_residence_model_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResidenceFlatPlanWrite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_residenceserviceapi_residence_model_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResidenceFlatPlanRead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_residenceserviceapi_residence_model_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResidencesSearchCriteria); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_residenceserviceapi_residence_model_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_residenceserviceapi_residence_model_proto_goTypes,
		DependencyIndexes: file_residenceserviceapi_residence_model_proto_depIdxs,
		MessageInfos:      file_residenceserviceapi_residence_model_proto_msgTypes,
	}.Build()
	File_residenceserviceapi_residence_model_proto = out.File
	file_residenceserviceapi_residence_model_proto_rawDesc = nil
	file_residenceserviceapi_residence_model_proto_goTypes = nil
	file_residenceserviceapi_residence_model_proto_depIdxs = nil
}
