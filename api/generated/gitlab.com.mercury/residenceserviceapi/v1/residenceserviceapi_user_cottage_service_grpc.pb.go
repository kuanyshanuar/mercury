// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: residenceserviceapi_user_cottage_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserCottagesServiceClient is the client API for UserCottagesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserCottagesServiceClient interface {
	AddUserCottage(ctx context.Context, in *AddUserCottageRequest, opts ...grpc.CallOption) (*AddUserCottageResponse, error)
	DeleteUserCottage(ctx context.Context, in *DeleteUserCottageRequest, opts ...grpc.CallOption) (*DeleteUserCottageResponse, error)
	ListUserCottage(ctx context.Context, in *ListUserCottageRequest, opts ...grpc.CallOption) (*ListUserCottageResponse, error)
}

type userCottagesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserCottagesServiceClient(cc grpc.ClientConnInterface) UserCottagesServiceClient {
	return &userCottagesServiceClient{cc}
}

func (c *userCottagesServiceClient) AddUserCottage(ctx context.Context, in *AddUserCottageRequest, opts ...grpc.CallOption) (*AddUserCottageResponse, error) {
	out := new(AddUserCottageResponse)
	err := c.cc.Invoke(ctx, "/gitlab.com.mercury.residenceservice.generated.model.v1.UserCottagesService/AddUserCottage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCottagesServiceClient) DeleteUserCottage(ctx context.Context, in *DeleteUserCottageRequest, opts ...grpc.CallOption) (*DeleteUserCottageResponse, error) {
	out := new(DeleteUserCottageResponse)
	err := c.cc.Invoke(ctx, "/gitlab.com.mercury.residenceservice.generated.model.v1.UserCottagesService/DeleteUserCottage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCottagesServiceClient) ListUserCottage(ctx context.Context, in *ListUserCottageRequest, opts ...grpc.CallOption) (*ListUserCottageResponse, error) {
	out := new(ListUserCottageResponse)
	err := c.cc.Invoke(ctx, "/gitlab.com.mercury.residenceservice.generated.model.v1.UserCottagesService/ListUserCottage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserCottagesServiceServer is the server API for UserCottagesService service.
// All implementations should embed UnimplementedUserCottagesServiceServer
// for forward compatibility
type UserCottagesServiceServer interface {
	AddUserCottage(context.Context, *AddUserCottageRequest) (*AddUserCottageResponse, error)
	DeleteUserCottage(context.Context, *DeleteUserCottageRequest) (*DeleteUserCottageResponse, error)
	ListUserCottage(context.Context, *ListUserCottageRequest) (*ListUserCottageResponse, error)
}

// UnimplementedUserCottagesServiceServer should be embedded to have forward compatible implementations.
type UnimplementedUserCottagesServiceServer struct {
}

func (UnimplementedUserCottagesServiceServer) AddUserCottage(context.Context, *AddUserCottageRequest) (*AddUserCottageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserCottage not implemented")
}
func (UnimplementedUserCottagesServiceServer) DeleteUserCottage(context.Context, *DeleteUserCottageRequest) (*DeleteUserCottageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserCottage not implemented")
}
func (UnimplementedUserCottagesServiceServer) ListUserCottage(context.Context, *ListUserCottageRequest) (*ListUserCottageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserCottage not implemented")
}

// UnsafeUserCottagesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserCottagesServiceServer will
// result in compilation errors.
type UnsafeUserCottagesServiceServer interface {
	mustEmbedUnimplementedUserCottagesServiceServer()
}

func RegisterUserCottagesServiceServer(s grpc.ServiceRegistrar, srv UserCottagesServiceServer) {
	s.RegisterService(&UserCottagesService_ServiceDesc, srv)
}

func _UserCottagesService_AddUserCottage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserCottageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCottagesServiceServer).AddUserCottage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitlab.com.mercury.residenceservice.generated.model.v1.UserCottagesService/AddUserCottage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCottagesServiceServer).AddUserCottage(ctx, req.(*AddUserCottageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCottagesService_DeleteUserCottage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserCottageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCottagesServiceServer).DeleteUserCottage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitlab.com.mercury.residenceservice.generated.model.v1.UserCottagesService/DeleteUserCottage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCottagesServiceServer).DeleteUserCottage(ctx, req.(*DeleteUserCottageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCottagesService_ListUserCottage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserCottageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCottagesServiceServer).ListUserCottage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitlab.com.mercury.residenceservice.generated.model.v1.UserCottagesService/ListUserCottage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCottagesServiceServer).ListUserCottage(ctx, req.(*ListUserCottageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserCottagesService_ServiceDesc is the grpc.ServiceDesc for UserCottagesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserCottagesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gitlab.com.mercury.residenceservice.generated.model.v1.UserCottagesService",
	HandlerType: (*UserCottagesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUserCottage",
			Handler:    _UserCottagesService_AddUserCottage_Handler,
		},
		{
			MethodName: "DeleteUserCottage",
			Handler:    _UserCottagesService_DeleteUserCottage_Handler,
		},
		{
			MethodName: "ListUserCottage",
			Handler:    _UserCottagesService_ListUserCottage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "residenceserviceapi_user_cottage_service.proto",
}
