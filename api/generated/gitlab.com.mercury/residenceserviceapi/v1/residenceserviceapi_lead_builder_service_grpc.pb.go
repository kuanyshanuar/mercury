// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: residenceserviceapi_lead_builder_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LeadBuildersServiceClient is the client API for LeadBuildersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LeadBuildersServiceClient interface {
	// *
	// Creates a new lead residence.
	//
	// If the residence exists, an error "Already exists" will be returned.
	CreateLeadBuilder(ctx context.Context, in *CreateLeadBuilderRequest, opts ...grpc.CallOption) (*CreateLeadBuilderResponse, error)
	// *
	// Returns a list residence by criteria.
	//
	// If the residence does not exist, an error "Not found" will be returned.
	ListLeadBuilders(ctx context.Context, in *ListLeadBuildersRequest, opts ...grpc.CallOption) (*ListLeadBuildersResponse, error)
	// *
	// Updates the residence by id.
	//
	// If the residence does not exist, an error "Not found" will be returned.
	UpdateLeadBuilder(ctx context.Context, in *UpdateLeadBuilderRequest, opts ...grpc.CallOption) (*UpdateLeadBuilderResponse, error)
	// *
	// Deletes the residence by id.
	//
	// If the residence does not exist, an error "Not found" will be returned.
	DeleteLeadBuilder(ctx context.Context, in *DeleteLeadBuilderRequest, opts ...grpc.CallOption) (*DeleteLeadBuilderResponse, error)
}

type leadBuildersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLeadBuildersServiceClient(cc grpc.ClientConnInterface) LeadBuildersServiceClient {
	return &leadBuildersServiceClient{cc}
}

func (c *leadBuildersServiceClient) CreateLeadBuilder(ctx context.Context, in *CreateLeadBuilderRequest, opts ...grpc.CallOption) (*CreateLeadBuilderResponse, error) {
	out := new(CreateLeadBuilderResponse)
	err := c.cc.Invoke(ctx, "/gitlab.com.mercury.residenceservice.generated.model.v1.LeadBuildersService/CreateLeadBuilder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadBuildersServiceClient) ListLeadBuilders(ctx context.Context, in *ListLeadBuildersRequest, opts ...grpc.CallOption) (*ListLeadBuildersResponse, error) {
	out := new(ListLeadBuildersResponse)
	err := c.cc.Invoke(ctx, "/gitlab.com.mercury.residenceservice.generated.model.v1.LeadBuildersService/ListLeadBuilders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadBuildersServiceClient) UpdateLeadBuilder(ctx context.Context, in *UpdateLeadBuilderRequest, opts ...grpc.CallOption) (*UpdateLeadBuilderResponse, error) {
	out := new(UpdateLeadBuilderResponse)
	err := c.cc.Invoke(ctx, "/gitlab.com.mercury.residenceservice.generated.model.v1.LeadBuildersService/UpdateLeadBuilder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadBuildersServiceClient) DeleteLeadBuilder(ctx context.Context, in *DeleteLeadBuilderRequest, opts ...grpc.CallOption) (*DeleteLeadBuilderResponse, error) {
	out := new(DeleteLeadBuilderResponse)
	err := c.cc.Invoke(ctx, "/gitlab.com.mercury.residenceservice.generated.model.v1.LeadBuildersService/DeleteLeadBuilder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LeadBuildersServiceServer is the server API for LeadBuildersService service.
// All implementations should embed UnimplementedLeadBuildersServiceServer
// for forward compatibility
type LeadBuildersServiceServer interface {
	// *
	// Creates a new lead residence.
	//
	// If the residence exists, an error "Already exists" will be returned.
	CreateLeadBuilder(context.Context, *CreateLeadBuilderRequest) (*CreateLeadBuilderResponse, error)
	// *
	// Returns a list residence by criteria.
	//
	// If the residence does not exist, an error "Not found" will be returned.
	ListLeadBuilders(context.Context, *ListLeadBuildersRequest) (*ListLeadBuildersResponse, error)
	// *
	// Updates the residence by id.
	//
	// If the residence does not exist, an error "Not found" will be returned.
	UpdateLeadBuilder(context.Context, *UpdateLeadBuilderRequest) (*UpdateLeadBuilderResponse, error)
	// *
	// Deletes the residence by id.
	//
	// If the residence does not exist, an error "Not found" will be returned.
	DeleteLeadBuilder(context.Context, *DeleteLeadBuilderRequest) (*DeleteLeadBuilderResponse, error)
}

// UnimplementedLeadBuildersServiceServer should be embedded to have forward compatible implementations.
type UnimplementedLeadBuildersServiceServer struct {
}

func (UnimplementedLeadBuildersServiceServer) CreateLeadBuilder(context.Context, *CreateLeadBuilderRequest) (*CreateLeadBuilderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLeadBuilder not implemented")
}
func (UnimplementedLeadBuildersServiceServer) ListLeadBuilders(context.Context, *ListLeadBuildersRequest) (*ListLeadBuildersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLeadBuilders not implemented")
}
func (UnimplementedLeadBuildersServiceServer) UpdateLeadBuilder(context.Context, *UpdateLeadBuilderRequest) (*UpdateLeadBuilderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLeadBuilder not implemented")
}
func (UnimplementedLeadBuildersServiceServer) DeleteLeadBuilder(context.Context, *DeleteLeadBuilderRequest) (*DeleteLeadBuilderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLeadBuilder not implemented")
}

// UnsafeLeadBuildersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LeadBuildersServiceServer will
// result in compilation errors.
type UnsafeLeadBuildersServiceServer interface {
	mustEmbedUnimplementedLeadBuildersServiceServer()
}

func RegisterLeadBuildersServiceServer(s grpc.ServiceRegistrar, srv LeadBuildersServiceServer) {
	s.RegisterService(&LeadBuildersService_ServiceDesc, srv)
}

func _LeadBuildersService_CreateLeadBuilder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLeadBuilderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadBuildersServiceServer).CreateLeadBuilder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitlab.com.mercury.residenceservice.generated.model.v1.LeadBuildersService/CreateLeadBuilder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadBuildersServiceServer).CreateLeadBuilder(ctx, req.(*CreateLeadBuilderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadBuildersService_ListLeadBuilders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLeadBuildersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadBuildersServiceServer).ListLeadBuilders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitlab.com.mercury.residenceservice.generated.model.v1.LeadBuildersService/ListLeadBuilders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadBuildersServiceServer).ListLeadBuilders(ctx, req.(*ListLeadBuildersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadBuildersService_UpdateLeadBuilder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLeadBuilderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadBuildersServiceServer).UpdateLeadBuilder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitlab.com.mercury.residenceservice.generated.model.v1.LeadBuildersService/UpdateLeadBuilder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadBuildersServiceServer).UpdateLeadBuilder(ctx, req.(*UpdateLeadBuilderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadBuildersService_DeleteLeadBuilder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLeadBuilderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadBuildersServiceServer).DeleteLeadBuilder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitlab.com.mercury.residenceservice.generated.model.v1.LeadBuildersService/DeleteLeadBuilder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadBuildersServiceServer).DeleteLeadBuilder(ctx, req.(*DeleteLeadBuilderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LeadBuildersService_ServiceDesc is the grpc.ServiceDesc for LeadBuildersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LeadBuildersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gitlab.com.mercury.residenceservice.generated.model.v1.LeadBuildersService",
	HandlerType: (*LeadBuildersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLeadBuilder",
			Handler:    _LeadBuildersService_CreateLeadBuilder_Handler,
		},
		{
			MethodName: "ListLeadBuilders",
			Handler:    _LeadBuildersService_ListLeadBuilders_Handler,
		},
		{
			MethodName: "UpdateLeadBuilder",
			Handler:    _LeadBuildersService_UpdateLeadBuilder_Handler,
		},
		{
			MethodName: "DeleteLeadBuilder",
			Handler:    _LeadBuildersService_DeleteLeadBuilder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "residenceserviceapi_lead_builder_service.proto",
}
