// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: residenceserviceapi_lead_residence_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LeadResidencesServiceClient is the client API for LeadResidencesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LeadResidencesServiceClient interface {
	// *
	// Creates a new lead residence.
	//
	// If the residence exists, an error "Already exists" will be returned.
	CreateLeadResidence(ctx context.Context, in *CreateLeadResidenceRequest, opts ...grpc.CallOption) (*CreateLeadResidenceResponse, error)
	// *
	// Returns a list residence by criteria.
	//
	// If the residence does not exist, an error "Not found" will be returned.
	ListLeadResidences(ctx context.Context, in *ListLeadResidencesRequest, opts ...grpc.CallOption) (*ListLeadResidencesResponse, error)
	// *
	// Updates the residence by id.
	//
	// If the residence does not exist, an error "Not found" will be returned.
	UpdateLeadResidence(ctx context.Context, in *UpdateLeadResidenceRequest, opts ...grpc.CallOption) (*UpdateLeadResidenceResponse, error)
	// *
	// Deletes the residence by id.
	//
	// If the residence does not exist, an error "Not found" will be returned.
	DeleteLeadResidence(ctx context.Context, in *DeleteLeadResidenceRequest, opts ...grpc.CallOption) (*DeleteLeadResidenceResponse, error)
}

type leadResidencesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLeadResidencesServiceClient(cc grpc.ClientConnInterface) LeadResidencesServiceClient {
	return &leadResidencesServiceClient{cc}
}

func (c *leadResidencesServiceClient) CreateLeadResidence(ctx context.Context, in *CreateLeadResidenceRequest, opts ...grpc.CallOption) (*CreateLeadResidenceResponse, error) {
	out := new(CreateLeadResidenceResponse)
	err := c.cc.Invoke(ctx, "/gitlab.com.mercury.residenceservice.generated.model.v1.LeadResidencesService/CreateLeadResidence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadResidencesServiceClient) ListLeadResidences(ctx context.Context, in *ListLeadResidencesRequest, opts ...grpc.CallOption) (*ListLeadResidencesResponse, error) {
	out := new(ListLeadResidencesResponse)
	err := c.cc.Invoke(ctx, "/gitlab.com.mercury.residenceservice.generated.model.v1.LeadResidencesService/ListLeadResidences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadResidencesServiceClient) UpdateLeadResidence(ctx context.Context, in *UpdateLeadResidenceRequest, opts ...grpc.CallOption) (*UpdateLeadResidenceResponse, error) {
	out := new(UpdateLeadResidenceResponse)
	err := c.cc.Invoke(ctx, "/gitlab.com.mercury.residenceservice.generated.model.v1.LeadResidencesService/UpdateLeadResidence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadResidencesServiceClient) DeleteLeadResidence(ctx context.Context, in *DeleteLeadResidenceRequest, opts ...grpc.CallOption) (*DeleteLeadResidenceResponse, error) {
	out := new(DeleteLeadResidenceResponse)
	err := c.cc.Invoke(ctx, "/gitlab.com.mercury.residenceservice.generated.model.v1.LeadResidencesService/DeleteLeadResidence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LeadResidencesServiceServer is the server API for LeadResidencesService service.
// All implementations should embed UnimplementedLeadResidencesServiceServer
// for forward compatibility
type LeadResidencesServiceServer interface {
	// *
	// Creates a new lead residence.
	//
	// If the residence exists, an error "Already exists" will be returned.
	CreateLeadResidence(context.Context, *CreateLeadResidenceRequest) (*CreateLeadResidenceResponse, error)
	// *
	// Returns a list residence by criteria.
	//
	// If the residence does not exist, an error "Not found" will be returned.
	ListLeadResidences(context.Context, *ListLeadResidencesRequest) (*ListLeadResidencesResponse, error)
	// *
	// Updates the residence by id.
	//
	// If the residence does not exist, an error "Not found" will be returned.
	UpdateLeadResidence(context.Context, *UpdateLeadResidenceRequest) (*UpdateLeadResidenceResponse, error)
	// *
	// Deletes the residence by id.
	//
	// If the residence does not exist, an error "Not found" will be returned.
	DeleteLeadResidence(context.Context, *DeleteLeadResidenceRequest) (*DeleteLeadResidenceResponse, error)
}

// UnimplementedLeadResidencesServiceServer should be embedded to have forward compatible implementations.
type UnimplementedLeadResidencesServiceServer struct {
}

func (UnimplementedLeadResidencesServiceServer) CreateLeadResidence(context.Context, *CreateLeadResidenceRequest) (*CreateLeadResidenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLeadResidence not implemented")
}
func (UnimplementedLeadResidencesServiceServer) ListLeadResidences(context.Context, *ListLeadResidencesRequest) (*ListLeadResidencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLeadResidences not implemented")
}
func (UnimplementedLeadResidencesServiceServer) UpdateLeadResidence(context.Context, *UpdateLeadResidenceRequest) (*UpdateLeadResidenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLeadResidence not implemented")
}
func (UnimplementedLeadResidencesServiceServer) DeleteLeadResidence(context.Context, *DeleteLeadResidenceRequest) (*DeleteLeadResidenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLeadResidence not implemented")
}

// UnsafeLeadResidencesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LeadResidencesServiceServer will
// result in compilation errors.
type UnsafeLeadResidencesServiceServer interface {
	mustEmbedUnimplementedLeadResidencesServiceServer()
}

func RegisterLeadResidencesServiceServer(s grpc.ServiceRegistrar, srv LeadResidencesServiceServer) {
	s.RegisterService(&LeadResidencesService_ServiceDesc, srv)
}

func _LeadResidencesService_CreateLeadResidence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLeadResidenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadResidencesServiceServer).CreateLeadResidence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitlab.com.mercury.residenceservice.generated.model.v1.LeadResidencesService/CreateLeadResidence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadResidencesServiceServer).CreateLeadResidence(ctx, req.(*CreateLeadResidenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadResidencesService_ListLeadResidences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLeadResidencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadResidencesServiceServer).ListLeadResidences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitlab.com.mercury.residenceservice.generated.model.v1.LeadResidencesService/ListLeadResidences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadResidencesServiceServer).ListLeadResidences(ctx, req.(*ListLeadResidencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadResidencesService_UpdateLeadResidence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLeadResidenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadResidencesServiceServer).UpdateLeadResidence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitlab.com.mercury.residenceservice.generated.model.v1.LeadResidencesService/UpdateLeadResidence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadResidencesServiceServer).UpdateLeadResidence(ctx, req.(*UpdateLeadResidenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadResidencesService_DeleteLeadResidence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLeadResidenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadResidencesServiceServer).DeleteLeadResidence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitlab.com.mercury.residenceservice.generated.model.v1.LeadResidencesService/DeleteLeadResidence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadResidencesServiceServer).DeleteLeadResidence(ctx, req.(*DeleteLeadResidenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LeadResidencesService_ServiceDesc is the grpc.ServiceDesc for LeadResidencesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LeadResidencesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gitlab.com.mercury.residenceservice.generated.model.v1.LeadResidencesService",
	HandlerType: (*LeadResidencesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLeadResidence",
			Handler:    _LeadResidencesService_CreateLeadResidence_Handler,
		},
		{
			MethodName: "ListLeadResidences",
			Handler:    _LeadResidencesService_ListLeadResidences_Handler,
		},
		{
			MethodName: "UpdateLeadResidence",
			Handler:    _LeadResidencesService_UpdateLeadResidence_Handler,
		},
		{
			MethodName: "DeleteLeadResidence",
			Handler:    _LeadResidencesService_DeleteLeadResidence_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "residenceserviceapi_lead_residence_service.proto",
}
