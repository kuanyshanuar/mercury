// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.3
// source: residenceserviceapi_cottage_model.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CottageWrite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CityID of the city of the location of the cottage
	CityId int64 `protobuf:"varint,1,opt,name=city_id,json=cityId,proto3" json:"city_id,omitempty"`
	// User id
	UserId int64 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// StatusID - id of the cottage status
	StatusId int64 `protobuf:"varint,3,opt,name=status_id,json=statusId,proto3" json:"status_id,omitempty"`
	// District id
	DistrictId int64 `protobuf:"varint,4,opt,name=district_id,json=districtId,proto3" json:"district_id,omitempty"`
	// HousingClassID - id of the house class
	HousingClassId int64 `protobuf:"varint,5,opt,name=housing_class_id,json=housingClassId,proto3" json:"housing_class_id,omitempty"`
	// Title is a title of the cottage
	Title string `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
	// Description is a description of the cottage, main information
	Description string `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	// Address is an address of the cottage in String
	Address string `protobuf:"bytes,8,opt,name=address,proto3" json:"address,omitempty"`
	// Latitude is latitude of the cottage
	Latitude float64 `protobuf:"fixed64,9,opt,name=latitude,proto3" json:"latitude,omitempty"`
	// Longitude is longitude of the cottage
	Longitude float64 `protobuf:"fixed64,10,opt,name=longitude,proto3" json:"longitude,omitempty"`
	// Territory is description of the territory
	Territory string `protobuf:"bytes,11,opt,name=territory,proto3" json:"territory,omitempty"`
	// CeilingHeightMin is a minimal ceiling height of the cottage(preferably choose among the house plans)
	CeilingHeightMin float64 `protobuf:"fixed64,12,opt,name=ceiling_height_min,json=ceilingHeightMin,proto3" json:"ceiling_height_min,omitempty"`
	// CeilingHeightMin is a maximal ceiling height of the cottage(preferably choose among the house plans)
	CeilingHeightMax float64 `protobuf:"fixed64,13,opt,name=ceiling_height_max,json=ceilingHeightMax,proto3" json:"ceiling_height_max,omitempty"`
	// BuildingArea is area of the building
	BuildingArea float64 `protobuf:"fixed64,14,opt,name=building_area,json=buildingArea,proto3" json:"building_area,omitempty"`
	// AreaMin shows minimal house square of the cottage
	AreaMin float64 `protobuf:"fixed64,15,opt,name=area_min,json=areaMin,proto3" json:"area_min,omitempty"`
	// AreaMax shows maximal house square of the cottage
	AreaMax float64 `protobuf:"fixed64,16,opt,name=area_max,json=areaMax,proto3" json:"area_max,omitempty"`
	// HouseAmount shows how many houses in the cottage complex
	HouseAmount int64 `protobuf:"varint,17,opt,name=house_amount,json=houseAmount,proto3" json:"house_amount,omitempty"`
	// FloorsCount is an id of the cottage
	FloorsCount int64 `protobuf:"varint,18,opt,name=floors_count,json=floorsCount,proto3" json:"floors_count,omitempty"`
	// Facade is a description of the facade
	Facade string `protobuf:"bytes,19,opt,name=facade,proto3" json:"facade,omitempty"`
	// CanRePlan shows whether cottage can be constructed and planned differently
	CanReplan bool `protobuf:"varint,20,opt,name=can_replan,json=canReplan,proto3" json:"can_replan,omitempty"`
	// RoomsMin - minimal number of rooms among the house plans
	RoomsMin int64 `protobuf:"varint,21,opt,name=rooms_min,json=roomsMin,proto3" json:"rooms_min,omitempty"`
	// RoomsMax- maximal number of rooms among the house plans
	RoomsMax int64 `protobuf:"varint,22,opt,name=rooms_max,json=roomsMax,proto3" json:"rooms_max,omitempty"`
	// PricePerSquareMin - preferably among the house plans of the cottage
	PricePerSquareMin float64 `protobuf:"fixed64,23,opt,name=price_per_square_min,json=pricePerSquareMin,proto3" json:"price_per_square_min,omitempty"`
	// PricePerSquareMax - preferably among the house plans of the cottage
	PricePerSquareMax float64 `protobuf:"fixed64,24,opt,name=price_per_square_max,json=pricePerSquareMax,proto3" json:"price_per_square_max,omitempty"`
	// ParkingTypes - available parking types
	ParkingTypes []int64 `protobuf:"varint,25,rep,packed,name=parking_types,json=parkingTypes,proto3" json:"parking_types,omitempty"`
	// House plans
	HousePlans []*HousePlanWrite `protobuf:"bytes,26,rep,name=house_plans,json=housePlans,proto3" json:"house_plans,omitempty"`
	// CottageWallTypesIDs
	WallTypes []int64 `protobuf:"varint,27,rep,packed,name=wall_types,json=wallTypes,proto3" json:"wall_types,omitempty"`
	// ElevatorTypes
	ElevatorTypes []int64 `protobuf:"varint,28,rep,packed,name=elevator_types,json=elevatorTypes,proto3" json:"elevator_types,omitempty"`
	// WarmingTypeIDs
	WarmingTypes []int64 `protobuf:"varint,29,rep,packed,name=warming_types,json=warmingTypes,proto3" json:"warming_types,omitempty"`
	// WindowTypeIDS
	WindowTypes []int64 `protobuf:"varint,30,rep,packed,name=window_types,json=windowTypes,proto3" json:"window_types,omitempty"`
	// InteriorDecorationIDs
	InteriorDecorations []int64 `protobuf:"varint,31,rep,packed,name=interior_decorations,json=interiorDecorations,proto3" json:"interior_decorations,omitempty"`
	// PurchaseMethods - available purchase methods
	PurchaseMethods []int64 `protobuf:"varint,32,rep,packed,name=purchase_methods,json=purchaseMethods,proto3" json:"purchase_methods,omitempty"`
	// HeatingTypes - available purchase methods
	HeatingTypes []int64 `protobuf:"varint,33,rep,packed,name=heating_types,json=heatingTypes,proto3" json:"heating_types,omitempty"`
	// Images - introductory images of the cottage
	Images []string `protobuf:"bytes,34,rep,name=images,proto3" json:"images,omitempty"`
	// Sale status id
	SaleStatusId int64 `protobuf:"varint,35,opt,name=sale_status_id,json=saleStatusId,proto3" json:"sale_status_id,omitempty"`
}

func (x *CottageWrite) Reset() {
	*x = CottageWrite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_residenceserviceapi_cottage_model_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CottageWrite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CottageWrite) ProtoMessage() {}

func (x *CottageWrite) ProtoReflect() protoreflect.Message {
	mi := &file_residenceserviceapi_cottage_model_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CottageWrite.ProtoReflect.Descriptor instead.
func (*CottageWrite) Descriptor() ([]byte, []int) {
	return file_residenceserviceapi_cottage_model_proto_rawDescGZIP(), []int{0}
}

func (x *CottageWrite) GetCityId() int64 {
	if x != nil {
		return x.CityId
	}
	return 0
}

func (x *CottageWrite) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CottageWrite) GetStatusId() int64 {
	if x != nil {
		return x.StatusId
	}
	return 0
}

func (x *CottageWrite) GetDistrictId() int64 {
	if x != nil {
		return x.DistrictId
	}
	return 0
}

func (x *CottageWrite) GetHousingClassId() int64 {
	if x != nil {
		return x.HousingClassId
	}
	return 0
}

func (x *CottageWrite) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CottageWrite) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CottageWrite) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *CottageWrite) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *CottageWrite) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *CottageWrite) GetTerritory() string {
	if x != nil {
		return x.Territory
	}
	return ""
}

func (x *CottageWrite) GetCeilingHeightMin() float64 {
	if x != nil {
		return x.CeilingHeightMin
	}
	return 0
}

func (x *CottageWrite) GetCeilingHeightMax() float64 {
	if x != nil {
		return x.CeilingHeightMax
	}
	return 0
}

func (x *CottageWrite) GetBuildingArea() float64 {
	if x != nil {
		return x.BuildingArea
	}
	return 0
}

func (x *CottageWrite) GetAreaMin() float64 {
	if x != nil {
		return x.AreaMin
	}
	return 0
}

func (x *CottageWrite) GetAreaMax() float64 {
	if x != nil {
		return x.AreaMax
	}
	return 0
}

func (x *CottageWrite) GetHouseAmount() int64 {
	if x != nil {
		return x.HouseAmount
	}
	return 0
}

func (x *CottageWrite) GetFloorsCount() int64 {
	if x != nil {
		return x.FloorsCount
	}
	return 0
}

func (x *CottageWrite) GetFacade() string {
	if x != nil {
		return x.Facade
	}
	return ""
}

func (x *CottageWrite) GetCanReplan() bool {
	if x != nil {
		return x.CanReplan
	}
	return false
}

func (x *CottageWrite) GetRoomsMin() int64 {
	if x != nil {
		return x.RoomsMin
	}
	return 0
}

func (x *CottageWrite) GetRoomsMax() int64 {
	if x != nil {
		return x.RoomsMax
	}
	return 0
}

func (x *CottageWrite) GetPricePerSquareMin() float64 {
	if x != nil {
		return x.PricePerSquareMin
	}
	return 0
}

func (x *CottageWrite) GetPricePerSquareMax() float64 {
	if x != nil {
		return x.PricePerSquareMax
	}
	return 0
}

func (x *CottageWrite) GetParkingTypes() []int64 {
	if x != nil {
		return x.ParkingTypes
	}
	return nil
}

func (x *CottageWrite) GetHousePlans() []*HousePlanWrite {
	if x != nil {
		return x.HousePlans
	}
	return nil
}

func (x *CottageWrite) GetWallTypes() []int64 {
	if x != nil {
		return x.WallTypes
	}
	return nil
}

func (x *CottageWrite) GetElevatorTypes() []int64 {
	if x != nil {
		return x.ElevatorTypes
	}
	return nil
}

func (x *CottageWrite) GetWarmingTypes() []int64 {
	if x != nil {
		return x.WarmingTypes
	}
	return nil
}

func (x *CottageWrite) GetWindowTypes() []int64 {
	if x != nil {
		return x.WindowTypes
	}
	return nil
}

func (x *CottageWrite) GetInteriorDecorations() []int64 {
	if x != nil {
		return x.InteriorDecorations
	}
	return nil
}

func (x *CottageWrite) GetPurchaseMethods() []int64 {
	if x != nil {
		return x.PurchaseMethods
	}
	return nil
}

func (x *CottageWrite) GetHeatingTypes() []int64 {
	if x != nil {
		return x.HeatingTypes
	}
	return nil
}

func (x *CottageWrite) GetImages() []string {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *CottageWrite) GetSaleStatusId() int64 {
	if x != nil {
		return x.SaleStatusId
	}
	return 0
}

type CottageRead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is an id of the cottage
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// CityID
	CityId int64 `protobuf:"varint,2,opt,name=city_id,json=cityId,proto3" json:"city_id,omitempty"`
	// UserID - user id.
	UserId int64 `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// StatusID - status of the residence.
	StatusId int64 `protobuf:"varint,4,opt,name=status_id,json=statusId,proto3" json:"status_id,omitempty"`
	// Status - represents status.
	// only read
	Status *StatusRead `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	// DistrictID
	DistrictId int64 `protobuf:"varint,6,opt,name=district_id,json=districtId,proto3" json:"district_id,omitempty"`
	// DistrictRead - result of the district read from the database
	District *DistrictRead `protobuf:"bytes,7,opt,name=district,proto3" json:"district,omitempty"`
	// HouseClassID - id of the house class belonging
	HousingClassId int64 `protobuf:"varint,8,opt,name=housing_class_id,json=housingClassId,proto3" json:"housing_class_id,omitempty"`
	// HousingClass - result of the read of the housing class from the database
	HousingClass *HouseClassRead `protobuf:"bytes,9,opt,name=housing_class,json=housingClass,proto3" json:"housing_class,omitempty"`
	// Title is a title of the cottage
	Title string `protobuf:"bytes,10,opt,name=title,proto3" json:"title,omitempty"`
	// Description is a description of the cottage, main information
	Description string `protobuf:"bytes,11,opt,name=description,proto3" json:"description,omitempty"`
	// Address is an address of the cottage in String
	Address string `protobuf:"bytes,12,opt,name=address,proto3" json:"address,omitempty"`
	// Latitude is latitude of the cottage territory
	Latitude float64 `protobuf:"fixed64,13,opt,name=latitude,proto3" json:"latitude,omitempty"`
	// Longitude is longitude of the cottage territory
	Longitude float64 `protobuf:"fixed64,14,opt,name=longitude,proto3" json:"longitude,omitempty"`
	// Territory is description of the territory
	Territory string `protobuf:"bytes,15,opt,name=territory,proto3" json:"territory,omitempty"`
	// CeilingHeightMin is a minimal ceiling height among the house plans(preferably)
	CeilingHeightMin float64 `protobuf:"fixed64,16,opt,name=ceiling_height_min,json=ceilingHeightMin,proto3" json:"ceiling_height_min,omitempty"`
	// CeilingHeight is a minimal ceiling height among the house plans(preferably)
	CeilingHeightMax float64 `protobuf:"fixed64,17,opt,name=ceiling_height_max,json=ceilingHeightMax,proto3" json:"ceiling_height_max,omitempty"`
	// BuildingArea is area of the building
	BuildingArea float64 `protobuf:"fixed64,18,opt,name=building_area,json=buildingArea,proto3" json:"building_area,omitempty"`
	// AreaMin - minimal area among the house plans of the cottage or overall houses
	AreaMin float64 `protobuf:"fixed64,19,opt,name=area_min,json=areaMin,proto3" json:"area_min,omitempty"`
	// AreaMax - maximal area among the house plans of the cottage or overall houses
	AreaMax float64 `protobuf:"fixed64,20,opt,name=area_max,json=areaMax,proto3" json:"area_max,omitempty"`
	// HouseAmount shows how many houses in the cottage complex
	HouseAmount int64 `protobuf:"varint,21,opt,name=house_amount,json=houseAmount,proto3" json:"house_amount,omitempty"`
	// FloorsCount is an id of the cottage
	FloorsCount int64 `protobuf:"varint,22,opt,name=floors_count,json=floorsCount,proto3" json:"floors_count,omitempty"`
	// Facade is a description of the facade
	Facade string `protobuf:"bytes,23,opt,name=facade,proto3" json:"facade,omitempty"`
	// CanRePlan shows whether cottage is available to change its planning
	CanReplan bool `protobuf:"varint,24,opt,name=can_replan,json=canReplan,proto3" json:"can_replan,omitempty"`
	// RoomsMin- minimal number of rooms among the house plans
	RoomsMin int64 `protobuf:"varint,25,opt,name=rooms_min,json=roomsMin,proto3" json:"rooms_min,omitempty"`
	// RoomsMax - maximal number of rooms among the house plans
	RoomsMax int64 `protobuf:"varint,26,opt,name=rooms_max,json=roomsMax,proto3" json:"rooms_max,omitempty"`
	// PricePerSquareMin is minimal price per square among the cottage houses inside the cottage city
	PricePerSquareMin float64 `protobuf:"fixed64,27,opt,name=price_per_square_min,json=pricePerSquareMin,proto3" json:"price_per_square_min,omitempty"`
	// PricePerSquareMax is maximal price per square among the cottage houses inside the cottage city
	PricePerSquareMax float64 `protobuf:"fixed64,28,opt,name=price_per_square_max,json=pricePerSquareMax,proto3" json:"price_per_square_max,omitempty"`
	// Windows is a description of window types
	WindowTypes []*WindowTypeRead `protobuf:"bytes,29,rep,name=window_types,json=windowTypes,proto3" json:"window_types,omitempty"`
	// CottagePlans
	HousePlans []*HousePlanRead `protobuf:"bytes,30,rep,name=house_plans,json=housePlans,proto3" json:"house_plans,omitempty"`
	// CottageWallTypesIDs
	WallTypes []*WallTypeRead `protobuf:"bytes,31,rep,name=wall_types,json=wallTypes,proto3" json:"wall_types,omitempty"`
	// ElevatorTypes
	ElevatorTypes []*ElevatorTypeRead `protobuf:"bytes,32,rep,name=elevator_types,json=elevatorTypes,proto3" json:"elevator_types,omitempty"`
	// WarmingTypeIDs
	WarmingTypes []*WarmingTypeRead `protobuf:"bytes,33,rep,name=warming_types,json=warmingTypes,proto3" json:"warming_types,omitempty"`
	// InteriorDecorationIDs
	InteriorDecorations []*InteriorDecorationRead `protobuf:"bytes,34,rep,name=interior_decorations,json=interiorDecorations,proto3" json:"interior_decorations,omitempty"`
	// PurchaseMethods - available purchase methods
	PurchaseMethods []*PurchaseMethodRead `protobuf:"bytes,35,rep,name=purchase_methods,json=purchaseMethods,proto3" json:"purchase_methods,omitempty"`
	// HeatingTypes - available purchase methods
	HeatingTypes []*HeatingTypeRead `protobuf:"bytes,36,rep,name=heating_types,json=heatingTypes,proto3" json:"heating_types,omitempty"`
	// ParkingTypes
	ParkingTypes []*ParkingTypeRead `protobuf:"bytes,37,rep,name=parking_types,json=parkingTypes,proto3" json:"parking_types,omitempty"`
	// Images - introductory images of the cottage
	Images []string `protobuf:"bytes,38,rep,name=images,proto3" json:"images,omitempty"`
	// Created timestamp
	CreatedAt int64 `protobuf:"varint,39,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Updated timestamp
	UpdatedAt int64 `protobuf:"varint,40,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// Deleted timestamp
	DeletedAt int64 `protobuf:"varint,41,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	// Builder
	Builder *BuilderRead `protobuf:"bytes,42,opt,name=builder,proto3" json:"builder,omitempty"`
	// City
	City        *City `protobuf:"bytes,43,opt,name=city,proto3" json:"city,omitempty"`
	IsFavourite bool  `protobuf:"varint,44,opt,name=is_favourite,json=isFavourite,proto3" json:"is_favourite,omitempty"`
	// SaleStatusID - status of the residence.
	SaleStatusId int64 `protobuf:"varint,45,opt,name=sale_status_id,json=saleStatusId,proto3" json:"sale_status_id,omitempty"`
	// Sale status - represents status.
	// only read
	SaleStatus *SaleStatusRead `protobuf:"bytes,46,opt,name=sale_status,json=saleStatus,proto3" json:"sale_status,omitempty"`
}

func (x *CottageRead) Reset() {
	*x = CottageRead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_residenceserviceapi_cottage_model_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CottageRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CottageRead) ProtoMessage() {}

func (x *CottageRead) ProtoReflect() protoreflect.Message {
	mi := &file_residenceserviceapi_cottage_model_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CottageRead.ProtoReflect.Descriptor instead.
func (*CottageRead) Descriptor() ([]byte, []int) {
	return file_residenceserviceapi_cottage_model_proto_rawDescGZIP(), []int{1}
}

func (x *CottageRead) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CottageRead) GetCityId() int64 {
	if x != nil {
		return x.CityId
	}
	return 0
}

func (x *CottageRead) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CottageRead) GetStatusId() int64 {
	if x != nil {
		return x.StatusId
	}
	return 0
}

func (x *CottageRead) GetStatus() *StatusRead {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CottageRead) GetDistrictId() int64 {
	if x != nil {
		return x.DistrictId
	}
	return 0
}

func (x *CottageRead) GetDistrict() *DistrictRead {
	if x != nil {
		return x.District
	}
	return nil
}

func (x *CottageRead) GetHousingClassId() int64 {
	if x != nil {
		return x.HousingClassId
	}
	return 0
}

func (x *CottageRead) GetHousingClass() *HouseClassRead {
	if x != nil {
		return x.HousingClass
	}
	return nil
}

func (x *CottageRead) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CottageRead) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CottageRead) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *CottageRead) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *CottageRead) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *CottageRead) GetTerritory() string {
	if x != nil {
		return x.Territory
	}
	return ""
}

func (x *CottageRead) GetCeilingHeightMin() float64 {
	if x != nil {
		return x.CeilingHeightMin
	}
	return 0
}

func (x *CottageRead) GetCeilingHeightMax() float64 {
	if x != nil {
		return x.CeilingHeightMax
	}
	return 0
}

func (x *CottageRead) GetBuildingArea() float64 {
	if x != nil {
		return x.BuildingArea
	}
	return 0
}

func (x *CottageRead) GetAreaMin() float64 {
	if x != nil {
		return x.AreaMin
	}
	return 0
}

func (x *CottageRead) GetAreaMax() float64 {
	if x != nil {
		return x.AreaMax
	}
	return 0
}

func (x *CottageRead) GetHouseAmount() int64 {
	if x != nil {
		return x.HouseAmount
	}
	return 0
}

func (x *CottageRead) GetFloorsCount() int64 {
	if x != nil {
		return x.FloorsCount
	}
	return 0
}

func (x *CottageRead) GetFacade() string {
	if x != nil {
		return x.Facade
	}
	return ""
}

func (x *CottageRead) GetCanReplan() bool {
	if x != nil {
		return x.CanReplan
	}
	return false
}

func (x *CottageRead) GetRoomsMin() int64 {
	if x != nil {
		return x.RoomsMin
	}
	return 0
}

func (x *CottageRead) GetRoomsMax() int64 {
	if x != nil {
		return x.RoomsMax
	}
	return 0
}

func (x *CottageRead) GetPricePerSquareMin() float64 {
	if x != nil {
		return x.PricePerSquareMin
	}
	return 0
}

func (x *CottageRead) GetPricePerSquareMax() float64 {
	if x != nil {
		return x.PricePerSquareMax
	}
	return 0
}

func (x *CottageRead) GetWindowTypes() []*WindowTypeRead {
	if x != nil {
		return x.WindowTypes
	}
	return nil
}

func (x *CottageRead) GetHousePlans() []*HousePlanRead {
	if x != nil {
		return x.HousePlans
	}
	return nil
}

func (x *CottageRead) GetWallTypes() []*WallTypeRead {
	if x != nil {
		return x.WallTypes
	}
	return nil
}

func (x *CottageRead) GetElevatorTypes() []*ElevatorTypeRead {
	if x != nil {
		return x.ElevatorTypes
	}
	return nil
}

func (x *CottageRead) GetWarmingTypes() []*WarmingTypeRead {
	if x != nil {
		return x.WarmingTypes
	}
	return nil
}

func (x *CottageRead) GetInteriorDecorations() []*InteriorDecorationRead {
	if x != nil {
		return x.InteriorDecorations
	}
	return nil
}

func (x *CottageRead) GetPurchaseMethods() []*PurchaseMethodRead {
	if x != nil {
		return x.PurchaseMethods
	}
	return nil
}

func (x *CottageRead) GetHeatingTypes() []*HeatingTypeRead {
	if x != nil {
		return x.HeatingTypes
	}
	return nil
}

func (x *CottageRead) GetParkingTypes() []*ParkingTypeRead {
	if x != nil {
		return x.ParkingTypes
	}
	return nil
}

func (x *CottageRead) GetImages() []string {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *CottageRead) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *CottageRead) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *CottageRead) GetDeletedAt() int64 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

func (x *CottageRead) GetBuilder() *BuilderRead {
	if x != nil {
		return x.Builder
	}
	return nil
}

func (x *CottageRead) GetCity() *City {
	if x != nil {
		return x.City
	}
	return nil
}

func (x *CottageRead) GetIsFavourite() bool {
	if x != nil {
		return x.IsFavourite
	}
	return false
}

func (x *CottageRead) GetSaleStatusId() int64 {
	if x != nil {
		return x.SaleStatusId
	}
	return 0
}

func (x *CottageRead) GetSaleStatus() *SaleStatusRead {
	if x != nil {
		return x.SaleStatus
	}
	return nil
}

type CottageSearchCriteria struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page               *PageRequest `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Sort               []*Sort      `protobuf:"bytes,2,rep,name=sort,proto3" json:"sort,omitempty"`
	Title              string       `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`                                                              // filter by title
	BuilderIds         []int64      `protobuf:"varint,4,rep,packed,name=builder_ids,json=builderIds,proto3" json:"builder_ids,omitempty"`                          // filter by builders
	CityId             int64        `protobuf:"varint,5,opt,name=city_id,json=cityId,proto3" json:"city_id,omitempty"`                                             // filter by city id
	DistrictId         int64        `protobuf:"varint,6,opt,name=district_id,json=districtId,proto3" json:"district_id,omitempty"`                                 // filter by district id
	RoomsMin           int64        `protobuf:"varint,7,opt,name=rooms_min,json=roomsMin,proto3" json:"rooms_min,omitempty"`                                       // filter by the amount of rooms
	RoomsMax           int64        `protobuf:"varint,8,opt,name=rooms_max,json=roomsMax,proto3" json:"rooms_max,omitempty"`                                       // filter by the amount of rooms
	CeilingHeightMin   float64      `protobuf:"fixed64,9,opt,name=ceiling_height_min,json=ceilingHeightMin,proto3" json:"ceiling_height_min,omitempty"`            // filter by ceiling height
	CeilingHeightMax   float64      `protobuf:"fixed64,10,opt,name=ceiling_height_max,json=ceilingHeightMax,proto3" json:"ceiling_height_max,omitempty"`           // filter by ceiling height
	HasHgf             bool         `protobuf:"varint,11,opt,name=has_hgf,json=hasHgf,proto3" json:"has_hgf,omitempty"`                                            // filter by has_hgf
	AreaMin            float64      `protobuf:"fixed64,12,opt,name=area_min,json=areaMin,proto3" json:"area_min,omitempty"`                                        // filter by area
	AreaMax            float64      `protobuf:"fixed64,13,opt,name=area_max,json=areaMax,proto3" json:"area_max,omitempty"`                                        // filter by area
	PriceMin           int64        `protobuf:"varint,14,opt,name=price_min,json=priceMin,proto3" json:"price_min,omitempty"`                                      // filter by price
	PriceMax           int64        `protobuf:"varint,15,opt,name=price_max,json=priceMax,proto3" json:"price_max,omitempty"`                                      // filter by price
	InteriorDecoration []int64      `protobuf:"varint,16,rep,packed,name=interior_decoration,json=interiorDecoration,proto3" json:"interior_decoration,omitempty"` // filter by interior decoration
	HeatingTypes       []int64      `protobuf:"varint,17,rep,packed,name=heating_types,json=heatingTypes,proto3" json:"heating_types,omitempty"`                   // filter by heating types
	PurchaseMethods    []int64      `protobuf:"varint,18,rep,packed,name=purchase_methods,json=purchaseMethods,proto3" json:"purchase_methods,omitempty"`          // filter by purchase methods
	ElevatorTypes      []int64      `protobuf:"varint,19,rep,packed,name=elevator_types,json=elevatorTypes,proto3" json:"elevator_types,omitempty"`                // filter by elevator types
	WarmingTypes       []int64      `protobuf:"varint,20,rep,packed,name=warming_types,json=warmingTypes,proto3" json:"warming_types,omitempty"`                   // filter by warming types
	WindowTypes        []int64      `protobuf:"varint,21,rep,packed,name=window_types,json=windowTypes,proto3" json:"window_types,omitempty"`                      // filter by window types
	WallTypes          []int64      `protobuf:"varint,22,rep,packed,name=wall_types,json=wallTypes,proto3" json:"wall_types,omitempty"`                            // filter by wall types
	ParkingTypes       []int64      `protobuf:"varint,23,rep,packed,name=parking_types,json=parkingTypes,proto3" json:"parking_types,omitempty"`
	FloorsMin          int64        `protobuf:"varint,24,opt,name=floors_min,json=floorsMin,proto3" json:"floors_min,omitempty"`          // filter by floors
	FloorsMax          int64        `protobuf:"varint,25,opt,name=floors_max,json=floorsMax,proto3" json:"floors_max,omitempty"`          // filter by floors
	UserId             int64        `protobuf:"varint,26,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                   // filter favourites
	StatusId           int64        `protobuf:"varint,27,opt,name=status_id,json=statusId,proto3" json:"status_id,omitempty"`             // filter by status
	HousingClass       int64        `protobuf:"varint,28,opt,name=housing_class,json=housingClass,proto3" json:"housing_class,omitempty"` // filter by housing class
	HouseAmount        int64        `protobuf:"varint,29,opt,name=house_amount,json=houseAmount,proto3" json:"house_amount,omitempty"`    // filter by amount of houses in the cottage city
}

func (x *CottageSearchCriteria) Reset() {
	*x = CottageSearchCriteria{}
	if protoimpl.UnsafeEnabled {
		mi := &file_residenceserviceapi_cottage_model_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CottageSearchCriteria) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CottageSearchCriteria) ProtoMessage() {}

func (x *CottageSearchCriteria) ProtoReflect() protoreflect.Message {
	mi := &file_residenceserviceapi_cottage_model_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CottageSearchCriteria.ProtoReflect.Descriptor instead.
func (*CottageSearchCriteria) Descriptor() ([]byte, []int) {
	return file_residenceserviceapi_cottage_model_proto_rawDescGZIP(), []int{2}
}

func (x *CottageSearchCriteria) GetPage() *PageRequest {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *CottageSearchCriteria) GetSort() []*Sort {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *CottageSearchCriteria) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CottageSearchCriteria) GetBuilderIds() []int64 {
	if x != nil {
		return x.BuilderIds
	}
	return nil
}

func (x *CottageSearchCriteria) GetCityId() int64 {
	if x != nil {
		return x.CityId
	}
	return 0
}

func (x *CottageSearchCriteria) GetDistrictId() int64 {
	if x != nil {
		return x.DistrictId
	}
	return 0
}

func (x *CottageSearchCriteria) GetRoomsMin() int64 {
	if x != nil {
		return x.RoomsMin
	}
	return 0
}

func (x *CottageSearchCriteria) GetRoomsMax() int64 {
	if x != nil {
		return x.RoomsMax
	}
	return 0
}

func (x *CottageSearchCriteria) GetCeilingHeightMin() float64 {
	if x != nil {
		return x.CeilingHeightMin
	}
	return 0
}

func (x *CottageSearchCriteria) GetCeilingHeightMax() float64 {
	if x != nil {
		return x.CeilingHeightMax
	}
	return 0
}

func (x *CottageSearchCriteria) GetHasHgf() bool {
	if x != nil {
		return x.HasHgf
	}
	return false
}

func (x *CottageSearchCriteria) GetAreaMin() float64 {
	if x != nil {
		return x.AreaMin
	}
	return 0
}

func (x *CottageSearchCriteria) GetAreaMax() float64 {
	if x != nil {
		return x.AreaMax
	}
	return 0
}

func (x *CottageSearchCriteria) GetPriceMin() int64 {
	if x != nil {
		return x.PriceMin
	}
	return 0
}

func (x *CottageSearchCriteria) GetPriceMax() int64 {
	if x != nil {
		return x.PriceMax
	}
	return 0
}

func (x *CottageSearchCriteria) GetInteriorDecoration() []int64 {
	if x != nil {
		return x.InteriorDecoration
	}
	return nil
}

func (x *CottageSearchCriteria) GetHeatingTypes() []int64 {
	if x != nil {
		return x.HeatingTypes
	}
	return nil
}

func (x *CottageSearchCriteria) GetPurchaseMethods() []int64 {
	if x != nil {
		return x.PurchaseMethods
	}
	return nil
}

func (x *CottageSearchCriteria) GetElevatorTypes() []int64 {
	if x != nil {
		return x.ElevatorTypes
	}
	return nil
}

func (x *CottageSearchCriteria) GetWarmingTypes() []int64 {
	if x != nil {
		return x.WarmingTypes
	}
	return nil
}

func (x *CottageSearchCriteria) GetWindowTypes() []int64 {
	if x != nil {
		return x.WindowTypes
	}
	return nil
}

func (x *CottageSearchCriteria) GetWallTypes() []int64 {
	if x != nil {
		return x.WallTypes
	}
	return nil
}

func (x *CottageSearchCriteria) GetParkingTypes() []int64 {
	if x != nil {
		return x.ParkingTypes
	}
	return nil
}

func (x *CottageSearchCriteria) GetFloorsMin() int64 {
	if x != nil {
		return x.FloorsMin
	}
	return 0
}

func (x *CottageSearchCriteria) GetFloorsMax() int64 {
	if x != nil {
		return x.FloorsMax
	}
	return 0
}

func (x *CottageSearchCriteria) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CottageSearchCriteria) GetStatusId() int64 {
	if x != nil {
		return x.StatusId
	}
	return 0
}

func (x *CottageSearchCriteria) GetHousingClass() int64 {
	if x != nil {
		return x.HousingClass
	}
	return 0
}

func (x *CottageSearchCriteria) GetHouseAmount() int64 {
	if x != nil {
		return x.HouseAmount
	}
	return 0
}

type HousePlanWrite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// cottage_id is an id of the cottage
	CottageId int64 `protobuf:"varint,2,opt,name=cottage_id,json=cottageId,proto3" json:"cottage_id,omitempty"`
	// Title is just title information about the plan
	Title string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	// NumberOfRooms is number of rooms inside the plan
	NumberOfRooms int64 `protobuf:"varint,4,opt,name=number_of_rooms,json=numberOfRooms,proto3" json:"number_of_rooms,omitempty"`
	// Area is an area of the particular plan
	Area float64 `protobuf:"fixed64,5,opt,name=area,proto3" json:"area,omitempty"`
	// Longitude is a longitude of the cottage house
	Longitude float64 `protobuf:"fixed64,6,opt,name=longitude,proto3" json:"longitude,omitempty"`
	// Territory is an id of the cottage
	Territory float64 `protobuf:"fixed64,7,opt,name=territory,proto3" json:"territory,omitempty"`
	// CeilingHeight is the height of the ceiling of the cottage
	CeilingHeight float64 `protobuf:"fixed64,8,opt,name=ceiling_height,json=ceilingHeight,proto3" json:"ceiling_height,omitempty"`
	// Price is a price of the cottage_plan
	Price int64 `protobuf:"varint,9,opt,name=price,proto3" json:"price,omitempty"`
	// PricePerSquare is a price per square calculated by price/area of the cottage_plan
	PricePerSquare float64 `protobuf:"fixed64,10,opt,name=price_per_square,json=pricePerSquare,proto3" json:"price_per_square,omitempty"`
	// PlanImages is images of the plan(schemes)
	PlanImages []string `protobuf:"bytes,11,rep,name=plan_images,json=planImages,proto3" json:"plan_images,omitempty"`
	// HouseImages is images of the cottage itself
	HouseImages []string `protobuf:"bytes,12,rep,name=house_images,json=houseImages,proto3" json:"house_images,omitempty"`
	// Housing class id is id of the cottage's house type(elite or whatever)
	HousingClassId int64 `protobuf:"varint,13,opt,name=housing_class_id,json=housingClassId,proto3" json:"housing_class_id,omitempty"`
}

func (x *HousePlanWrite) Reset() {
	*x = HousePlanWrite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_residenceserviceapi_cottage_model_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HousePlanWrite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HousePlanWrite) ProtoMessage() {}

func (x *HousePlanWrite) ProtoReflect() protoreflect.Message {
	mi := &file_residenceserviceapi_cottage_model_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HousePlanWrite.ProtoReflect.Descriptor instead.
func (*HousePlanWrite) Descriptor() ([]byte, []int) {
	return file_residenceserviceapi_cottage_model_proto_rawDescGZIP(), []int{3}
}

func (x *HousePlanWrite) GetCottageId() int64 {
	if x != nil {
		return x.CottageId
	}
	return 0
}

func (x *HousePlanWrite) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *HousePlanWrite) GetNumberOfRooms() int64 {
	if x != nil {
		return x.NumberOfRooms
	}
	return 0
}

func (x *HousePlanWrite) GetArea() float64 {
	if x != nil {
		return x.Area
	}
	return 0
}

func (x *HousePlanWrite) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *HousePlanWrite) GetTerritory() float64 {
	if x != nil {
		return x.Territory
	}
	return 0
}

func (x *HousePlanWrite) GetCeilingHeight() float64 {
	if x != nil {
		return x.CeilingHeight
	}
	return 0
}

func (x *HousePlanWrite) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *HousePlanWrite) GetPricePerSquare() float64 {
	if x != nil {
		return x.PricePerSquare
	}
	return 0
}

func (x *HousePlanWrite) GetPlanImages() []string {
	if x != nil {
		return x.PlanImages
	}
	return nil
}

func (x *HousePlanWrite) GetHouseImages() []string {
	if x != nil {
		return x.HouseImages
	}
	return nil
}

func (x *HousePlanWrite) GetHousingClassId() int64 {
	if x != nil {
		return x.HousingClassId
	}
	return 0
}

// CottagePlanRead is for sending the data to the API service
type HousePlanRead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is an id of the cottage
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// CottageId is an id of the cottage
	CottageId int64 `protobuf:"varint,2,opt,name=cottage_id,json=cottageId,proto3" json:"cottage_id,omitempty"`
	// Title is just title information about the plan
	Title string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	// NumberOfRooms is number of rooms inside the plan
	NumberOfRooms int64 `protobuf:"varint,4,opt,name=number_of_rooms,json=numberOfRooms,proto3" json:"number_of_rooms,omitempty"`
	// Area is an area of the particular plan
	Area float64 `protobuf:"fixed64,5,opt,name=area,proto3" json:"area,omitempty"`
	// Longitude is a longitude of the cottage house
	Longitude float64 `protobuf:"fixed64,6,opt,name=longitude,proto3" json:"longitude,omitempty"`
	// Territory is an id of the cottage
	Territory float64 `protobuf:"fixed64,7,opt,name=territory,proto3" json:"territory,omitempty"`
	// CeilingHeight is the height of the ceiling of the cottage
	CeilingHeight float64 `protobuf:"fixed64,8,opt,name=ceiling_height,json=ceilingHeight,proto3" json:"ceiling_height,omitempty"`
	// Price is a price of the cottage_plan
	Price int64 `protobuf:"varint,9,opt,name=price,proto3" json:"price,omitempty"`
	// PricePerSquare is a price per square calculated by price/area of the cottage_plan
	PricePerSquare float64 `protobuf:"fixed64,10,opt,name=price_per_square,json=pricePerSquare,proto3" json:"price_per_square,omitempty"`
	// PlanImages is images of the plan(schemes)
	PlanImages []string `protobuf:"bytes,11,rep,name=plan_images,json=planImages,proto3" json:"plan_images,omitempty"`
	// HouseImages is images of the cottage itself
	HouseImages []string `protobuf:"bytes,12,rep,name=house_images,json=houseImages,proto3" json:"house_images,omitempty"`
	// HousingClassID is id of the cottage's house Class(elite or whatever)
	HousingClassId int64 `protobuf:"varint,13,opt,name=housing_class_id,json=housingClassId,proto3" json:"housing_class_id,omitempty"`
	// CreatedAt - created time.
	CreatedAt int64 `protobuf:"varint,14,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// UpdatedAt - updated time.
	UpdatedAt int64 `protobuf:"varint,15,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// DeletedAt - deleted timestamp.
	DeletedAt int64 `protobuf:"varint,16,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
}

func (x *HousePlanRead) Reset() {
	*x = HousePlanRead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_residenceserviceapi_cottage_model_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HousePlanRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HousePlanRead) ProtoMessage() {}

func (x *HousePlanRead) ProtoReflect() protoreflect.Message {
	mi := &file_residenceserviceapi_cottage_model_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HousePlanRead.ProtoReflect.Descriptor instead.
func (*HousePlanRead) Descriptor() ([]byte, []int) {
	return file_residenceserviceapi_cottage_model_proto_rawDescGZIP(), []int{4}
}

func (x *HousePlanRead) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *HousePlanRead) GetCottageId() int64 {
	if x != nil {
		return x.CottageId
	}
	return 0
}

func (x *HousePlanRead) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *HousePlanRead) GetNumberOfRooms() int64 {
	if x != nil {
		return x.NumberOfRooms
	}
	return 0
}

func (x *HousePlanRead) GetArea() float64 {
	if x != nil {
		return x.Area
	}
	return 0
}

func (x *HousePlanRead) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *HousePlanRead) GetTerritory() float64 {
	if x != nil {
		return x.Territory
	}
	return 0
}

func (x *HousePlanRead) GetCeilingHeight() float64 {
	if x != nil {
		return x.CeilingHeight
	}
	return 0
}

func (x *HousePlanRead) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *HousePlanRead) GetPricePerSquare() float64 {
	if x != nil {
		return x.PricePerSquare
	}
	return 0
}

func (x *HousePlanRead) GetPlanImages() []string {
	if x != nil {
		return x.PlanImages
	}
	return nil
}

func (x *HousePlanRead) GetHouseImages() []string {
	if x != nil {
		return x.HouseImages
	}
	return nil
}

func (x *HousePlanRead) GetHousingClassId() int64 {
	if x != nil {
		return x.HousingClassId
	}
	return 0
}

func (x *HousePlanRead) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *HousePlanRead) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *HousePlanRead) GetDeletedAt() int64 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

var File_residenceserviceapi_cottage_model_proto protoreflect.FileDescriptor

var file_residenceserviceapi_cottage_model_proto_rawDesc = []byte{
	0x0a, 0x27, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x74, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x36, 0x67, 0x69, 0x74, 0x6c, 0x61,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x2e, 0x72, 0x65,
	0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76,
	0x31, 0x1a, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x61, 0x70, 0x69, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xff,
	0x09, 0x0a, 0x0c, 0x43, 0x6f, 0x74, 0x74, 0x61, 0x67, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x10, 0x68, 0x6f, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x68, 0x6f, 0x75, 0x73, 0x69,
	0x6e, 0x67, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c,
	0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x65, 0x72, 0x72, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x72, 0x72, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x65, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x10, 0x63, 0x65, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x69,
	0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x65, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x63,
	0x65, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x78, 0x12,
	0x23, 0x0a, 0x0d, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x72, 0x65, 0x61,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67,
	0x41, 0x72, 0x65, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x6d, 0x69, 0x6e,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x61, 0x72, 0x65, 0x61, 0x4d, 0x69, 0x6e, 0x12,
	0x19, 0x0a, 0x08, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x07, 0x61, 0x72, 0x65, 0x61, 0x4d, 0x61, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x63, 0x61, 0x64, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x66, 0x61, 0x63, 0x61, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x5f,
	0x72, 0x65, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x61,
	0x6e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x73,
	0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d,
	0x73, 0x4d, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x5f, 0x6d, 0x61,
	0x78, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x4d, 0x61,
	0x78, 0x12, 0x2f, 0x0a, 0x14, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73,
	0x71, 0x75, 0x61, 0x72, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x11, 0x70, 0x72, 0x69, 0x63, 0x65, 0x50, 0x65, 0x72, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x4d,
	0x69, 0x6e, 0x12, 0x2f, 0x0a, 0x14, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f,
	0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x11, 0x70, 0x72, 0x69, 0x63, 0x65, 0x50, 0x65, 0x72, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65,
	0x4d, 0x61, 0x78, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x67, 0x0a, 0x0b, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e,
	0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75,
	0x72, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x0a, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18,
	0x1b, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0d, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x74,
	0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x61, 0x72, 0x6d, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c,
	0x77, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x1e, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x0b, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x31, 0x0a, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x63, 0x6f,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x03, 0x52, 0x13, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x72, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x20, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0f, 0x70, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x68, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x21,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x68, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x22, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x61,
	0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x73, 0x61, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64,
	0x22, 0xa2, 0x14, 0x0a, 0x0b, 0x43, 0x6f, 0x74, 0x74, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x64,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x12,
	0x5a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x42, 0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x72,
	0x63, 0x75, 0x72, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x61, 0x64, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x49, 0x64, 0x12, 0x60, 0x0a, 0x08,
	0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44,
	0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x72, 0x63,
	0x75, 0x72, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x52, 0x65, 0x61, 0x64, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x12, 0x28,
	0x0a, 0x10, 0x68, 0x6f, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x68, 0x6f, 0x75, 0x73, 0x69, 0x6e,
	0x67, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x12, 0x6b, 0x0a, 0x0d, 0x68, 0x6f, 0x75, 0x73,
	0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x46, 0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x72,
	0x63, 0x75, 0x72, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x52, 0x65, 0x61, 0x64, 0x52, 0x0c, 0x68, 0x6f, 0x75, 0x73, 0x69, 0x6e, 0x67,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x65, 0x72, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x72, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x2c, 0x0a, 0x12, 0x63, 0x65, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x63, 0x65, 0x69,
	0x6c, 0x69, 0x6e, 0x67, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x69, 0x6e, 0x12, 0x2c, 0x0a,
	0x12, 0x63, 0x65, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f,
	0x6d, 0x61, 0x78, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x63, 0x65, 0x69, 0x6c, 0x69,
	0x6e, 0x67, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x78, 0x12, 0x23, 0x0a, 0x0d, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0c, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x65, 0x61,
	0x12, 0x19, 0x0a, 0x08, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x07, 0x61, 0x72, 0x65, 0x61, 0x4d, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x61,
	0x72, 0x65, 0x61, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x61,
	0x72, 0x65, 0x61, 0x4d, 0x61, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6c, 0x6f,
	0x6f, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x61, 0x63, 0x61, 0x64, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x61,
	0x63, 0x61, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6c,
	0x61, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x70,
	0x6c, 0x61, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x5f, 0x6d, 0x69, 0x6e,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x4d, 0x69, 0x6e,
	0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x4d, 0x61, 0x78, 0x12, 0x2f, 0x0a,
	0x14, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x71, 0x75, 0x61, 0x72,
	0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x50, 0x65, 0x72, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x4d, 0x69, 0x6e, 0x12, 0x2f,
	0x0a, 0x14, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x71, 0x75, 0x61,
	0x72, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x50, 0x65, 0x72, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x4d, 0x61, 0x78, 0x12,
	0x69, 0x0a, 0x0c, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18,
	0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x57,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x61, 0x64, 0x52, 0x0b, 0x77,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x66, 0x0a, 0x0b, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x45, 0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x72,
	0x63, 0x75, 0x72, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x50, 0x6c,
	0x61, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x0a, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x50, 0x6c, 0x61,
	0x6e, 0x73, 0x12, 0x63, 0x0a, 0x0a, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x69,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x57, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x61, 0x64, 0x52, 0x09, 0x77, 0x61,
	0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x6f, 0x0a, 0x0e, 0x65, 0x6c, 0x65, 0x76, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x48, 0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x72,
	0x63, 0x75, 0x72, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6c, 0x65, 0x76, 0x61, 0x74, 0x6f,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x61, 0x64, 0x52, 0x0d, 0x65, 0x6c, 0x65, 0x76, 0x61,
	0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x6c, 0x0a, 0x0d, 0x77, 0x61, 0x72, 0x6d,
	0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x47, 0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x72,
	0x63, 0x75, 0x72, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x61, 0x64, 0x52, 0x0c, 0x77, 0x61, 0x72, 0x6d, 0x69, 0x6e,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x81, 0x01, 0x0a, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x69, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x72, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x72, 0x44,
	0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x75, 0x0a, 0x10, 0x70, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x23,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x65, 0x61, 0x64,
	0x52, 0x0f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x73, 0x12, 0x6c, 0x0a, 0x0d, 0x68, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x18, 0x24, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x2e, 0x72, 0x65,
	0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x48, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x61,
	0x64, 0x52, 0x0c, 0x68, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x6c, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x18, 0x25, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x69,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x61, 0x64, 0x52,
	0x0c, 0x70, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x26, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x27, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x5d, 0x0a, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x2a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65,
	0x72, 0x12, 0x50, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3c, 0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x72,
	0x63, 0x75, 0x72, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x52, 0x04, 0x63,
	0x69, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x75, 0x72,
	0x69, 0x74, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x46, 0x61, 0x76,
	0x6f, 0x75, 0x72, 0x69, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x73, 0x61, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x67, 0x0a, 0x0b,
	0x73, 0x61, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x2e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x46, 0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d,
	0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x61, 0x6c, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x61, 0x64, 0x52, 0x0a, 0x73, 0x61, 0x6c, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xc2, 0x08, 0x0a, 0x15, 0x43, 0x6f, 0x74, 0x74, 0x61, 0x67,
	0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x12,
	0x57, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e,
	0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75,
	0x72, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x50, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x69,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x73, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x6f, 0x6f, 0x6d, 0x73, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x4d, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d,
	0x73, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x6f, 0x6f,
	0x6d, 0x73, 0x4d, 0x61, 0x78, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x65, 0x69, 0x6c, 0x69, 0x6e, 0x67,
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x10, 0x63, 0x65, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x4d, 0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x65, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x10, 0x63, 0x65, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61,
	0x78, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x5f, 0x68, 0x67, 0x66, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x68, 0x61, 0x73, 0x48, 0x67, 0x66, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x72,
	0x65, 0x61, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x61, 0x72,
	0x65, 0x61, 0x4d, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x6d, 0x61,
	0x78, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x61, 0x72, 0x65, 0x61, 0x4d, 0x61, 0x78,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x69, 0x6e, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x70, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x2f, 0x0a, 0x13, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x69, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x10, 0x20, 0x03, 0x28, 0x03, 0x52, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x6f,
	0x72, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x68,
	0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x11, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x0c, 0x68, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x29, 0x0a, 0x10, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0f, 0x70, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x65,
	0x6c, 0x65, 0x76, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x13, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x0d, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x77, 0x61, 0x72, 0x6d, 0x69,
	0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x77,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x61,
	0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09,
	0x77, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x0c, 0x70, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x73, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x73, 0x4d, 0x69, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x73, 0x4d, 0x61, 0x78, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x69, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x6f, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x68, 0x6f, 0x75, 0x73, 0x69,
	0x6e, 0x67, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x92, 0x03, 0x0a, 0x0e, 0x48,
	0x6f, 0x75, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6f, 0x74, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x63, 0x6f, 0x74, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f,
	0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x4f, 0x66, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72,
	0x65, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x61, 0x72, 0x65, 0x61, 0x12, 0x1c,
	0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x65, 0x72, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x74, 0x65, 0x72, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x65,
	0x69, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0d, 0x63, 0x65, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x48, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x63, 0x65, 0x50, 0x65, 0x72, 0x53, 0x71, 0x75, 0x61, 0x72,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x68, 0x6f, 0x75, 0x73, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x68, 0x6f, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x22,
	0xfe, 0x03, 0x0a, 0x0d, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x61,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x74, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x74, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x61, 0x72, 0x65, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x61, 0x72,
	0x65, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x65, 0x72, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x65, 0x72, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x25,
	0x0a, 0x0e, 0x63, 0x65, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x63, 0x65, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x63, 0x65, 0x50, 0x65, 0x72, 0x53,
	0x71, 0x75, 0x61, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x6e,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x68, 0x6f, 0x75,
	0x73, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x68, 0x6f, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x42, 0x2b, 0x5a, 0x29, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d,
	0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x2f, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_residenceserviceapi_cottage_model_proto_rawDescOnce sync.Once
	file_residenceserviceapi_cottage_model_proto_rawDescData = file_residenceserviceapi_cottage_model_proto_rawDesc
)

func file_residenceserviceapi_cottage_model_proto_rawDescGZIP() []byte {
	file_residenceserviceapi_cottage_model_proto_rawDescOnce.Do(func() {
		file_residenceserviceapi_cottage_model_proto_rawDescData = protoimpl.X.CompressGZIP(file_residenceserviceapi_cottage_model_proto_rawDescData)
	})
	return file_residenceserviceapi_cottage_model_proto_rawDescData
}

var file_residenceserviceapi_cottage_model_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_residenceserviceapi_cottage_model_proto_goTypes = []interface{}{
	(*CottageWrite)(nil),           // 0: gitlab.com.mercury.residenceservice.generated.model.v1.CottageWrite
	(*CottageRead)(nil),            // 1: gitlab.com.mercury.residenceservice.generated.model.v1.CottageRead
	(*CottageSearchCriteria)(nil),  // 2: gitlab.com.mercury.residenceservice.generated.model.v1.CottageSearchCriteria
	(*HousePlanWrite)(nil),         // 3: gitlab.com.mercury.residenceservice.generated.model.v1.HousePlanWrite
	(*HousePlanRead)(nil),          // 4: gitlab.com.mercury.residenceservice.generated.model.v1.HousePlanRead
	(*StatusRead)(nil),             // 5: gitlab.com.mercury.residenceservice.generated.model.v1.StatusRead
	(*DistrictRead)(nil),           // 6: gitlab.com.mercury.residenceservice.generated.model.v1.DistrictRead
	(*HouseClassRead)(nil),         // 7: gitlab.com.mercury.residenceservice.generated.model.v1.HouseClassRead
	(*WindowTypeRead)(nil),         // 8: gitlab.com.mercury.residenceservice.generated.model.v1.WindowTypeRead
	(*WallTypeRead)(nil),           // 9: gitlab.com.mercury.residenceservice.generated.model.v1.WallTypeRead
	(*ElevatorTypeRead)(nil),       // 10: gitlab.com.mercury.residenceservice.generated.model.v1.ElevatorTypeRead
	(*WarmingTypeRead)(nil),        // 11: gitlab.com.mercury.residenceservice.generated.model.v1.WarmingTypeRead
	(*InteriorDecorationRead)(nil), // 12: gitlab.com.mercury.residenceservice.generated.model.v1.InteriorDecorationRead
	(*PurchaseMethodRead)(nil),     // 13: gitlab.com.mercury.residenceservice.generated.model.v1.PurchaseMethodRead
	(*HeatingTypeRead)(nil),        // 14: gitlab.com.mercury.residenceservice.generated.model.v1.HeatingTypeRead
	(*ParkingTypeRead)(nil),        // 15: gitlab.com.mercury.residenceservice.generated.model.v1.ParkingTypeRead
	(*BuilderRead)(nil),            // 16: gitlab.com.mercury.residenceservice.generated.model.v1.BuilderRead
	(*City)(nil),                   // 17: gitlab.com.mercury.residenceservice.generated.model.v1.City
	(*SaleStatusRead)(nil),         // 18: gitlab.com.mercury.residenceservice.generated.model.v1.SaleStatusRead
	(*PageRequest)(nil),            // 19: gitlab.com.mercury.residenceservice.generated.model.v1.PageRequest
	(*Sort)(nil),                   // 20: gitlab.com.mercury.residenceservice.generated.model.v1.Sort
}
var file_residenceserviceapi_cottage_model_proto_depIdxs = []int32{
	3,  // 0: gitlab.com.mercury.residenceservice.generated.model.v1.CottageWrite.house_plans:type_name -> gitlab.com.mercury.residenceservice.generated.model.v1.HousePlanWrite
	5,  // 1: gitlab.com.mercury.residenceservice.generated.model.v1.CottageRead.status:type_name -> gitlab.com.mercury.residenceservice.generated.model.v1.StatusRead
	6,  // 2: gitlab.com.mercury.residenceservice.generated.model.v1.CottageRead.district:type_name -> gitlab.com.mercury.residenceservice.generated.model.v1.DistrictRead
	7,  // 3: gitlab.com.mercury.residenceservice.generated.model.v1.CottageRead.housing_class:type_name -> gitlab.com.mercury.residenceservice.generated.model.v1.HouseClassRead
	8,  // 4: gitlab.com.mercury.residenceservice.generated.model.v1.CottageRead.window_types:type_name -> gitlab.com.mercury.residenceservice.generated.model.v1.WindowTypeRead
	4,  // 5: gitlab.com.mercury.residenceservice.generated.model.v1.CottageRead.house_plans:type_name -> gitlab.com.mercury.residenceservice.generated.model.v1.HousePlanRead
	9,  // 6: gitlab.com.mercury.residenceservice.generated.model.v1.CottageRead.wall_types:type_name -> gitlab.com.mercury.residenceservice.generated.model.v1.WallTypeRead
	10, // 7: gitlab.com.mercury.residenceservice.generated.model.v1.CottageRead.elevator_types:type_name -> gitlab.com.mercury.residenceservice.generated.model.v1.ElevatorTypeRead
	11, // 8: gitlab.com.mercury.residenceservice.generated.model.v1.CottageRead.warming_types:type_name -> gitlab.com.mercury.residenceservice.generated.model.v1.WarmingTypeRead
	12, // 9: gitlab.com.mercury.residenceservice.generated.model.v1.CottageRead.interior_decorations:type_name -> gitlab.com.mercury.residenceservice.generated.model.v1.InteriorDecorationRead
	13, // 10: gitlab.com.mercury.residenceservice.generated.model.v1.CottageRead.purchase_methods:type_name -> gitlab.com.mercury.residenceservice.generated.model.v1.PurchaseMethodRead
	14, // 11: gitlab.com.mercury.residenceservice.generated.model.v1.CottageRead.heating_types:type_name -> gitlab.com.mercury.residenceservice.generated.model.v1.HeatingTypeRead
	15, // 12: gitlab.com.mercury.residenceservice.generated.model.v1.CottageRead.parking_types:type_name -> gitlab.com.mercury.residenceservice.generated.model.v1.ParkingTypeRead
	16, // 13: gitlab.com.mercury.residenceservice.generated.model.v1.CottageRead.builder:type_name -> gitlab.com.mercury.residenceservice.generated.model.v1.BuilderRead
	17, // 14: gitlab.com.mercury.residenceservice.generated.model.v1.CottageRead.city:type_name -> gitlab.com.mercury.residenceservice.generated.model.v1.City
	18, // 15: gitlab.com.mercury.residenceservice.generated.model.v1.CottageRead.sale_status:type_name -> gitlab.com.mercury.residenceservice.generated.model.v1.SaleStatusRead
	19, // 16: gitlab.com.mercury.residenceservice.generated.model.v1.CottageSearchCriteria.page:type_name -> gitlab.com.mercury.residenceservice.generated.model.v1.PageRequest
	20, // 17: gitlab.com.mercury.residenceservice.generated.model.v1.CottageSearchCriteria.sort:type_name -> gitlab.com.mercury.residenceservice.generated.model.v1.Sort
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_residenceserviceapi_cottage_model_proto_init() }
func file_residenceserviceapi_cottage_model_proto_init() {
	if File_residenceserviceapi_cottage_model_proto != nil {
		return
	}
	file_common_model_proto_init()
	file_residenceserviceapi_builder_model_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_residenceserviceapi_cottage_model_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CottageWrite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_residenceserviceapi_cottage_model_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CottageRead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_residenceserviceapi_cottage_model_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CottageSearchCriteria); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_residenceserviceapi_cottage_model_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HousePlanWrite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_residenceserviceapi_cottage_model_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HousePlanRead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_residenceserviceapi_cottage_model_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_residenceserviceapi_cottage_model_proto_goTypes,
		DependencyIndexes: file_residenceserviceapi_cottage_model_proto_depIdxs,
		MessageInfos:      file_residenceserviceapi_cottage_model_proto_msgTypes,
	}.Build()
	File_residenceserviceapi_cottage_model_proto = out.File
	file_residenceserviceapi_cottage_model_proto_rawDesc = nil
	file_residenceserviceapi_cottage_model_proto_goTypes = nil
	file_residenceserviceapi_cottage_model_proto_depIdxs = nil
}
