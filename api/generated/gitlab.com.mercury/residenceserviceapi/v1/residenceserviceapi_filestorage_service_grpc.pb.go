// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: residenceserviceapi_filestorage_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileStorageServiceClient is the client API for FileStorageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileStorageServiceClient interface {
	// *
	// Uploads file to the storage.
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (FileStorageService_UploadFileClient, error)
	// *
	// Checks if file exist in the storage.
	IsFileExist(ctx context.Context, in *IsFileExistRequest, opts ...grpc.CallOption) (*IsFileExistResponse, error)
}

type fileStorageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileStorageServiceClient(cc grpc.ClientConnInterface) FileStorageServiceClient {
	return &fileStorageServiceClient{cc}
}

func (c *fileStorageServiceClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (FileStorageService_UploadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileStorageService_ServiceDesc.Streams[0], "/gitlab.com.mercury.residenceservice.generated.model.v1.FileStorageService/UploadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileStorageServiceUploadFileClient{stream}
	return x, nil
}

type FileStorageService_UploadFileClient interface {
	Send(*UploadFileRequest) error
	CloseAndRecv() (*UploadFileResponse, error)
	grpc.ClientStream
}

type fileStorageServiceUploadFileClient struct {
	grpc.ClientStream
}

func (x *fileStorageServiceUploadFileClient) Send(m *UploadFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileStorageServiceUploadFileClient) CloseAndRecv() (*UploadFileResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileStorageServiceClient) IsFileExist(ctx context.Context, in *IsFileExistRequest, opts ...grpc.CallOption) (*IsFileExistResponse, error) {
	out := new(IsFileExistResponse)
	err := c.cc.Invoke(ctx, "/gitlab.com.mercury.residenceservice.generated.model.v1.FileStorageService/IsFileExist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileStorageServiceServer is the server API for FileStorageService service.
// All implementations should embed UnimplementedFileStorageServiceServer
// for forward compatibility
type FileStorageServiceServer interface {
	// *
	// Uploads file to the storage.
	UploadFile(FileStorageService_UploadFileServer) error
	// *
	// Checks if file exist in the storage.
	IsFileExist(context.Context, *IsFileExistRequest) (*IsFileExistResponse, error)
}

// UnimplementedFileStorageServiceServer should be embedded to have forward compatible implementations.
type UnimplementedFileStorageServiceServer struct {
}

func (UnimplementedFileStorageServiceServer) UploadFile(FileStorageService_UploadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedFileStorageServiceServer) IsFileExist(context.Context, *IsFileExistRequest) (*IsFileExistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsFileExist not implemented")
}

// UnsafeFileStorageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileStorageServiceServer will
// result in compilation errors.
type UnsafeFileStorageServiceServer interface {
	mustEmbedUnimplementedFileStorageServiceServer()
}

func RegisterFileStorageServiceServer(s grpc.ServiceRegistrar, srv FileStorageServiceServer) {
	s.RegisterService(&FileStorageService_ServiceDesc, srv)
}

func _FileStorageService_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileStorageServiceServer).UploadFile(&fileStorageServiceUploadFileServer{stream})
}

type FileStorageService_UploadFileServer interface {
	SendAndClose(*UploadFileResponse) error
	Recv() (*UploadFileRequest, error)
	grpc.ServerStream
}

type fileStorageServiceUploadFileServer struct {
	grpc.ServerStream
}

func (x *fileStorageServiceUploadFileServer) SendAndClose(m *UploadFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileStorageServiceUploadFileServer) Recv() (*UploadFileRequest, error) {
	m := new(UploadFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FileStorageService_IsFileExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsFileExistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileStorageServiceServer).IsFileExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitlab.com.mercury.residenceservice.generated.model.v1.FileStorageService/IsFileExist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileStorageServiceServer).IsFileExist(ctx, req.(*IsFileExistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FileStorageService_ServiceDesc is the grpc.ServiceDesc for FileStorageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileStorageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gitlab.com.mercury.residenceservice.generated.model.v1.FileStorageService",
	HandlerType: (*FileStorageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsFileExist",
			Handler:    _FileStorageService_IsFileExist_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFile",
			Handler:       _FileStorageService_UploadFile_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "residenceserviceapi_filestorage_service.proto",
}
