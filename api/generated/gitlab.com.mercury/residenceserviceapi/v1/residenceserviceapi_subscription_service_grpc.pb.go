// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: residenceserviceapi_subscription_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SubscribersServiceClient is the client API for SubscribersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubscribersServiceClient interface {
	// *
	// Subscribe a builder.
	//
	// If the builder not exists, an error "builder does not exists" will be returned.
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeResponse, error)
	// *
	// Unsubscribe a builder.
	//
	// If the builder not exists, an error "builder does not exists" will be returned.
	Unsubscribe(ctx context.Context, in *UnsubscribeRequest, opts ...grpc.CallOption) (*UnsubscribeResponse, error)
	// *
	// List the builders.
	//
	// If the builder not exists, an error "builder does not exists" will be returned.
	ListSubscribedBuilders(ctx context.Context, in *ListSubscribedBuildersRequest, opts ...grpc.CallOption) (*ListSubscribedBuildersResponse, error)
}

type subscribersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSubscribersServiceClient(cc grpc.ClientConnInterface) SubscribersServiceClient {
	return &subscribersServiceClient{cc}
}

func (c *subscribersServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeResponse, error) {
	out := new(SubscribeResponse)
	err := c.cc.Invoke(ctx, "/gitlab.com.mercury.residenceservice.generated.model.v1.SubscribersService/Subscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscribersServiceClient) Unsubscribe(ctx context.Context, in *UnsubscribeRequest, opts ...grpc.CallOption) (*UnsubscribeResponse, error) {
	out := new(UnsubscribeResponse)
	err := c.cc.Invoke(ctx, "/gitlab.com.mercury.residenceservice.generated.model.v1.SubscribersService/Unsubscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscribersServiceClient) ListSubscribedBuilders(ctx context.Context, in *ListSubscribedBuildersRequest, opts ...grpc.CallOption) (*ListSubscribedBuildersResponse, error) {
	out := new(ListSubscribedBuildersResponse)
	err := c.cc.Invoke(ctx, "/gitlab.com.mercury.residenceservice.generated.model.v1.SubscribersService/ListSubscribedBuilders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubscribersServiceServer is the server API for SubscribersService service.
// All implementations should embed UnimplementedSubscribersServiceServer
// for forward compatibility
type SubscribersServiceServer interface {
	// *
	// Subscribe a builder.
	//
	// If the builder not exists, an error "builder does not exists" will be returned.
	Subscribe(context.Context, *SubscribeRequest) (*SubscribeResponse, error)
	// *
	// Unsubscribe a builder.
	//
	// If the builder not exists, an error "builder does not exists" will be returned.
	Unsubscribe(context.Context, *UnsubscribeRequest) (*UnsubscribeResponse, error)
	// *
	// List the builders.
	//
	// If the builder not exists, an error "builder does not exists" will be returned.
	ListSubscribedBuilders(context.Context, *ListSubscribedBuildersRequest) (*ListSubscribedBuildersResponse, error)
}

// UnimplementedSubscribersServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSubscribersServiceServer struct {
}

func (UnimplementedSubscribersServiceServer) Subscribe(context.Context, *SubscribeRequest) (*SubscribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedSubscribersServiceServer) Unsubscribe(context.Context, *UnsubscribeRequest) (*UnsubscribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unsubscribe not implemented")
}
func (UnimplementedSubscribersServiceServer) ListSubscribedBuilders(context.Context, *ListSubscribedBuildersRequest) (*ListSubscribedBuildersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubscribedBuilders not implemented")
}

// UnsafeSubscribersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubscribersServiceServer will
// result in compilation errors.
type UnsafeSubscribersServiceServer interface {
	mustEmbedUnimplementedSubscribersServiceServer()
}

func RegisterSubscribersServiceServer(s grpc.ServiceRegistrar, srv SubscribersServiceServer) {
	s.RegisterService(&SubscribersService_ServiceDesc, srv)
}

func _SubscribersService_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscribersServiceServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitlab.com.mercury.residenceservice.generated.model.v1.SubscribersService/Subscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscribersServiceServer).Subscribe(ctx, req.(*SubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscribersService_Unsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscribersServiceServer).Unsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitlab.com.mercury.residenceservice.generated.model.v1.SubscribersService/Unsubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscribersServiceServer).Unsubscribe(ctx, req.(*UnsubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscribersService_ListSubscribedBuilders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSubscribedBuildersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscribersServiceServer).ListSubscribedBuilders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitlab.com.mercury.residenceservice.generated.model.v1.SubscribersService/ListSubscribedBuilders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscribersServiceServer).ListSubscribedBuilders(ctx, req.(*ListSubscribedBuildersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SubscribersService_ServiceDesc is the grpc.ServiceDesc for SubscribersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubscribersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gitlab.com.mercury.residenceservice.generated.model.v1.SubscribersService",
	HandlerType: (*SubscribersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Subscribe",
			Handler:    _SubscribersService_Subscribe_Handler,
		},
		{
			MethodName: "Unsubscribe",
			Handler:    _SubscribersService_Unsubscribe_Handler,
		},
		{
			MethodName: "ListSubscribedBuilders",
			Handler:    _SubscribersService_ListSubscribedBuilders_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "residenceserviceapi_subscription_service.proto",
}
