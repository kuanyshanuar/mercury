// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: residenceserviceapi_residence_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ResidenceServiceClient is the client API for ResidenceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResidenceServiceClient interface {
	//*
	// Creates a new residence.
	// If the residence exists, an error "Already exists" will be returned.
	CreateResidence(ctx context.Context, in *CreateResidenceRequest, opts ...grpc.CallOption) (*CreateResidenceResponse, error)
	//*
	// Returns a list residence by criteria.
	// If the residence does not exist, an error "Not found" will be returned.
	ListResidences(ctx context.Context, in *ListResidencesRequest, opts ...grpc.CallOption) (*ListResidencesResponse, error)
	//*
	// Returns a residence by the provided id.
	// If the residence does not exist, an error "Not found" will be returned.
	GetResidence(ctx context.Context, in *GetResidenceRequest, opts ...grpc.CallOption) (*GetResidenceResponse, error)
	//*
	// Updates an existing residence by the provided id.
	// If the residence does not exist, an error "Not found" will be returned.
	UpdateResidence(ctx context.Context, in *UpdateResidenceRequest, opts ...grpc.CallOption) (*UpdateResidenceResponse, error)
	//*
	// Deletes an existing residence.
	// If the residence does not exist, an error "Not found" will be returned.
	DeleteResidence(ctx context.Context, in *DeleteResidenceRequest, opts ...grpc.CallOption) (*DeleteResidenceResponse, error)
	//*
	// Returns a list of residences by ids.
	ListResidencesByIDs(ctx context.Context, in *ListResidencesByIDsRequest, opts ...grpc.CallOption) (*ListResidencesByIDsResponse, error)
	//*
	// Returns a list residence by criteria.
	// If the residence does not exist, an error "Not found" will be returned.
	ListPopularResidences(ctx context.Context, in *ListPopularResidencesRequest, opts ...grpc.CallOption) (*ListPopularResidencesResponse, error)
	//*
	// Creates a new flat plan.
	CreateFlatPlan(ctx context.Context, in *CreateFlatPlanRequest, opts ...grpc.CallOption) (*CreateFlatPlanResponse, error)
	//*
	// Updates a flat plan.
	UpdateFlatPlan(ctx context.Context, in *UpdateFlatPlanRequest, opts ...grpc.CallOption) (*UpdateFlatPlanResponse, error)
	//*
	// Deletes a flat plan.
	DeleteFlatPlan(ctx context.Context, in *DeleteFlatPlanRequest, opts ...grpc.CallOption) (*DeleteFlatPlanResponse, error)
}

type residenceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewResidenceServiceClient(cc grpc.ClientConnInterface) ResidenceServiceClient {
	return &residenceServiceClient{cc}
}

func (c *residenceServiceClient) CreateResidence(ctx context.Context, in *CreateResidenceRequest, opts ...grpc.CallOption) (*CreateResidenceResponse, error) {
	out := new(CreateResidenceResponse)
	err := c.cc.Invoke(ctx, "/gitlab.com.mercury.residenceservice.generated.model.v1.ResidenceService/CreateResidence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *residenceServiceClient) ListResidences(ctx context.Context, in *ListResidencesRequest, opts ...grpc.CallOption) (*ListResidencesResponse, error) {
	out := new(ListResidencesResponse)
	err := c.cc.Invoke(ctx, "/gitlab.com.mercury.residenceservice.generated.model.v1.ResidenceService/ListResidences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *residenceServiceClient) GetResidence(ctx context.Context, in *GetResidenceRequest, opts ...grpc.CallOption) (*GetResidenceResponse, error) {
	out := new(GetResidenceResponse)
	err := c.cc.Invoke(ctx, "/gitlab.com.mercury.residenceservice.generated.model.v1.ResidenceService/GetResidence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *residenceServiceClient) UpdateResidence(ctx context.Context, in *UpdateResidenceRequest, opts ...grpc.CallOption) (*UpdateResidenceResponse, error) {
	out := new(UpdateResidenceResponse)
	err := c.cc.Invoke(ctx, "/gitlab.com.mercury.residenceservice.generated.model.v1.ResidenceService/UpdateResidence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *residenceServiceClient) DeleteResidence(ctx context.Context, in *DeleteResidenceRequest, opts ...grpc.CallOption) (*DeleteResidenceResponse, error) {
	out := new(DeleteResidenceResponse)
	err := c.cc.Invoke(ctx, "/gitlab.com.mercury.residenceservice.generated.model.v1.ResidenceService/DeleteResidence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *residenceServiceClient) ListResidencesByIDs(ctx context.Context, in *ListResidencesByIDsRequest, opts ...grpc.CallOption) (*ListResidencesByIDsResponse, error) {
	out := new(ListResidencesByIDsResponse)
	err := c.cc.Invoke(ctx, "/gitlab.com.mercury.residenceservice.generated.model.v1.ResidenceService/ListResidencesByIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *residenceServiceClient) ListPopularResidences(ctx context.Context, in *ListPopularResidencesRequest, opts ...grpc.CallOption) (*ListPopularResidencesResponse, error) {
	out := new(ListPopularResidencesResponse)
	err := c.cc.Invoke(ctx, "/gitlab.com.mercury.residenceservice.generated.model.v1.ResidenceService/ListPopularResidences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *residenceServiceClient) CreateFlatPlan(ctx context.Context, in *CreateFlatPlanRequest, opts ...grpc.CallOption) (*CreateFlatPlanResponse, error) {
	out := new(CreateFlatPlanResponse)
	err := c.cc.Invoke(ctx, "/gitlab.com.mercury.residenceservice.generated.model.v1.ResidenceService/CreateFlatPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *residenceServiceClient) UpdateFlatPlan(ctx context.Context, in *UpdateFlatPlanRequest, opts ...grpc.CallOption) (*UpdateFlatPlanResponse, error) {
	out := new(UpdateFlatPlanResponse)
	err := c.cc.Invoke(ctx, "/gitlab.com.mercury.residenceservice.generated.model.v1.ResidenceService/UpdateFlatPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *residenceServiceClient) DeleteFlatPlan(ctx context.Context, in *DeleteFlatPlanRequest, opts ...grpc.CallOption) (*DeleteFlatPlanResponse, error) {
	out := new(DeleteFlatPlanResponse)
	err := c.cc.Invoke(ctx, "/gitlab.com.mercury.residenceservice.generated.model.v1.ResidenceService/DeleteFlatPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResidenceServiceServer is the server API for ResidenceService service.
// All implementations should embed UnimplementedResidenceServiceServer
// for forward compatibility
type ResidenceServiceServer interface {
	//*
	// Creates a new residence.
	// If the residence exists, an error "Already exists" will be returned.
	CreateResidence(context.Context, *CreateResidenceRequest) (*CreateResidenceResponse, error)
	//*
	// Returns a list residence by criteria.
	// If the residence does not exist, an error "Not found" will be returned.
	ListResidences(context.Context, *ListResidencesRequest) (*ListResidencesResponse, error)
	//*
	// Returns a residence by the provided id.
	// If the residence does not exist, an error "Not found" will be returned.
	GetResidence(context.Context, *GetResidenceRequest) (*GetResidenceResponse, error)
	//*
	// Updates an existing residence by the provided id.
	// If the residence does not exist, an error "Not found" will be returned.
	UpdateResidence(context.Context, *UpdateResidenceRequest) (*UpdateResidenceResponse, error)
	//*
	// Deletes an existing residence.
	// If the residence does not exist, an error "Not found" will be returned.
	DeleteResidence(context.Context, *DeleteResidenceRequest) (*DeleteResidenceResponse, error)
	//*
	// Returns a list of residences by ids.
	ListResidencesByIDs(context.Context, *ListResidencesByIDsRequest) (*ListResidencesByIDsResponse, error)
	//*
	// Returns a list residence by criteria.
	// If the residence does not exist, an error "Not found" will be returned.
	ListPopularResidences(context.Context, *ListPopularResidencesRequest) (*ListPopularResidencesResponse, error)
	//*
	// Creates a new flat plan.
	CreateFlatPlan(context.Context, *CreateFlatPlanRequest) (*CreateFlatPlanResponse, error)
	//*
	// Updates a flat plan.
	UpdateFlatPlan(context.Context, *UpdateFlatPlanRequest) (*UpdateFlatPlanResponse, error)
	//*
	// Deletes a flat plan.
	DeleteFlatPlan(context.Context, *DeleteFlatPlanRequest) (*DeleteFlatPlanResponse, error)
}

// UnimplementedResidenceServiceServer should be embedded to have forward compatible implementations.
type UnimplementedResidenceServiceServer struct {
}

func (UnimplementedResidenceServiceServer) CreateResidence(context.Context, *CreateResidenceRequest) (*CreateResidenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateResidence not implemented")
}
func (UnimplementedResidenceServiceServer) ListResidences(context.Context, *ListResidencesRequest) (*ListResidencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListResidences not implemented")
}
func (UnimplementedResidenceServiceServer) GetResidence(context.Context, *GetResidenceRequest) (*GetResidenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResidence not implemented")
}
func (UnimplementedResidenceServiceServer) UpdateResidence(context.Context, *UpdateResidenceRequest) (*UpdateResidenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateResidence not implemented")
}
func (UnimplementedResidenceServiceServer) DeleteResidence(context.Context, *DeleteResidenceRequest) (*DeleteResidenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResidence not implemented")
}
func (UnimplementedResidenceServiceServer) ListResidencesByIDs(context.Context, *ListResidencesByIDsRequest) (*ListResidencesByIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListResidencesByIDs not implemented")
}
func (UnimplementedResidenceServiceServer) ListPopularResidences(context.Context, *ListPopularResidencesRequest) (*ListPopularResidencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPopularResidences not implemented")
}
func (UnimplementedResidenceServiceServer) CreateFlatPlan(context.Context, *CreateFlatPlanRequest) (*CreateFlatPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFlatPlan not implemented")
}
func (UnimplementedResidenceServiceServer) UpdateFlatPlan(context.Context, *UpdateFlatPlanRequest) (*UpdateFlatPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFlatPlan not implemented")
}
func (UnimplementedResidenceServiceServer) DeleteFlatPlan(context.Context, *DeleteFlatPlanRequest) (*DeleteFlatPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFlatPlan not implemented")
}

// UnsafeResidenceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResidenceServiceServer will
// result in compilation errors.
type UnsafeResidenceServiceServer interface {
	mustEmbedUnimplementedResidenceServiceServer()
}

func RegisterResidenceServiceServer(s grpc.ServiceRegistrar, srv ResidenceServiceServer) {
	s.RegisterService(&ResidenceService_ServiceDesc, srv)
}

func _ResidenceService_CreateResidence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateResidenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResidenceServiceServer).CreateResidence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitlab.com.mercury.residenceservice.generated.model.v1.ResidenceService/CreateResidence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResidenceServiceServer).CreateResidence(ctx, req.(*CreateResidenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResidenceService_ListResidences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListResidencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResidenceServiceServer).ListResidences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitlab.com.mercury.residenceservice.generated.model.v1.ResidenceService/ListResidences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResidenceServiceServer).ListResidences(ctx, req.(*ListResidencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResidenceService_GetResidence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResidenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResidenceServiceServer).GetResidence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitlab.com.mercury.residenceservice.generated.model.v1.ResidenceService/GetResidence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResidenceServiceServer).GetResidence(ctx, req.(*GetResidenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResidenceService_UpdateResidence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResidenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResidenceServiceServer).UpdateResidence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitlab.com.mercury.residenceservice.generated.model.v1.ResidenceService/UpdateResidence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResidenceServiceServer).UpdateResidence(ctx, req.(*UpdateResidenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResidenceService_DeleteResidence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteResidenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResidenceServiceServer).DeleteResidence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitlab.com.mercury.residenceservice.generated.model.v1.ResidenceService/DeleteResidence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResidenceServiceServer).DeleteResidence(ctx, req.(*DeleteResidenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResidenceService_ListResidencesByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListResidencesByIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResidenceServiceServer).ListResidencesByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitlab.com.mercury.residenceservice.generated.model.v1.ResidenceService/ListResidencesByIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResidenceServiceServer).ListResidencesByIDs(ctx, req.(*ListResidencesByIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResidenceService_ListPopularResidences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPopularResidencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResidenceServiceServer).ListPopularResidences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitlab.com.mercury.residenceservice.generated.model.v1.ResidenceService/ListPopularResidences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResidenceServiceServer).ListPopularResidences(ctx, req.(*ListPopularResidencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResidenceService_CreateFlatPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFlatPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResidenceServiceServer).CreateFlatPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitlab.com.mercury.residenceservice.generated.model.v1.ResidenceService/CreateFlatPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResidenceServiceServer).CreateFlatPlan(ctx, req.(*CreateFlatPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResidenceService_UpdateFlatPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFlatPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResidenceServiceServer).UpdateFlatPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitlab.com.mercury.residenceservice.generated.model.v1.ResidenceService/UpdateFlatPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResidenceServiceServer).UpdateFlatPlan(ctx, req.(*UpdateFlatPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResidenceService_DeleteFlatPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFlatPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResidenceServiceServer).DeleteFlatPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitlab.com.mercury.residenceservice.generated.model.v1.ResidenceService/DeleteFlatPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResidenceServiceServer).DeleteFlatPlan(ctx, req.(*DeleteFlatPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ResidenceService_ServiceDesc is the grpc.ServiceDesc for ResidenceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResidenceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gitlab.com.mercury.residenceservice.generated.model.v1.ResidenceService",
	HandlerType: (*ResidenceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateResidence",
			Handler:    _ResidenceService_CreateResidence_Handler,
		},
		{
			MethodName: "ListResidences",
			Handler:    _ResidenceService_ListResidences_Handler,
		},
		{
			MethodName: "GetResidence",
			Handler:    _ResidenceService_GetResidence_Handler,
		},
		{
			MethodName: "UpdateResidence",
			Handler:    _ResidenceService_UpdateResidence_Handler,
		},
		{
			MethodName: "DeleteResidence",
			Handler:    _ResidenceService_DeleteResidence_Handler,
		},
		{
			MethodName: "ListResidencesByIDs",
			Handler:    _ResidenceService_ListResidencesByIDs_Handler,
		},
		{
			MethodName: "ListPopularResidences",
			Handler:    _ResidenceService_ListPopularResidences_Handler,
		},
		{
			MethodName: "CreateFlatPlan",
			Handler:    _ResidenceService_CreateFlatPlan_Handler,
		},
		{
			MethodName: "UpdateFlatPlan",
			Handler:    _ResidenceService_UpdateFlatPlan_Handler,
		},
		{
			MethodName: "DeleteFlatPlan",
			Handler:    _ResidenceService_DeleteFlatPlan_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "residenceserviceapi_residence_service.proto",
}
