// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: residenceserviceapi_manager_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManagerServiceClient is the client API for ManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerServiceClient interface {
	// Create a new manager.
	CreateManager(ctx context.Context, in *CreateManagerRequest, opts ...grpc.CallOption) (*CreateManagerResponse, error)
	// Returns a list manager by criteria.
	//
	// If the manager does not exist, an error "Not found" will be returned.
	ListManagers(ctx context.Context, in *ListManagersRequest, opts ...grpc.CallOption) (*ListManagersResponse, error)
	// Returns a manager by id.
	//
	// If the manager does not exist, an error "Not found" will be returned.
	GetManager(ctx context.Context, in *GetManagerRequest, opts ...grpc.CallOption) (*GetManagerResponse, error)
	// Updates a manager by id.
	//
	// If the manager does not exist, an error "Not found" will be returned.
	UpdateManager(ctx context.Context, in *UpdateManagerRequest, opts ...grpc.CallOption) (*UpdateManagerResponse, error)
	// Deletes a manager by id.
	//
	// If the manager does not exist, an error "Not found" will be returned.
	DeleteManager(ctx context.Context, in *DeleteManagerRequest, opts ...grpc.CallOption) (*DeleteManagerResponse, error)
}

type managerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerServiceClient(cc grpc.ClientConnInterface) ManagerServiceClient {
	return &managerServiceClient{cc}
}

func (c *managerServiceClient) CreateManager(ctx context.Context, in *CreateManagerRequest, opts ...grpc.CallOption) (*CreateManagerResponse, error) {
	out := new(CreateManagerResponse)
	err := c.cc.Invoke(ctx, "/gitlab.com.mercury.residenceservice.generated.model.v1.ManagerService/CreateManager", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ListManagers(ctx context.Context, in *ListManagersRequest, opts ...grpc.CallOption) (*ListManagersResponse, error) {
	out := new(ListManagersResponse)
	err := c.cc.Invoke(ctx, "/gitlab.com.mercury.residenceservice.generated.model.v1.ManagerService/ListManagers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetManager(ctx context.Context, in *GetManagerRequest, opts ...grpc.CallOption) (*GetManagerResponse, error) {
	out := new(GetManagerResponse)
	err := c.cc.Invoke(ctx, "/gitlab.com.mercury.residenceservice.generated.model.v1.ManagerService/GetManager", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateManager(ctx context.Context, in *UpdateManagerRequest, opts ...grpc.CallOption) (*UpdateManagerResponse, error) {
	out := new(UpdateManagerResponse)
	err := c.cc.Invoke(ctx, "/gitlab.com.mercury.residenceservice.generated.model.v1.ManagerService/UpdateManager", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) DeleteManager(ctx context.Context, in *DeleteManagerRequest, opts ...grpc.CallOption) (*DeleteManagerResponse, error) {
	out := new(DeleteManagerResponse)
	err := c.cc.Invoke(ctx, "/gitlab.com.mercury.residenceservice.generated.model.v1.ManagerService/DeleteManager", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServiceServer is the server API for ManagerService service.
// All implementations should embed UnimplementedManagerServiceServer
// for forward compatibility
type ManagerServiceServer interface {
	// Create a new manager.
	CreateManager(context.Context, *CreateManagerRequest) (*CreateManagerResponse, error)
	// Returns a list manager by criteria.
	//
	// If the manager does not exist, an error "Not found" will be returned.
	ListManagers(context.Context, *ListManagersRequest) (*ListManagersResponse, error)
	// Returns a manager by id.
	//
	// If the manager does not exist, an error "Not found" will be returned.
	GetManager(context.Context, *GetManagerRequest) (*GetManagerResponse, error)
	// Updates a manager by id.
	//
	// If the manager does not exist, an error "Not found" will be returned.
	UpdateManager(context.Context, *UpdateManagerRequest) (*UpdateManagerResponse, error)
	// Deletes a manager by id.
	//
	// If the manager does not exist, an error "Not found" will be returned.
	DeleteManager(context.Context, *DeleteManagerRequest) (*DeleteManagerResponse, error)
}

// UnimplementedManagerServiceServer should be embedded to have forward compatible implementations.
type UnimplementedManagerServiceServer struct {
}

func (UnimplementedManagerServiceServer) CreateManager(context.Context, *CreateManagerRequest) (*CreateManagerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateManager not implemented")
}
func (UnimplementedManagerServiceServer) ListManagers(context.Context, *ListManagersRequest) (*ListManagersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListManagers not implemented")
}
func (UnimplementedManagerServiceServer) GetManager(context.Context, *GetManagerRequest) (*GetManagerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetManager not implemented")
}
func (UnimplementedManagerServiceServer) UpdateManager(context.Context, *UpdateManagerRequest) (*UpdateManagerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateManager not implemented")
}
func (UnimplementedManagerServiceServer) DeleteManager(context.Context, *DeleteManagerRequest) (*DeleteManagerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteManager not implemented")
}

// UnsafeManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServiceServer will
// result in compilation errors.
type UnsafeManagerServiceServer interface {
	mustEmbedUnimplementedManagerServiceServer()
}

func RegisterManagerServiceServer(s grpc.ServiceRegistrar, srv ManagerServiceServer) {
	s.RegisterService(&ManagerService_ServiceDesc, srv)
}

func _ManagerService_CreateManager_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateManagerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CreateManager(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitlab.com.mercury.residenceservice.generated.model.v1.ManagerService/CreateManager",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CreateManager(ctx, req.(*CreateManagerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ListManagers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListManagersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ListManagers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitlab.com.mercury.residenceservice.generated.model.v1.ManagerService/ListManagers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ListManagers(ctx, req.(*ListManagersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetManager_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetManagerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetManager(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitlab.com.mercury.residenceservice.generated.model.v1.ManagerService/GetManager",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetManager(ctx, req.(*GetManagerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateManager_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateManagerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateManager(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitlab.com.mercury.residenceservice.generated.model.v1.ManagerService/UpdateManager",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateManager(ctx, req.(*UpdateManagerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_DeleteManager_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteManagerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).DeleteManager(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitlab.com.mercury.residenceservice.generated.model.v1.ManagerService/DeleteManager",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).DeleteManager(ctx, req.(*DeleteManagerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ManagerService_ServiceDesc is the grpc.ServiceDesc for ManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gitlab.com.mercury.residenceservice.generated.model.v1.ManagerService",
	HandlerType: (*ManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateManager",
			Handler:    _ManagerService_CreateManager_Handler,
		},
		{
			MethodName: "ListManagers",
			Handler:    _ManagerService_ListManagers_Handler,
		},
		{
			MethodName: "GetManager",
			Handler:    _ManagerService_GetManager_Handler,
		},
		{
			MethodName: "UpdateManager",
			Handler:    _ManagerService_UpdateManager_Handler,
		},
		{
			MethodName: "DeleteManager",
			Handler:    _ManagerService_DeleteManager_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "residenceserviceapi_manager_service.proto",
}
