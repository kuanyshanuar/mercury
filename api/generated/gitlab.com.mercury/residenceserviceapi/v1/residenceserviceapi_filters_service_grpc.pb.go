// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: residenceserviceapi_filters_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ResidenceFilterServiceClient is the client API for ResidenceFilterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResidenceFilterServiceClient interface {
	//*
	// Creates a new city.
	CreateCity(ctx context.Context, in *CreateCityRequest, opts ...grpc.CallOption) (*CreateCityResponse, error)
	//*
	// Returns a list cities.
	ListCities(ctx context.Context, in *ListCitiesRequest, opts ...grpc.CallOption) (*ListCitiesResponse, error)
	//*
	// Updates the city by id.
	UpdateCity(ctx context.Context, in *UpdateCityRequest, opts ...grpc.CallOption) (*UpdateCityResponse, error)
	//*
	// Deletes the city by id.
	DeleteCity(ctx context.Context, in *DeleteCityRequest, opts ...grpc.CallOption) (*DeleteCityResponse, error)
	//*
	// Creates a new district.
	CreateDistrict(ctx context.Context, in *CreateDistrictRequest, opts ...grpc.CallOption) (*CreateDistrictResponse, error)
	//*
	// Returns a list district by city id.
	//
	// If the city does not exist, an error "Not found" will be returned.
	ListDistricts(ctx context.Context, in *ListDistrictsRequest, opts ...grpc.CallOption) (*ListDistrictsResponse, error)
	//*
	// Updates a new district.
	UpdateDistrict(ctx context.Context, in *UpdateDistrictRequest, opts ...grpc.CallOption) (*UpdateDistrictResponse, error)
	//*
	// Deletes a new district.
	DeleteDistrict(ctx context.Context, in *DeleteDistrictRequest, opts ...grpc.CallOption) (*DeleteDistrictResponse, error)
	//*
	// Returns a list filters.
	ListFilters(ctx context.Context, in *ListFiltersRequest, opts ...grpc.CallOption) (*ListFiltersResponse, error)
	//*
	// Returns a list filters.
	ListFiltersV2(ctx context.Context, in *ListFiltersRequestV2, opts ...grpc.CallOption) (*ListFiltersResponseV2, error)
	//*
	// Returns a list of builders.
	ListFilterBuilders(ctx context.Context, in *ListFilterBuildersRequest, opts ...grpc.CallOption) (*ListFilterBuildersResponse, error)
	//*
	// Creates a filter.
	CreateFilter(ctx context.Context, in *CreateFilterRequest, opts ...grpc.CallOption) (*CreateFilterResponse, error)
	//*
	// Deletes the filter by the provided keys.
	DeleteFilter(ctx context.Context, in *DeleteFilterRequest, opts ...grpc.CallOption) (*DeleteFilterResponse, error)
}

type residenceFilterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewResidenceFilterServiceClient(cc grpc.ClientConnInterface) ResidenceFilterServiceClient {
	return &residenceFilterServiceClient{cc}
}

func (c *residenceFilterServiceClient) CreateCity(ctx context.Context, in *CreateCityRequest, opts ...grpc.CallOption) (*CreateCityResponse, error) {
	out := new(CreateCityResponse)
	err := c.cc.Invoke(ctx, "/gitlab.com.mercury.residenceservice.generated.model.v1.ResidenceFilterService/CreateCity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *residenceFilterServiceClient) ListCities(ctx context.Context, in *ListCitiesRequest, opts ...grpc.CallOption) (*ListCitiesResponse, error) {
	out := new(ListCitiesResponse)
	err := c.cc.Invoke(ctx, "/gitlab.com.mercury.residenceservice.generated.model.v1.ResidenceFilterService/ListCities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *residenceFilterServiceClient) UpdateCity(ctx context.Context, in *UpdateCityRequest, opts ...grpc.CallOption) (*UpdateCityResponse, error) {
	out := new(UpdateCityResponse)
	err := c.cc.Invoke(ctx, "/gitlab.com.mercury.residenceservice.generated.model.v1.ResidenceFilterService/UpdateCity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *residenceFilterServiceClient) DeleteCity(ctx context.Context, in *DeleteCityRequest, opts ...grpc.CallOption) (*DeleteCityResponse, error) {
	out := new(DeleteCityResponse)
	err := c.cc.Invoke(ctx, "/gitlab.com.mercury.residenceservice.generated.model.v1.ResidenceFilterService/DeleteCity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *residenceFilterServiceClient) CreateDistrict(ctx context.Context, in *CreateDistrictRequest, opts ...grpc.CallOption) (*CreateDistrictResponse, error) {
	out := new(CreateDistrictResponse)
	err := c.cc.Invoke(ctx, "/gitlab.com.mercury.residenceservice.generated.model.v1.ResidenceFilterService/CreateDistrict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *residenceFilterServiceClient) ListDistricts(ctx context.Context, in *ListDistrictsRequest, opts ...grpc.CallOption) (*ListDistrictsResponse, error) {
	out := new(ListDistrictsResponse)
	err := c.cc.Invoke(ctx, "/gitlab.com.mercury.residenceservice.generated.model.v1.ResidenceFilterService/ListDistricts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *residenceFilterServiceClient) UpdateDistrict(ctx context.Context, in *UpdateDistrictRequest, opts ...grpc.CallOption) (*UpdateDistrictResponse, error) {
	out := new(UpdateDistrictResponse)
	err := c.cc.Invoke(ctx, "/gitlab.com.mercury.residenceservice.generated.model.v1.ResidenceFilterService/UpdateDistrict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *residenceFilterServiceClient) DeleteDistrict(ctx context.Context, in *DeleteDistrictRequest, opts ...grpc.CallOption) (*DeleteDistrictResponse, error) {
	out := new(DeleteDistrictResponse)
	err := c.cc.Invoke(ctx, "/gitlab.com.mercury.residenceservice.generated.model.v1.ResidenceFilterService/DeleteDistrict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *residenceFilterServiceClient) ListFilters(ctx context.Context, in *ListFiltersRequest, opts ...grpc.CallOption) (*ListFiltersResponse, error) {
	out := new(ListFiltersResponse)
	err := c.cc.Invoke(ctx, "/gitlab.com.mercury.residenceservice.generated.model.v1.ResidenceFilterService/ListFilters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *residenceFilterServiceClient) ListFiltersV2(ctx context.Context, in *ListFiltersRequestV2, opts ...grpc.CallOption) (*ListFiltersResponseV2, error) {
	out := new(ListFiltersResponseV2)
	err := c.cc.Invoke(ctx, "/gitlab.com.mercury.residenceservice.generated.model.v1.ResidenceFilterService/ListFiltersV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *residenceFilterServiceClient) ListFilterBuilders(ctx context.Context, in *ListFilterBuildersRequest, opts ...grpc.CallOption) (*ListFilterBuildersResponse, error) {
	out := new(ListFilterBuildersResponse)
	err := c.cc.Invoke(ctx, "/gitlab.com.mercury.residenceservice.generated.model.v1.ResidenceFilterService/ListFilterBuilders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *residenceFilterServiceClient) CreateFilter(ctx context.Context, in *CreateFilterRequest, opts ...grpc.CallOption) (*CreateFilterResponse, error) {
	out := new(CreateFilterResponse)
	err := c.cc.Invoke(ctx, "/gitlab.com.mercury.residenceservice.generated.model.v1.ResidenceFilterService/CreateFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *residenceFilterServiceClient) DeleteFilter(ctx context.Context, in *DeleteFilterRequest, opts ...grpc.CallOption) (*DeleteFilterResponse, error) {
	out := new(DeleteFilterResponse)
	err := c.cc.Invoke(ctx, "/gitlab.com.mercury.residenceservice.generated.model.v1.ResidenceFilterService/DeleteFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResidenceFilterServiceServer is the server API for ResidenceFilterService service.
// All implementations should embed UnimplementedResidenceFilterServiceServer
// for forward compatibility
type ResidenceFilterServiceServer interface {
	//*
	// Creates a new city.
	CreateCity(context.Context, *CreateCityRequest) (*CreateCityResponse, error)
	//*
	// Returns a list cities.
	ListCities(context.Context, *ListCitiesRequest) (*ListCitiesResponse, error)
	//*
	// Updates the city by id.
	UpdateCity(context.Context, *UpdateCityRequest) (*UpdateCityResponse, error)
	//*
	// Deletes the city by id.
	DeleteCity(context.Context, *DeleteCityRequest) (*DeleteCityResponse, error)
	//*
	// Creates a new district.
	CreateDistrict(context.Context, *CreateDistrictRequest) (*CreateDistrictResponse, error)
	//*
	// Returns a list district by city id.
	//
	// If the city does not exist, an error "Not found" will be returned.
	ListDistricts(context.Context, *ListDistrictsRequest) (*ListDistrictsResponse, error)
	//*
	// Updates a new district.
	UpdateDistrict(context.Context, *UpdateDistrictRequest) (*UpdateDistrictResponse, error)
	//*
	// Deletes a new district.
	DeleteDistrict(context.Context, *DeleteDistrictRequest) (*DeleteDistrictResponse, error)
	//*
	// Returns a list filters.
	ListFilters(context.Context, *ListFiltersRequest) (*ListFiltersResponse, error)
	//*
	// Returns a list filters.
	ListFiltersV2(context.Context, *ListFiltersRequestV2) (*ListFiltersResponseV2, error)
	//*
	// Returns a list of builders.
	ListFilterBuilders(context.Context, *ListFilterBuildersRequest) (*ListFilterBuildersResponse, error)
	//*
	// Creates a filter.
	CreateFilter(context.Context, *CreateFilterRequest) (*CreateFilterResponse, error)
	//*
	// Deletes the filter by the provided keys.
	DeleteFilter(context.Context, *DeleteFilterRequest) (*DeleteFilterResponse, error)
}

// UnimplementedResidenceFilterServiceServer should be embedded to have forward compatible implementations.
type UnimplementedResidenceFilterServiceServer struct {
}

func (UnimplementedResidenceFilterServiceServer) CreateCity(context.Context, *CreateCityRequest) (*CreateCityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCity not implemented")
}
func (UnimplementedResidenceFilterServiceServer) ListCities(context.Context, *ListCitiesRequest) (*ListCitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCities not implemented")
}
func (UnimplementedResidenceFilterServiceServer) UpdateCity(context.Context, *UpdateCityRequest) (*UpdateCityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCity not implemented")
}
func (UnimplementedResidenceFilterServiceServer) DeleteCity(context.Context, *DeleteCityRequest) (*DeleteCityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCity not implemented")
}
func (UnimplementedResidenceFilterServiceServer) CreateDistrict(context.Context, *CreateDistrictRequest) (*CreateDistrictResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDistrict not implemented")
}
func (UnimplementedResidenceFilterServiceServer) ListDistricts(context.Context, *ListDistrictsRequest) (*ListDistrictsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDistricts not implemented")
}
func (UnimplementedResidenceFilterServiceServer) UpdateDistrict(context.Context, *UpdateDistrictRequest) (*UpdateDistrictResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDistrict not implemented")
}
func (UnimplementedResidenceFilterServiceServer) DeleteDistrict(context.Context, *DeleteDistrictRequest) (*DeleteDistrictResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDistrict not implemented")
}
func (UnimplementedResidenceFilterServiceServer) ListFilters(context.Context, *ListFiltersRequest) (*ListFiltersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFilters not implemented")
}
func (UnimplementedResidenceFilterServiceServer) ListFiltersV2(context.Context, *ListFiltersRequestV2) (*ListFiltersResponseV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFiltersV2 not implemented")
}
func (UnimplementedResidenceFilterServiceServer) ListFilterBuilders(context.Context, *ListFilterBuildersRequest) (*ListFilterBuildersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFilterBuilders not implemented")
}
func (UnimplementedResidenceFilterServiceServer) CreateFilter(context.Context, *CreateFilterRequest) (*CreateFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFilter not implemented")
}
func (UnimplementedResidenceFilterServiceServer) DeleteFilter(context.Context, *DeleteFilterRequest) (*DeleteFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFilter not implemented")
}

// UnsafeResidenceFilterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResidenceFilterServiceServer will
// result in compilation errors.
type UnsafeResidenceFilterServiceServer interface {
	mustEmbedUnimplementedResidenceFilterServiceServer()
}

func RegisterResidenceFilterServiceServer(s grpc.ServiceRegistrar, srv ResidenceFilterServiceServer) {
	s.RegisterService(&ResidenceFilterService_ServiceDesc, srv)
}

func _ResidenceFilterService_CreateCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResidenceFilterServiceServer).CreateCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitlab.com.mercury.residenceservice.generated.model.v1.ResidenceFilterService/CreateCity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResidenceFilterServiceServer).CreateCity(ctx, req.(*CreateCityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResidenceFilterService_ListCities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResidenceFilterServiceServer).ListCities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitlab.com.mercury.residenceservice.generated.model.v1.ResidenceFilterService/ListCities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResidenceFilterServiceServer).ListCities(ctx, req.(*ListCitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResidenceFilterService_UpdateCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResidenceFilterServiceServer).UpdateCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitlab.com.mercury.residenceservice.generated.model.v1.ResidenceFilterService/UpdateCity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResidenceFilterServiceServer).UpdateCity(ctx, req.(*UpdateCityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResidenceFilterService_DeleteCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResidenceFilterServiceServer).DeleteCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitlab.com.mercury.residenceservice.generated.model.v1.ResidenceFilterService/DeleteCity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResidenceFilterServiceServer).DeleteCity(ctx, req.(*DeleteCityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResidenceFilterService_CreateDistrict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDistrictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResidenceFilterServiceServer).CreateDistrict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitlab.com.mercury.residenceservice.generated.model.v1.ResidenceFilterService/CreateDistrict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResidenceFilterServiceServer).CreateDistrict(ctx, req.(*CreateDistrictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResidenceFilterService_ListDistricts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDistrictsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResidenceFilterServiceServer).ListDistricts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitlab.com.mercury.residenceservice.generated.model.v1.ResidenceFilterService/ListDistricts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResidenceFilterServiceServer).ListDistricts(ctx, req.(*ListDistrictsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResidenceFilterService_UpdateDistrict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDistrictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResidenceFilterServiceServer).UpdateDistrict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitlab.com.mercury.residenceservice.generated.model.v1.ResidenceFilterService/UpdateDistrict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResidenceFilterServiceServer).UpdateDistrict(ctx, req.(*UpdateDistrictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResidenceFilterService_DeleteDistrict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDistrictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResidenceFilterServiceServer).DeleteDistrict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitlab.com.mercury.residenceservice.generated.model.v1.ResidenceFilterService/DeleteDistrict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResidenceFilterServiceServer).DeleteDistrict(ctx, req.(*DeleteDistrictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResidenceFilterService_ListFilters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFiltersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResidenceFilterServiceServer).ListFilters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitlab.com.mercury.residenceservice.generated.model.v1.ResidenceFilterService/ListFilters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResidenceFilterServiceServer).ListFilters(ctx, req.(*ListFiltersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResidenceFilterService_ListFiltersV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFiltersRequestV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResidenceFilterServiceServer).ListFiltersV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitlab.com.mercury.residenceservice.generated.model.v1.ResidenceFilterService/ListFiltersV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResidenceFilterServiceServer).ListFiltersV2(ctx, req.(*ListFiltersRequestV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResidenceFilterService_ListFilterBuilders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFilterBuildersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResidenceFilterServiceServer).ListFilterBuilders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitlab.com.mercury.residenceservice.generated.model.v1.ResidenceFilterService/ListFilterBuilders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResidenceFilterServiceServer).ListFilterBuilders(ctx, req.(*ListFilterBuildersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResidenceFilterService_CreateFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResidenceFilterServiceServer).CreateFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitlab.com.mercury.residenceservice.generated.model.v1.ResidenceFilterService/CreateFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResidenceFilterServiceServer).CreateFilter(ctx, req.(*CreateFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResidenceFilterService_DeleteFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResidenceFilterServiceServer).DeleteFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitlab.com.mercury.residenceservice.generated.model.v1.ResidenceFilterService/DeleteFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResidenceFilterServiceServer).DeleteFilter(ctx, req.(*DeleteFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ResidenceFilterService_ServiceDesc is the grpc.ServiceDesc for ResidenceFilterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResidenceFilterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gitlab.com.mercury.residenceservice.generated.model.v1.ResidenceFilterService",
	HandlerType: (*ResidenceFilterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCity",
			Handler:    _ResidenceFilterService_CreateCity_Handler,
		},
		{
			MethodName: "ListCities",
			Handler:    _ResidenceFilterService_ListCities_Handler,
		},
		{
			MethodName: "UpdateCity",
			Handler:    _ResidenceFilterService_UpdateCity_Handler,
		},
		{
			MethodName: "DeleteCity",
			Handler:    _ResidenceFilterService_DeleteCity_Handler,
		},
		{
			MethodName: "CreateDistrict",
			Handler:    _ResidenceFilterService_CreateDistrict_Handler,
		},
		{
			MethodName: "ListDistricts",
			Handler:    _ResidenceFilterService_ListDistricts_Handler,
		},
		{
			MethodName: "UpdateDistrict",
			Handler:    _ResidenceFilterService_UpdateDistrict_Handler,
		},
		{
			MethodName: "DeleteDistrict",
			Handler:    _ResidenceFilterService_DeleteDistrict_Handler,
		},
		{
			MethodName: "ListFilters",
			Handler:    _ResidenceFilterService_ListFilters_Handler,
		},
		{
			MethodName: "ListFiltersV2",
			Handler:    _ResidenceFilterService_ListFiltersV2_Handler,
		},
		{
			MethodName: "ListFilterBuilders",
			Handler:    _ResidenceFilterService_ListFilterBuilders_Handler,
		},
		{
			MethodName: "CreateFilter",
			Handler:    _ResidenceFilterService_CreateFilter_Handler,
		},
		{
			MethodName: "DeleteFilter",
			Handler:    _ResidenceFilterService_DeleteFilter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "residenceserviceapi_filters_service.proto",
}
