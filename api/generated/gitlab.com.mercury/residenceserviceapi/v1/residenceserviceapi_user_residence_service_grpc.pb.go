// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: residenceserviceapi_user_residence_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserResidenceServiceClient is the client API for UserResidenceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserResidenceServiceClient interface {
	// *
	// Adds a residence to favourite list.
	//
	// If the residence not exists, an error "residence does not exists" will be returned.
	AddResidenceToFavourites(ctx context.Context, in *AddResidenceToFavouritesRequest, opts ...grpc.CallOption) (*AddResidenceToFavouritesResponse, error)
	// *
	// Deletes a residence from favourite list.
	//
	// If the residence not exists, an error "residence does not exists" will be returned.
	DeleteResidenceFromFavourites(ctx context.Context, in *DeleteResidenceFromFavouritesRequest, opts ...grpc.CallOption) (*DeleteResidenceFromFavouritesResponse, error)
	// *
	// Returns a list of residences from favourite list.
	ListFavouriteResidences(ctx context.Context, in *ListFavouriteResidencesRequest, opts ...grpc.CallOption) (*ListFavouriteResidencesResponse, error)
}

type userResidenceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserResidenceServiceClient(cc grpc.ClientConnInterface) UserResidenceServiceClient {
	return &userResidenceServiceClient{cc}
}

func (c *userResidenceServiceClient) AddResidenceToFavourites(ctx context.Context, in *AddResidenceToFavouritesRequest, opts ...grpc.CallOption) (*AddResidenceToFavouritesResponse, error) {
	out := new(AddResidenceToFavouritesResponse)
	err := c.cc.Invoke(ctx, "/gitlab.com.mercury.residenceservice.generated.model.v1.UserResidenceService/AddResidenceToFavourites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userResidenceServiceClient) DeleteResidenceFromFavourites(ctx context.Context, in *DeleteResidenceFromFavouritesRequest, opts ...grpc.CallOption) (*DeleteResidenceFromFavouritesResponse, error) {
	out := new(DeleteResidenceFromFavouritesResponse)
	err := c.cc.Invoke(ctx, "/gitlab.com.mercury.residenceservice.generated.model.v1.UserResidenceService/DeleteResidenceFromFavourites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userResidenceServiceClient) ListFavouriteResidences(ctx context.Context, in *ListFavouriteResidencesRequest, opts ...grpc.CallOption) (*ListFavouriteResidencesResponse, error) {
	out := new(ListFavouriteResidencesResponse)
	err := c.cc.Invoke(ctx, "/gitlab.com.mercury.residenceservice.generated.model.v1.UserResidenceService/ListFavouriteResidences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserResidenceServiceServer is the server API for UserResidenceService service.
// All implementations should embed UnimplementedUserResidenceServiceServer
// for forward compatibility
type UserResidenceServiceServer interface {
	// *
	// Adds a residence to favourite list.
	//
	// If the residence not exists, an error "residence does not exists" will be returned.
	AddResidenceToFavourites(context.Context, *AddResidenceToFavouritesRequest) (*AddResidenceToFavouritesResponse, error)
	// *
	// Deletes a residence from favourite list.
	//
	// If the residence not exists, an error "residence does not exists" will be returned.
	DeleteResidenceFromFavourites(context.Context, *DeleteResidenceFromFavouritesRequest) (*DeleteResidenceFromFavouritesResponse, error)
	// *
	// Returns a list of residences from favourite list.
	ListFavouriteResidences(context.Context, *ListFavouriteResidencesRequest) (*ListFavouriteResidencesResponse, error)
}

// UnimplementedUserResidenceServiceServer should be embedded to have forward compatible implementations.
type UnimplementedUserResidenceServiceServer struct {
}

func (UnimplementedUserResidenceServiceServer) AddResidenceToFavourites(context.Context, *AddResidenceToFavouritesRequest) (*AddResidenceToFavouritesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddResidenceToFavourites not implemented")
}
func (UnimplementedUserResidenceServiceServer) DeleteResidenceFromFavourites(context.Context, *DeleteResidenceFromFavouritesRequest) (*DeleteResidenceFromFavouritesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResidenceFromFavourites not implemented")
}
func (UnimplementedUserResidenceServiceServer) ListFavouriteResidences(context.Context, *ListFavouriteResidencesRequest) (*ListFavouriteResidencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFavouriteResidences not implemented")
}

// UnsafeUserResidenceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserResidenceServiceServer will
// result in compilation errors.
type UnsafeUserResidenceServiceServer interface {
	mustEmbedUnimplementedUserResidenceServiceServer()
}

func RegisterUserResidenceServiceServer(s grpc.ServiceRegistrar, srv UserResidenceServiceServer) {
	s.RegisterService(&UserResidenceService_ServiceDesc, srv)
}

func _UserResidenceService_AddResidenceToFavourites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddResidenceToFavouritesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserResidenceServiceServer).AddResidenceToFavourites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitlab.com.mercury.residenceservice.generated.model.v1.UserResidenceService/AddResidenceToFavourites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserResidenceServiceServer).AddResidenceToFavourites(ctx, req.(*AddResidenceToFavouritesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserResidenceService_DeleteResidenceFromFavourites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteResidenceFromFavouritesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserResidenceServiceServer).DeleteResidenceFromFavourites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitlab.com.mercury.residenceservice.generated.model.v1.UserResidenceService/DeleteResidenceFromFavourites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserResidenceServiceServer).DeleteResidenceFromFavourites(ctx, req.(*DeleteResidenceFromFavouritesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserResidenceService_ListFavouriteResidences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFavouriteResidencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserResidenceServiceServer).ListFavouriteResidences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitlab.com.mercury.residenceservice.generated.model.v1.UserResidenceService/ListFavouriteResidences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserResidenceServiceServer).ListFavouriteResidences(ctx, req.(*ListFavouriteResidencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserResidenceService_ServiceDesc is the grpc.ServiceDesc for UserResidenceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserResidenceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gitlab.com.mercury.residenceservice.generated.model.v1.UserResidenceService",
	HandlerType: (*UserResidenceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddResidenceToFavourites",
			Handler:    _UserResidenceService_AddResidenceToFavourites_Handler,
		},
		{
			MethodName: "DeleteResidenceFromFavourites",
			Handler:    _UserResidenceService_DeleteResidenceFromFavourites_Handler,
		},
		{
			MethodName: "ListFavouriteResidences",
			Handler:    _UserResidenceService_ListFavouriteResidences_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "residenceserviceapi_user_residence_service.proto",
}
