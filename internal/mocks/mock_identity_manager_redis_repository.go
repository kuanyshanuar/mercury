// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/zharzhanov/mercury/internal/domain (interfaces: IdentityManagerRedisRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "gitlab.com/zharzhanov/mercury/internal/domain"
)

// MockIdentityManagerRedisRepository is a mock of IdentityManagerRedisRepository interface.
type MockIdentityManagerRedisRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIdentityManagerRedisRepositoryMockRecorder
}

// MockIdentityManagerRedisRepositoryMockRecorder is the mock recorder for MockIdentityManagerRedisRepository.
type MockIdentityManagerRedisRepositoryMockRecorder struct {
	mock *MockIdentityManagerRedisRepository
}

// NewMockIdentityManagerRedisRepository creates a new mock instance.
func NewMockIdentityManagerRedisRepository(ctrl *gomock.Controller) *MockIdentityManagerRedisRepository {
	mock := &MockIdentityManagerRedisRepository{ctrl: ctrl}
	mock.recorder = &MockIdentityManagerRedisRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIdentityManagerRedisRepository) EXPECT() *MockIdentityManagerRedisRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockIdentityManagerRedisRepository) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIdentityManagerRedisRepositoryMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIdentityManagerRedisRepository)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockIdentityManagerRedisRepository) Get(arg0 context.Context, arg1 string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIdentityManagerRedisRepositoryMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIdentityManagerRedisRepository)(nil).Get), arg0, arg1)
}

// Set mocks base method.
func (m *MockIdentityManagerRedisRepository) Set(arg0 context.Context, arg1 string, arg2 *domain.User, arg3 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockIdentityManagerRedisRepositoryMockRecorder) Set(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockIdentityManagerRedisRepository)(nil).Set), arg0, arg1, arg2, arg3)
}
