// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/zharzhanov/mercury/internal/domain (interfaces: NewsRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "gitlab.com/zharzhanov/mercury/internal/domain"
)

// MockNewsRepository is a mock of NewsRepository interface.
type MockNewsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockNewsRepositoryMockRecorder
}

// MockNewsRepositoryMockRecorder is the mock recorder for MockNewsRepository.
type MockNewsRepositoryMockRecorder struct {
	mock *MockNewsRepository
}

// NewMockNewsRepository creates a new mock instance.
func NewMockNewsRepository(ctrl *gomock.Controller) *MockNewsRepository {
	mock := &MockNewsRepository{ctrl: ctrl}
	mock.recorder = &MockNewsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNewsRepository) EXPECT() *MockNewsRepositoryMockRecorder {
	return m.recorder
}

// AddDislike mocks base method.
func (m *MockNewsRepository) AddDislike(arg0 context.Context, arg1, arg2 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDislike", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddDislike indicates an expected call of AddDislike.
func (mr *MockNewsRepositoryMockRecorder) AddDislike(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDislike", reflect.TypeOf((*MockNewsRepository)(nil).AddDislike), arg0, arg1, arg2)
}

// AddLike mocks base method.
func (m *MockNewsRepository) AddLike(arg0 context.Context, arg1, arg2 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLike", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddLike indicates an expected call of AddLike.
func (mr *MockNewsRepositoryMockRecorder) AddLike(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLike", reflect.TypeOf((*MockNewsRepository)(nil).AddLike), arg0, arg1, arg2)
}

// AddView mocks base method.
func (m *MockNewsRepository) AddView(arg0 context.Context, arg1, arg2 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddView", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddView indicates an expected call of AddView.
func (mr *MockNewsRepositoryMockRecorder) AddView(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddView", reflect.TypeOf((*MockNewsRepository)(nil).AddView), arg0, arg1, arg2)
}

// Create mocks base method.
func (m *MockNewsRepository) Create(arg0 context.Context, arg1 *domain.Article) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockNewsRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockNewsRepository)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockNewsRepository) Delete(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockNewsRepositoryMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockNewsRepository)(nil).Delete), arg0, arg1)
}

// DeleteDislike mocks base method.
func (m *MockNewsRepository) DeleteDislike(arg0 context.Context, arg1, arg2 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDislike", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDislike indicates an expected call of DeleteDislike.
func (mr *MockNewsRepositoryMockRecorder) DeleteDislike(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDislike", reflect.TypeOf((*MockNewsRepository)(nil).DeleteDislike), arg0, arg1, arg2)
}

// DeleteLike mocks base method.
func (m *MockNewsRepository) DeleteLike(arg0 context.Context, arg1, arg2 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLike", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLike indicates an expected call of DeleteLike.
func (mr *MockNewsRepositoryMockRecorder) DeleteLike(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLike", reflect.TypeOf((*MockNewsRepository)(nil).DeleteLike), arg0, arg1, arg2)
}

// Get mocks base method.
func (m *MockNewsRepository) Get(arg0 context.Context, arg1 int64) (*domain.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*domain.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockNewsRepositoryMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockNewsRepository)(nil).Get), arg0, arg1)
}

// GetViewedOrNot mocks base method.
func (m *MockNewsRepository) GetViewedOrNot(arg0 context.Context, arg1, arg2 int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetViewedOrNot", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetViewedOrNot indicates an expected call of GetViewedOrNot.
func (mr *MockNewsRepositoryMockRecorder) GetViewedOrNot(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetViewedOrNot", reflect.TypeOf((*MockNewsRepository)(nil).GetViewedOrNot), arg0, arg1, arg2)
}

// HasDisliked mocks base method.
func (m *MockNewsRepository) HasDisliked(arg0 context.Context, arg1, arg2 int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasDisliked", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasDisliked indicates an expected call of HasDisliked.
func (mr *MockNewsRepositoryMockRecorder) HasDisliked(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasDisliked", reflect.TypeOf((*MockNewsRepository)(nil).HasDisliked), arg0, arg1, arg2)
}

// HasLiked mocks base method.
func (m *MockNewsRepository) HasLiked(arg0 context.Context, arg1, arg2 int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasLiked", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasLiked indicates an expected call of HasLiked.
func (mr *MockNewsRepositoryMockRecorder) HasLiked(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasLiked", reflect.TypeOf((*MockNewsRepository)(nil).HasLiked), arg0, arg1, arg2)
}

// List mocks base method.
func (m *MockNewsRepository) List(arg0 context.Context, arg1 *domain.NewsSearchCriteria) ([]*domain.Article, domain.Total, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]*domain.Article)
	ret1, _ := ret[1].(domain.Total)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockNewsRepositoryMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockNewsRepository)(nil).List), arg0, arg1)
}

// Update mocks base method.
func (m *MockNewsRepository) Update(arg0 context.Context, arg1 int64, arg2 *domain.Article) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockNewsRepositoryMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockNewsRepository)(nil).Update), arg0, arg1, arg2)
}
