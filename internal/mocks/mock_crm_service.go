// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/zharzhanov/mercury/internal/domain (interfaces: CrmService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "gitlab.com/zharzhanov/mercury/internal/domain"
)

// MockCrmService is a mock of CrmService interface.
type MockCrmService struct {
	ctrl     *gomock.Controller
	recorder *MockCrmServiceMockRecorder
}

// MockCrmServiceMockRecorder is the mock recorder for MockCrmService.
type MockCrmServiceMockRecorder struct {
	mock *MockCrmService
}

// NewMockCrmService creates a new mock instance.
func NewMockCrmService(ctrl *gomock.Controller) *MockCrmService {
	mock := &MockCrmService{ctrl: ctrl}
	mock.recorder = &MockCrmServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCrmService) EXPECT() *MockCrmServiceMockRecorder {
	return m.recorder
}

// SendResidenceContactDetail mocks base method.
func (m *MockCrmService) SendResidenceContactDetail(arg0 context.Context, arg1 domain.ResidenceContactDetailContent, arg2 domain.CallerID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendResidenceContactDetail", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendResidenceContactDetail indicates an expected call of SendResidenceContactDetail.
func (mr *MockCrmServiceMockRecorder) SendResidenceContactDetail(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendResidenceContactDetail", reflect.TypeOf((*MockCrmService)(nil).SendResidenceContactDetail), arg0, arg1, arg2)
}
