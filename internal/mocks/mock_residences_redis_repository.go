// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/zharzhanov/mercury/internal/domain (interfaces: ResidenceRedisRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "gitlab.com/zharzhanov/mercury/internal/domain"
)

// MockResidenceRedisRepository is a mock of ResidenceRedisRepository interface.
type MockResidenceRedisRepository struct {
	ctrl     *gomock.Controller
	recorder *MockResidenceRedisRepositoryMockRecorder
}

// MockResidenceRedisRepositoryMockRecorder is the mock recorder for MockResidenceRedisRepository.
type MockResidenceRedisRepositoryMockRecorder struct {
	mock *MockResidenceRedisRepository
}

// NewMockResidenceRedisRepository creates a new mock instance.
func NewMockResidenceRedisRepository(ctrl *gomock.Controller) *MockResidenceRedisRepository {
	mock := &MockResidenceRedisRepository{ctrl: ctrl}
	mock.recorder = &MockResidenceRedisRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResidenceRedisRepository) EXPECT() *MockResidenceRedisRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockResidenceRedisRepository) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockResidenceRedisRepositoryMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockResidenceRedisRepository)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockResidenceRedisRepository) Get(arg0 context.Context, arg1 string) (*domain.Residence, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*domain.Residence)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockResidenceRedisRepositoryMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockResidenceRedisRepository)(nil).Get), arg0, arg1)
}

// Set mocks base method.
func (m *MockResidenceRedisRepository) Set(arg0 context.Context, arg1 string, arg2 int, arg3 *domain.Residence) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockResidenceRedisRepositoryMockRecorder) Set(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockResidenceRedisRepository)(nil).Set), arg0, arg1, arg2, arg3)
}
