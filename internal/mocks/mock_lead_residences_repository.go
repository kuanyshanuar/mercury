// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/zharzhanov/mercury/internal/domain (interfaces: LeadResidenceRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "gitlab.com/zharzhanov/mercury/internal/domain"
)

// MockLeadResidenceRepository is a mock of LeadResidenceRepository interface.
type MockLeadResidenceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLeadResidenceRepositoryMockRecorder
}

// MockLeadResidenceRepositoryMockRecorder is the mock recorder for MockLeadResidenceRepository.
type MockLeadResidenceRepositoryMockRecorder struct {
	mock *MockLeadResidenceRepository
}

// NewMockLeadResidenceRepository creates a new mock instance.
func NewMockLeadResidenceRepository(ctrl *gomock.Controller) *MockLeadResidenceRepository {
	mock := &MockLeadResidenceRepository{ctrl: ctrl}
	mock.recorder = &MockLeadResidenceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLeadResidenceRepository) EXPECT() *MockLeadResidenceRepositoryMockRecorder {
	return m.recorder
}

// CreateLeadResidence mocks base method.
func (m *MockLeadResidenceRepository) CreateLeadResidence(arg0 context.Context, arg1 *domain.LeadResidence) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLeadResidence", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLeadResidence indicates an expected call of CreateLeadResidence.
func (mr *MockLeadResidenceRepositoryMockRecorder) CreateLeadResidence(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLeadResidence", reflect.TypeOf((*MockLeadResidenceRepository)(nil).CreateLeadResidence), arg0, arg1)
}

// DeleteLeadResidence mocks base method.
func (m *MockLeadResidenceRepository) DeleteLeadResidence(arg0 context.Context, arg1 domain.LeadID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLeadResidence", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLeadResidence indicates an expected call of DeleteLeadResidence.
func (mr *MockLeadResidenceRepositoryMockRecorder) DeleteLeadResidence(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLeadResidence", reflect.TypeOf((*MockLeadResidenceRepository)(nil).DeleteLeadResidence), arg0, arg1)
}

// GetLeadResidence mocks base method.
func (m *MockLeadResidenceRepository) GetLeadResidence(arg0 context.Context, arg1 domain.LeadID) (*domain.LeadResidence, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLeadResidence", arg0, arg1)
	ret0, _ := ret[0].(*domain.LeadResidence)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLeadResidence indicates an expected call of GetLeadResidence.
func (mr *MockLeadResidenceRepositoryMockRecorder) GetLeadResidence(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLeadResidence", reflect.TypeOf((*MockLeadResidenceRepository)(nil).GetLeadResidence), arg0, arg1)
}

// IsLeadExistByDate mocks base method.
func (m *MockLeadResidenceRepository) IsLeadExistByDate(arg0 context.Context, arg1 domain.ResidenceID, arg2, arg3 int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLeadExistByDate", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsLeadExistByDate indicates an expected call of IsLeadExistByDate.
func (mr *MockLeadResidenceRepositoryMockRecorder) IsLeadExistByDate(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLeadExistByDate", reflect.TypeOf((*MockLeadResidenceRepository)(nil).IsLeadExistByDate), arg0, arg1, arg2, arg3)
}

// IsOtherLeadExist mocks base method.
func (m *MockLeadResidenceRepository) IsOtherLeadExist(arg0 context.Context, arg1 domain.LeadID, arg2 domain.ResidenceID, arg3, arg4 int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsOtherLeadExist", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsOtherLeadExist indicates an expected call of IsOtherLeadExist.
func (mr *MockLeadResidenceRepositoryMockRecorder) IsOtherLeadExist(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOtherLeadExist", reflect.TypeOf((*MockLeadResidenceRepository)(nil).IsOtherLeadExist), arg0, arg1, arg2, arg3, arg4)
}

// ListLeadResidences mocks base method.
func (m *MockLeadResidenceRepository) ListLeadResidences(arg0 context.Context, arg1 domain.LeadResidenceSearchCriteria) ([]*domain.LeadResidence, domain.Total, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLeadResidences", arg0, arg1)
	ret0, _ := ret[0].([]*domain.LeadResidence)
	ret1, _ := ret[1].(domain.Total)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListLeadResidences indicates an expected call of ListLeadResidences.
func (mr *MockLeadResidenceRepositoryMockRecorder) ListLeadResidences(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLeadResidences", reflect.TypeOf((*MockLeadResidenceRepository)(nil).ListLeadResidences), arg0, arg1)
}

// RevokeLeadResidence mocks base method.
func (m *MockLeadResidenceRepository) RevokeLeadResidence(arg0 context.Context, arg1 domain.LeadID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeLeadResidence", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeLeadResidence indicates an expected call of RevokeLeadResidence.
func (mr *MockLeadResidenceRepositoryMockRecorder) RevokeLeadResidence(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeLeadResidence", reflect.TypeOf((*MockLeadResidenceRepository)(nil).RevokeLeadResidence), arg0, arg1)
}

// UpdateLeadResidence mocks base method.
func (m *MockLeadResidenceRepository) UpdateLeadResidence(arg0 context.Context, arg1 *domain.LeadResidence) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLeadResidence", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLeadResidence indicates an expected call of UpdateLeadResidence.
func (mr *MockLeadResidenceRepositoryMockRecorder) UpdateLeadResidence(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLeadResidence", reflect.TypeOf((*MockLeadResidenceRepository)(nil).UpdateLeadResidence), arg0, arg1)
}
