// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/zharzhanov/mercury/internal/domain (interfaces: LeadBuilderRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "gitlab.com/zharzhanov/mercury/internal/domain"
)

// MockLeadBuilderRepository is a mock of LeadBuilderRepository interface.
type MockLeadBuilderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLeadBuilderRepositoryMockRecorder
}

// MockLeadBuilderRepositoryMockRecorder is the mock recorder for MockLeadBuilderRepository.
type MockLeadBuilderRepositoryMockRecorder struct {
	mock *MockLeadBuilderRepository
}

// NewMockLeadBuilderRepository creates a new mock instance.
func NewMockLeadBuilderRepository(ctrl *gomock.Controller) *MockLeadBuilderRepository {
	mock := &MockLeadBuilderRepository{ctrl: ctrl}
	mock.recorder = &MockLeadBuilderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLeadBuilderRepository) EXPECT() *MockLeadBuilderRepositoryMockRecorder {
	return m.recorder
}

// CreateLeadBuilder mocks base method.
func (m *MockLeadBuilderRepository) CreateLeadBuilder(arg0 context.Context, arg1 *domain.LeadBuilder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLeadBuilder", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLeadBuilder indicates an expected call of CreateLeadBuilder.
func (mr *MockLeadBuilderRepositoryMockRecorder) CreateLeadBuilder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLeadBuilder", reflect.TypeOf((*MockLeadBuilderRepository)(nil).CreateLeadBuilder), arg0, arg1)
}

// DeleteLeadBuilder mocks base method.
func (m *MockLeadBuilderRepository) DeleteLeadBuilder(arg0 context.Context, arg1 domain.LeadID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLeadBuilder", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLeadBuilder indicates an expected call of DeleteLeadBuilder.
func (mr *MockLeadBuilderRepositoryMockRecorder) DeleteLeadBuilder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLeadBuilder", reflect.TypeOf((*MockLeadBuilderRepository)(nil).DeleteLeadBuilder), arg0, arg1)
}

// GetLeadBuilder mocks base method.
func (m *MockLeadBuilderRepository) GetLeadBuilder(arg0 context.Context, arg1 domain.LeadID) (*domain.LeadBuilder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLeadBuilder", arg0, arg1)
	ret0, _ := ret[0].(*domain.LeadBuilder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLeadBuilder indicates an expected call of GetLeadBuilder.
func (mr *MockLeadBuilderRepositoryMockRecorder) GetLeadBuilder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLeadBuilder", reflect.TypeOf((*MockLeadBuilderRepository)(nil).GetLeadBuilder), arg0, arg1)
}

// IsLeadExistByDateRange mocks base method.
func (m *MockLeadBuilderRepository) IsLeadExistByDateRange(arg0 context.Context, arg1 domain.BuilderID, arg2, arg3 int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLeadExistByDateRange", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsLeadExistByDateRange indicates an expected call of IsLeadExistByDateRange.
func (mr *MockLeadBuilderRepositoryMockRecorder) IsLeadExistByDateRange(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLeadExistByDateRange", reflect.TypeOf((*MockLeadBuilderRepository)(nil).IsLeadExistByDateRange), arg0, arg1, arg2, arg3)
}

// IsOtherLeadExist mocks base method.
func (m *MockLeadBuilderRepository) IsOtherLeadExist(arg0 context.Context, arg1 domain.LeadID, arg2 domain.BuilderID, arg3, arg4 int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsOtherLeadExist", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsOtherLeadExist indicates an expected call of IsOtherLeadExist.
func (mr *MockLeadBuilderRepositoryMockRecorder) IsOtherLeadExist(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOtherLeadExist", reflect.TypeOf((*MockLeadBuilderRepository)(nil).IsOtherLeadExist), arg0, arg1, arg2, arg3, arg4)
}

// ListLeadBuilders mocks base method.
func (m *MockLeadBuilderRepository) ListLeadBuilders(arg0 context.Context, arg1 domain.LeadBuilderSearchCriteria) ([]*domain.LeadBuilder, domain.Total, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLeadBuilders", arg0, arg1)
	ret0, _ := ret[0].([]*domain.LeadBuilder)
	ret1, _ := ret[1].(domain.Total)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListLeadBuilders indicates an expected call of ListLeadBuilders.
func (mr *MockLeadBuilderRepositoryMockRecorder) ListLeadBuilders(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLeadBuilders", reflect.TypeOf((*MockLeadBuilderRepository)(nil).ListLeadBuilders), arg0, arg1)
}

// RevokeLeadBuilder mocks base method.
func (m *MockLeadBuilderRepository) RevokeLeadBuilder(arg0 context.Context, arg1 domain.LeadID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeLeadBuilder", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeLeadBuilder indicates an expected call of RevokeLeadBuilder.
func (mr *MockLeadBuilderRepositoryMockRecorder) RevokeLeadBuilder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeLeadBuilder", reflect.TypeOf((*MockLeadBuilderRepository)(nil).RevokeLeadBuilder), arg0, arg1)
}

// UpdateLeadBuilder mocks base method.
func (m *MockLeadBuilderRepository) UpdateLeadBuilder(arg0 context.Context, arg1 domain.LeadID, arg2 *domain.LeadBuilder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLeadBuilder", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLeadBuilder indicates an expected call of UpdateLeadBuilder.
func (mr *MockLeadBuilderRepositoryMockRecorder) UpdateLeadBuilder(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLeadBuilder", reflect.TypeOf((*MockLeadBuilderRepository)(nil).UpdateLeadBuilder), arg0, arg1, arg2)
}
