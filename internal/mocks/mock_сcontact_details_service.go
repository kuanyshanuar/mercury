// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/zharzhanov/mercury/internal/domain (interfaces: ContactDetailsService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "gitlab.com/zharzhanov/mercury/internal/domain"
)

// MockContactDetailsService is a mock of ContactDetailsService interface.
type MockContactDetailsService struct {
	ctrl     *gomock.Controller
	recorder *MockContactDetailsServiceMockRecorder
}

// MockContactDetailsServiceMockRecorder is the mock recorder for MockContactDetailsService.
type MockContactDetailsServiceMockRecorder struct {
	mock *MockContactDetailsService
}

// NewMockContactDetailsService creates a new mock instance.
func NewMockContactDetailsService(ctrl *gomock.Controller) *MockContactDetailsService {
	mock := &MockContactDetailsService{ctrl: ctrl}
	mock.recorder = &MockContactDetailsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContactDetailsService) EXPECT() *MockContactDetailsServiceMockRecorder {
	return m.recorder
}

// CreateContactDetails mocks base method.
func (m *MockContactDetailsService) CreateContactDetails(arg0 context.Context, arg1 *domain.ContactDetails, arg2 domain.CallerID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContactDetails", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateContactDetails indicates an expected call of CreateContactDetails.
func (mr *MockContactDetailsServiceMockRecorder) CreateContactDetails(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContactDetails", reflect.TypeOf((*MockContactDetailsService)(nil).CreateContactDetails), arg0, arg1, arg2)
}

// CreateResidenceContactDetails mocks base method.
func (m *MockContactDetailsService) CreateResidenceContactDetails(arg0 context.Context, arg1 *domain.ResidenceContactDetails, arg2 domain.CallerID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateResidenceContactDetails", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateResidenceContactDetails indicates an expected call of CreateResidenceContactDetails.
func (mr *MockContactDetailsServiceMockRecorder) CreateResidenceContactDetails(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResidenceContactDetails", reflect.TypeOf((*MockContactDetailsService)(nil).CreateResidenceContactDetails), arg0, arg1, arg2)
}

// ListContactDetails mocks base method.
func (m *MockContactDetailsService) ListContactDetails(arg0 context.Context, arg1 domain.CallerID) ([]*domain.ContactDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListContactDetails", arg0, arg1)
	ret0, _ := ret[0].([]*domain.ContactDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListContactDetails indicates an expected call of ListContactDetails.
func (mr *MockContactDetailsServiceMockRecorder) ListContactDetails(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContactDetails", reflect.TypeOf((*MockContactDetailsService)(nil).ListContactDetails), arg0, arg1)
}

// ListResidenceContactDetails mocks base method.
func (m *MockContactDetailsService) ListResidenceContactDetails(arg0 context.Context, arg1 domain.ResidenceContactDetailsSearchCriteria, arg2 domain.CallerID) ([]*domain.ResidenceContactDetails, domain.Total, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResidenceContactDetails", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*domain.ResidenceContactDetails)
	ret1, _ := ret[1].(domain.Total)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListResidenceContactDetails indicates an expected call of ListResidenceContactDetails.
func (mr *MockContactDetailsServiceMockRecorder) ListResidenceContactDetails(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResidenceContactDetails", reflect.TypeOf((*MockContactDetailsService)(nil).ListResidenceContactDetails), arg0, arg1, arg2)
}

// MarkAsDelivered mocks base method.
func (m *MockContactDetailsService) MarkAsDelivered(arg0 context.Context, arg1 int64, arg2 domain.CallerID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkAsDelivered", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkAsDelivered indicates an expected call of MarkAsDelivered.
func (mr *MockContactDetailsServiceMockRecorder) MarkAsDelivered(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAsDelivered", reflect.TypeOf((*MockContactDetailsService)(nil).MarkAsDelivered), arg0, arg1, arg2)
}
