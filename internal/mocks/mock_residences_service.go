// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/zharzhanov/mercury/internal/domain (interfaces: ResidencesService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "gitlab.com/zharzhanov/mercury/internal/domain"
)

// MockResidencesService is a mock of ResidencesService interface.
type MockResidencesService struct {
	ctrl     *gomock.Controller
	recorder *MockResidencesServiceMockRecorder
}

// MockResidencesServiceMockRecorder is the mock recorder for MockResidencesService.
type MockResidencesServiceMockRecorder struct {
	mock *MockResidencesService
}

// NewMockResidencesService creates a new mock instance.
func NewMockResidencesService(ctrl *gomock.Controller) *MockResidencesService {
	mock := &MockResidencesService{ctrl: ctrl}
	mock.recorder = &MockResidencesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResidencesService) EXPECT() *MockResidencesServiceMockRecorder {
	return m.recorder
}

// CreateFlatPlan mocks base method.
func (m *MockResidencesService) CreateFlatPlan(arg0 context.Context, arg1 *domain.FlatPlan, arg2 domain.CallerID) (*domain.FlatPlan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFlatPlan", arg0, arg1, arg2)
	ret0, _ := ret[0].(*domain.FlatPlan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFlatPlan indicates an expected call of CreateFlatPlan.
func (mr *MockResidencesServiceMockRecorder) CreateFlatPlan(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFlatPlan", reflect.TypeOf((*MockResidencesService)(nil).CreateFlatPlan), arg0, arg1, arg2)
}

// CreateResidence mocks base method.
func (m *MockResidencesService) CreateResidence(arg0 context.Context, arg1 *domain.Residence, arg2 domain.CallerID) (*domain.Residence, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateResidence", arg0, arg1, arg2)
	ret0, _ := ret[0].(*domain.Residence)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateResidence indicates an expected call of CreateResidence.
func (mr *MockResidencesServiceMockRecorder) CreateResidence(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResidence", reflect.TypeOf((*MockResidencesService)(nil).CreateResidence), arg0, arg1, arg2)
}

// DeleteFlatPlan mocks base method.
func (m *MockResidencesService) DeleteFlatPlan(arg0 context.Context, arg1 domain.FlatPlanID, arg2 domain.CallerID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFlatPlan", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFlatPlan indicates an expected call of DeleteFlatPlan.
func (mr *MockResidencesServiceMockRecorder) DeleteFlatPlan(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFlatPlan", reflect.TypeOf((*MockResidencesService)(nil).DeleteFlatPlan), arg0, arg1, arg2)
}

// DeleteResidence mocks base method.
func (m *MockResidencesService) DeleteResidence(arg0 context.Context, arg1 domain.ResidenceID, arg2 domain.CallerID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResidence", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteResidence indicates an expected call of DeleteResidence.
func (mr *MockResidencesServiceMockRecorder) DeleteResidence(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResidence", reflect.TypeOf((*MockResidencesService)(nil).DeleteResidence), arg0, arg1, arg2)
}

// GetConsultationEmailByResidenceID mocks base method.
func (m *MockResidencesService) GetConsultationEmailByResidenceID(arg0 context.Context, arg1 domain.ResidenceID, arg2 domain.CallerID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConsultationEmailByResidenceID", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConsultationEmailByResidenceID indicates an expected call of GetConsultationEmailByResidenceID.
func (mr *MockResidencesServiceMockRecorder) GetConsultationEmailByResidenceID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConsultationEmailByResidenceID", reflect.TypeOf((*MockResidencesService)(nil).GetConsultationEmailByResidenceID), arg0, arg1, arg2)
}

// GetResidence mocks base method.
func (m *MockResidencesService) GetResidence(arg0 context.Context, arg1 domain.ResidenceID, arg2 domain.CallerID) (*domain.Residence, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResidence", arg0, arg1, arg2)
	ret0, _ := ret[0].(*domain.Residence)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResidence indicates an expected call of GetResidence.
func (mr *MockResidencesServiceMockRecorder) GetResidence(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResidence", reflect.TypeOf((*MockResidencesService)(nil).GetResidence), arg0, arg1, arg2)
}

// IsResidenceExist mocks base method.
func (m *MockResidencesService) IsResidenceExist(arg0 context.Context, arg1 domain.ResidenceID, arg2 domain.CallerID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsResidenceExist", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsResidenceExist indicates an expected call of IsResidenceExist.
func (mr *MockResidencesServiceMockRecorder) IsResidenceExist(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsResidenceExist", reflect.TypeOf((*MockResidencesService)(nil).IsResidenceExist), arg0, arg1, arg2)
}

// ListPopularResidences mocks base method.
func (m *MockResidencesService) ListPopularResidences(arg0 context.Context, arg1 domain.ResidenceSearchCriteria, arg2 domain.CallerID) ([]*domain.Residence, domain.Total, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPopularResidences", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*domain.Residence)
	ret1, _ := ret[1].(domain.Total)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListPopularResidences indicates an expected call of ListPopularResidences.
func (mr *MockResidencesServiceMockRecorder) ListPopularResidences(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPopularResidences", reflect.TypeOf((*MockResidencesService)(nil).ListPopularResidences), arg0, arg1, arg2)
}

// ListResidences mocks base method.
func (m *MockResidencesService) ListResidences(arg0 context.Context, arg1 domain.ResidenceSearchCriteria, arg2 domain.CallerID) ([]*domain.Residence, domain.Total, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResidences", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*domain.Residence)
	ret1, _ := ret[1].(domain.Total)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListResidences indicates an expected call of ListResidences.
func (mr *MockResidencesServiceMockRecorder) ListResidences(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResidences", reflect.TypeOf((*MockResidencesService)(nil).ListResidences), arg0, arg1, arg2)
}

// ListResidencesByIDs mocks base method.
func (m *MockResidencesService) ListResidencesByIDs(arg0 context.Context, arg1 []domain.ResidenceID, arg2 domain.CallerID) ([]*domain.Residence, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResidencesByIDs", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*domain.Residence)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResidencesByIDs indicates an expected call of ListResidencesByIDs.
func (mr *MockResidencesServiceMockRecorder) ListResidencesByIDs(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResidencesByIDs", reflect.TypeOf((*MockResidencesService)(nil).ListResidencesByIDs), arg0, arg1, arg2)
}

// UpdateFlatPlan mocks base method.
func (m *MockResidencesService) UpdateFlatPlan(arg0 context.Context, arg1 domain.FlatPlanID, arg2 *domain.FlatPlan, arg3 domain.CallerID) (*domain.FlatPlan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFlatPlan", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*domain.FlatPlan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFlatPlan indicates an expected call of UpdateFlatPlan.
func (mr *MockResidencesServiceMockRecorder) UpdateFlatPlan(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFlatPlan", reflect.TypeOf((*MockResidencesService)(nil).UpdateFlatPlan), arg0, arg1, arg2, arg3)
}

// UpdateResidence mocks base method.
func (m *MockResidencesService) UpdateResidence(arg0 context.Context, arg1 domain.ResidenceID, arg2 *domain.Residence, arg3 domain.CallerID) (*domain.Residence, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateResidence", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*domain.Residence)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateResidence indicates an expected call of UpdateResidence.
func (mr *MockResidencesServiceMockRecorder) UpdateResidence(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResidence", reflect.TypeOf((*MockResidencesService)(nil).UpdateResidence), arg0, arg1, arg2, arg3)
}
