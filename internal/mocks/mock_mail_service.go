// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/zharzhanov/mercury/internal/domain (interfaces: MailService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "gitlab.com/zharzhanov/mercury/internal/domain"
)

// MockMailService is a mock of MailService interface.
type MockMailService struct {
	ctrl     *gomock.Controller
	recorder *MockMailServiceMockRecorder
}

// MockMailServiceMockRecorder is the mock recorder for MockMailService.
type MockMailServiceMockRecorder struct {
	mock *MockMailService
}

// NewMockMailService creates a new mock instance.
func NewMockMailService(ctrl *gomock.Controller) *MockMailService {
	mock := &MockMailService{ctrl: ctrl}
	mock.recorder = &MockMailServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMailService) EXPECT() *MockMailServiceMockRecorder {
	return m.recorder
}

// SendContactDetailEmail mocks base method.
func (m *MockMailService) SendContactDetailEmail(arg0 context.Context, arg1 string, arg2 domain.ContactDetailContent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendContactDetailEmail", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendContactDetailEmail indicates an expected call of SendContactDetailEmail.
func (mr *MockMailServiceMockRecorder) SendContactDetailEmail(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendContactDetailEmail", reflect.TypeOf((*MockMailService)(nil).SendContactDetailEmail), arg0, arg1, arg2)
}

// SendResetPasswordEmail mocks base method.
func (m *MockMailService) SendResetPasswordEmail(arg0 context.Context, arg1 string, arg2 domain.ResetMailPasswordEmailContent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendResetPasswordEmail", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendResetPasswordEmail indicates an expected call of SendResetPasswordEmail.
func (mr *MockMailServiceMockRecorder) SendResetPasswordEmail(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendResetPasswordEmail", reflect.TypeOf((*MockMailService)(nil).SendResetPasswordEmail), arg0, arg1, arg2)
}

// SendResidenceContactDetailEmail mocks base method.
func (m *MockMailService) SendResidenceContactDetailEmail(arg0 context.Context, arg1 string, arg2 domain.ResidenceContactDetailContent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendResidenceContactDetailEmail", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendResidenceContactDetailEmail indicates an expected call of SendResidenceContactDetailEmail.
func (mr *MockMailServiceMockRecorder) SendResidenceContactDetailEmail(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendResidenceContactDetailEmail", reflect.TypeOf((*MockMailService)(nil).SendResidenceContactDetailEmail), arg0, arg1, arg2)
}
