// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/zharzhanov/mercury/internal/domain (interfaces: PermissionsRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "gitlab.com/zharzhanov/mercury/internal/domain"
)

// MockPermissionsRepository is a mock of PermissionsRepository interface.
type MockPermissionsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPermissionsRepositoryMockRecorder
}

// MockPermissionsRepositoryMockRecorder is the mock recorder for MockPermissionsRepository.
type MockPermissionsRepositoryMockRecorder struct {
	mock *MockPermissionsRepository
}

// NewMockPermissionsRepository creates a new mock instance.
func NewMockPermissionsRepository(ctrl *gomock.Controller) *MockPermissionsRepository {
	mock := &MockPermissionsRepository{ctrl: ctrl}
	mock.recorder = &MockPermissionsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPermissionsRepository) EXPECT() *MockPermissionsRepositoryMockRecorder {
	return m.recorder
}

// CreatePermission mocks base method.
func (m *MockPermissionsRepository) CreatePermission(arg0 context.Context, arg1 *domain.Permission) (domain.PermissionID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePermission", arg0, arg1)
	ret0, _ := ret[0].(domain.PermissionID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePermission indicates an expected call of CreatePermission.
func (mr *MockPermissionsRepositoryMockRecorder) CreatePermission(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePermission", reflect.TypeOf((*MockPermissionsRepository)(nil).CreatePermission), arg0, arg1)
}

// GetPermissionByEndpoint mocks base method.
func (m *MockPermissionsRepository) GetPermissionByEndpoint(arg0 context.Context, arg1 string) (*domain.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermissionByEndpoint", arg0, arg1)
	ret0, _ := ret[0].(*domain.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermissionByEndpoint indicates an expected call of GetPermissionByEndpoint.
func (mr *MockPermissionsRepositoryMockRecorder) GetPermissionByEndpoint(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissionByEndpoint", reflect.TypeOf((*MockPermissionsRepository)(nil).GetPermissionByEndpoint), arg0, arg1)
}

// IsPermissionAllowed mocks base method.
func (m *MockPermissionsRepository) IsPermissionAllowed(arg0 context.Context, arg1 domain.RoleID, arg2 domain.PermissionID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPermissionAllowed", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsPermissionAllowed indicates an expected call of IsPermissionAllowed.
func (mr *MockPermissionsRepositoryMockRecorder) IsPermissionAllowed(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPermissionAllowed", reflect.TypeOf((*MockPermissionsRepository)(nil).IsPermissionAllowed), arg0, arg1, arg2)
}

// ListPermissionsByRole mocks base method.
func (m *MockPermissionsRepository) ListPermissionsByRole(arg0 context.Context, arg1 int64) ([]*domain.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPermissionsByRole", arg0, arg1)
	ret0, _ := ret[0].([]*domain.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPermissionsByRole indicates an expected call of ListPermissionsByRole.
func (mr *MockPermissionsRepositoryMockRecorder) ListPermissionsByRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPermissionsByRole", reflect.TypeOf((*MockPermissionsRepository)(nil).ListPermissionsByRole), arg0, arg1)
}
