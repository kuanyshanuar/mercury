// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/zharzhanov/mercury/internal/domain (interfaces: AmoCrmService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "gitlab.com/zharzhanov/mercury/internal/domain"
)

// MockAmoCrmService is a mock of AmoCrmService interface.
type MockAmoCrmService struct {
	ctrl     *gomock.Controller
	recorder *MockAmoCrmServiceMockRecorder
}

// MockAmoCrmServiceMockRecorder is the mock recorder for MockAmoCrmService.
type MockAmoCrmServiceMockRecorder struct {
	mock *MockAmoCrmService
}

// NewMockAmoCrmService creates a new mock instance.
func NewMockAmoCrmService(ctrl *gomock.Controller) *MockAmoCrmService {
	mock := &MockAmoCrmService{ctrl: ctrl}
	mock.recorder = &MockAmoCrmServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAmoCrmService) EXPECT() *MockAmoCrmServiceMockRecorder {
	return m.recorder
}

// CreateApplication mocks base method.
func (m *MockAmoCrmService) CreateApplication(arg0 context.Context, arg1 *domain.AmoApplication) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApplication", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateApplication indicates an expected call of CreateApplication.
func (mr *MockAmoCrmServiceMockRecorder) CreateApplication(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplication", reflect.TypeOf((*MockAmoCrmService)(nil).CreateApplication), arg0, arg1)
}
