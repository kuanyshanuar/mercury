// Code generated by MockGen. DO NOT EDIT.
// Source: .\internal\domain\leads_cottage.go

// Package mock_domain is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "gitlab.com/zharzhanov/mercury/internal/domain"
)

// MockLeadCottageRepository is a mock of LeadCottageRepository interface.
type MockLeadCottageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLeadCottageRepositoryMockRecorder
}

// MockLeadCottageRepositoryMockRecorder is the mock recorder for MockLeadCottageRepository.
type MockLeadCottageRepositoryMockRecorder struct {
	mock *MockLeadCottageRepository
}

// NewMockLeadCottageRepository creates a new mock instance.
func NewMockLeadCottageRepository(ctrl *gomock.Controller) *MockLeadCottageRepository {
	mock := &MockLeadCottageRepository{ctrl: ctrl}
	mock.recorder = &MockLeadCottageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLeadCottageRepository) EXPECT() *MockLeadCottageRepositoryMockRecorder {
	return m.recorder
}

// CreateLeadCottage mocks base method.
func (m *MockLeadCottageRepository) CreateLeadCottage(ctx context.Context, lead *domain.LeadCottage) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLeadCottage", ctx, lead)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLeadCottage indicates an expected call of CreateLeadCottage.
func (mr *MockLeadCottageRepositoryMockRecorder) CreateLeadCottage(ctx, lead interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLeadCottage", reflect.TypeOf((*MockLeadCottageRepository)(nil).CreateLeadCottage), ctx, lead)
}

// DeleteLeadCottage mocks base method.
func (m *MockLeadCottageRepository) DeleteLeadCottage(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLeadCottage", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLeadCottage indicates an expected call of DeleteLeadCottage.
func (mr *MockLeadCottageRepositoryMockRecorder) DeleteLeadCottage(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLeadCottage", reflect.TypeOf((*MockLeadCottageRepository)(nil).DeleteLeadCottage), ctx, id)
}

// GetLeadCottage mocks base method.
func (m *MockLeadCottageRepository) GetLeadCottage(ctx context.Context, id int64) (*domain.LeadCottage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLeadCottage", ctx, id)
	ret0, _ := ret[0].(*domain.LeadCottage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLeadCottage indicates an expected call of GetLeadCottage.
func (mr *MockLeadCottageRepositoryMockRecorder) GetLeadCottage(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLeadCottage", reflect.TypeOf((*MockLeadCottageRepository)(nil).GetLeadCottage), ctx, id)
}

// IsLeadExistByDate mocks base method.
func (m *MockLeadCottageRepository) IsLeadExistByDate(ctx context.Context, cottageID, issuedAt, expiresAt int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLeadExistByDate", ctx, cottageID, issuedAt, expiresAt)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsLeadExistByDate indicates an expected call of IsLeadExistByDate.
func (mr *MockLeadCottageRepositoryMockRecorder) IsLeadExistByDate(ctx, cottageID, issuedAt, expiresAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLeadExistByDate", reflect.TypeOf((*MockLeadCottageRepository)(nil).IsLeadExistByDate), ctx, cottageID, issuedAt, expiresAt)
}

// IsOtherLeadExist mocks base method.
func (m *MockLeadCottageRepository) IsOtherLeadExist(ctx context.Context, leadID domain.LeadID, cottageID, issuedAt, expiresAt int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsOtherLeadExist", ctx, leadID, cottageID, issuedAt, expiresAt)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsOtherLeadExist indicates an expected call of IsOtherLeadExist.
func (mr *MockLeadCottageRepositoryMockRecorder) IsOtherLeadExist(ctx, leadID, cottageID, issuedAt, expiresAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOtherLeadExist", reflect.TypeOf((*MockLeadCottageRepository)(nil).IsOtherLeadExist), ctx, leadID, cottageID, issuedAt, expiresAt)
}

// ListLeadCottage mocks base method.
func (m *MockLeadCottageRepository) ListLeadCottage(ctx context.Context, criteria domain.LeadCottageSearchCriteria) ([]*domain.LeadCottage, domain.Total, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLeadCottage", ctx, criteria)
	ret0, _ := ret[0].([]*domain.LeadCottage)
	ret1, _ := ret[1].(domain.Total)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListLeadCottage indicates an expected call of ListLeadCottage.
func (mr *MockLeadCottageRepositoryMockRecorder) ListLeadCottage(ctx, criteria interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLeadCottage", reflect.TypeOf((*MockLeadCottageRepository)(nil).ListLeadCottage), ctx, criteria)
}

// RevokeLeadCottage mocks base method.
func (m *MockLeadCottageRepository) RevokeLeadCottage(ctx context.Context, leadID domain.LeadID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeLeadCottage", ctx, leadID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeLeadCottage indicates an expected call of RevokeLeadCottage.
func (mr *MockLeadCottageRepositoryMockRecorder) RevokeLeadCottage(ctx, leadID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeLeadCottage", reflect.TypeOf((*MockLeadCottageRepository)(nil).RevokeLeadCottage), ctx, leadID)
}

// UpdateLeadCottage mocks base method.
func (m *MockLeadCottageRepository) UpdateLeadCottage(ctx context.Context, id int64, lead *domain.LeadCottage) (*domain.LeadCottage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLeadCottage", ctx, id, lead)
	ret0, _ := ret[0].(*domain.LeadCottage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLeadCottage indicates an expected call of UpdateLeadCottage.
func (mr *MockLeadCottageRepositoryMockRecorder) UpdateLeadCottage(ctx, id, lead interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLeadCottage", reflect.TypeOf((*MockLeadCottageRepository)(nil).UpdateLeadCottage), ctx, id, lead)
}

// MockLeadCottageService is a mock of LeadCottageService interface.
type MockLeadCottageService struct {
	ctrl     *gomock.Controller
	recorder *MockLeadCottageServiceMockRecorder
}

// MockLeadCottageServiceMockRecorder is the mock recorder for MockLeadCottageService.
type MockLeadCottageServiceMockRecorder struct {
	mock *MockLeadCottageService
}

// NewMockLeadCottageService creates a new mock instance.
func NewMockLeadCottageService(ctrl *gomock.Controller) *MockLeadCottageService {
	mock := &MockLeadCottageService{ctrl: ctrl}
	mock.recorder = &MockLeadCottageServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLeadCottageService) EXPECT() *MockLeadCottageServiceMockRecorder {
	return m.recorder
}

// CreateLeadCottage mocks base method.
func (m *MockLeadCottageService) CreateLeadCottage(ctx context.Context, lead *domain.LeadCottage, caller domain.CallerID) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLeadCottage", ctx, lead, caller)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLeadCottage indicates an expected call of CreateLeadCottage.
func (mr *MockLeadCottageServiceMockRecorder) CreateLeadCottage(ctx, lead, caller interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLeadCottage", reflect.TypeOf((*MockLeadCottageService)(nil).CreateLeadCottage), ctx, lead, caller)
}

// DeleteLeadCottage mocks base method.
func (m *MockLeadCottageService) DeleteLeadCottage(ctx context.Context, id int64, caller domain.CallerID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLeadCottage", ctx, id, caller)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLeadCottage indicates an expected call of DeleteLeadCottage.
func (mr *MockLeadCottageServiceMockRecorder) DeleteLeadCottage(ctx, id, caller interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLeadCottage", reflect.TypeOf((*MockLeadCottageService)(nil).DeleteLeadCottage), ctx, id, caller)
}

// GetLeadCottage mocks base method.
func (m *MockLeadCottageService) GetLeadCottage(ctx context.Context, id int64, caller domain.CallerID) (*domain.LeadCottage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLeadCottage", ctx, id, caller)
	ret0, _ := ret[0].(*domain.LeadCottage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLeadCottage indicates an expected call of GetLeadCottage.
func (mr *MockLeadCottageServiceMockRecorder) GetLeadCottage(ctx, id, caller interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLeadCottage", reflect.TypeOf((*MockLeadCottageService)(nil).GetLeadCottage), ctx, id, caller)
}

// ListLeadCottage mocks base method.
func (m *MockLeadCottageService) ListLeadCottage(ctx context.Context, criteria domain.LeadCottageSearchCriteria, caller domain.CallerID) ([]*domain.LeadCottage, domain.Total, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLeadCottage", ctx, criteria, caller)
	ret0, _ := ret[0].([]*domain.LeadCottage)
	ret1, _ := ret[1].(domain.Total)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListLeadCottage indicates an expected call of ListLeadCottage.
func (mr *MockLeadCottageServiceMockRecorder) ListLeadCottage(ctx, criteria, caller interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLeadCottage", reflect.TypeOf((*MockLeadCottageService)(nil).ListLeadCottage), ctx, criteria, caller)
}

// RevokeLeadCottage mocks base method.
func (m *MockLeadCottageService) RevokeLeadCottage(ctx context.Context, leadID domain.LeadID, callerID domain.CallerID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeLeadCottage", ctx, leadID, callerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeLeadCottage indicates an expected call of RevokeLeadCottage.
func (mr *MockLeadCottageServiceMockRecorder) RevokeLeadCottage(ctx, leadID, callerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeLeadCottage", reflect.TypeOf((*MockLeadCottageService)(nil).RevokeLeadCottage), ctx, leadID, callerID)
}

// UpdateLeadCottage mocks base method.
func (m *MockLeadCottageService) UpdateLeadCottage(ctx context.Context, id int64, lead *domain.LeadCottage, caller domain.CallerID) (*domain.LeadCottage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLeadCottage", ctx, id, lead, caller)
	ret0, _ := ret[0].(*domain.LeadCottage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLeadCottage indicates an expected call of UpdateLeadCottage.
func (mr *MockLeadCottageServiceMockRecorder) UpdateLeadCottage(ctx, id, lead, caller interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLeadCottage", reflect.TypeOf((*MockLeadCottageService)(nil).UpdateLeadCottage), ctx, id, lead, caller)
}
