// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/zharzhanov/mercury/internal/domain (interfaces: ResidencesRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "gitlab.com/zharzhanov/mercury/internal/domain"
)

// MockResidencesRepository is a mock of ResidencesRepository interface.
type MockResidencesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockResidencesRepositoryMockRecorder
}

// MockResidencesRepositoryMockRecorder is the mock recorder for MockResidencesRepository.
type MockResidencesRepositoryMockRecorder struct {
	mock *MockResidencesRepository
}

// NewMockResidencesRepository creates a new mock instance.
func NewMockResidencesRepository(ctrl *gomock.Controller) *MockResidencesRepository {
	mock := &MockResidencesRepository{ctrl: ctrl}
	mock.recorder = &MockResidencesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResidencesRepository) EXPECT() *MockResidencesRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockResidencesRepository) Create(arg0 context.Context, arg1 *domain.Residence) (*domain.Residence, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*domain.Residence)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockResidencesRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockResidencesRepository)(nil).Create), arg0, arg1)
}

// CreateFlatPlan mocks base method.
func (m *MockResidencesRepository) CreateFlatPlan(arg0 context.Context, arg1 *domain.FlatPlan) (*domain.FlatPlan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFlatPlan", arg0, arg1)
	ret0, _ := ret[0].(*domain.FlatPlan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFlatPlan indicates an expected call of CreateFlatPlan.
func (mr *MockResidencesRepositoryMockRecorder) CreateFlatPlan(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFlatPlan", reflect.TypeOf((*MockResidencesRepository)(nil).CreateFlatPlan), arg0, arg1)
}

// Delete mocks base method.
func (m *MockResidencesRepository) Delete(arg0 context.Context, arg1 domain.ResidenceID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockResidencesRepositoryMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockResidencesRepository)(nil).Delete), arg0, arg1)
}

// DeleteFlatPlan mocks base method.
func (m *MockResidencesRepository) DeleteFlatPlan(arg0 context.Context, arg1 domain.FlatPlanID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFlatPlan", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFlatPlan indicates an expected call of DeleteFlatPlan.
func (mr *MockResidencesRepositoryMockRecorder) DeleteFlatPlan(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFlatPlan", reflect.TypeOf((*MockResidencesRepository)(nil).DeleteFlatPlan), arg0, arg1)
}

// Get mocks base method.
func (m *MockResidencesRepository) Get(arg0 context.Context, arg1 domain.ResidenceID) (*domain.Residence, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*domain.Residence)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockResidencesRepositoryMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockResidencesRepository)(nil).Get), arg0, arg1)
}

// GetConsultationEmailByResidenceID mocks base method.
func (m *MockResidencesRepository) GetConsultationEmailByResidenceID(arg0 context.Context, arg1 domain.ResidenceID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConsultationEmailByResidenceID", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConsultationEmailByResidenceID indicates an expected call of GetConsultationEmailByResidenceID.
func (mr *MockResidencesRepositoryMockRecorder) GetConsultationEmailByResidenceID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConsultationEmailByResidenceID", reflect.TypeOf((*MockResidencesRepository)(nil).GetConsultationEmailByResidenceID), arg0, arg1)
}

// IsFavouriteResidence mocks base method.
func (m *MockResidencesRepository) IsFavouriteResidence(arg0 context.Context, arg1 domain.ResidenceID, arg2 domain.UserID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFavouriteResidence", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsFavouriteResidence indicates an expected call of IsFavouriteResidence.
func (mr *MockResidencesRepositoryMockRecorder) IsFavouriteResidence(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFavouriteResidence", reflect.TypeOf((*MockResidencesRepository)(nil).IsFavouriteResidence), arg0, arg1, arg2)
}

// List mocks base method.
func (m *MockResidencesRepository) List(arg0 context.Context, arg1 domain.ResidenceSearchCriteria) ([]*domain.Residence, domain.Total, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]*domain.Residence)
	ret1, _ := ret[1].(domain.Total)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockResidencesRepositoryMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockResidencesRepository)(nil).List), arg0, arg1)
}

// ListPopularResidences mocks base method.
func (m *MockResidencesRepository) ListPopularResidences(arg0 context.Context, arg1 domain.ResidenceSearchCriteria) ([]*domain.Residence, domain.Total, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPopularResidences", arg0, arg1)
	ret0, _ := ret[0].([]*domain.Residence)
	ret1, _ := ret[1].(domain.Total)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListPopularResidences indicates an expected call of ListPopularResidences.
func (mr *MockResidencesRepositoryMockRecorder) ListPopularResidences(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPopularResidences", reflect.TypeOf((*MockResidencesRepository)(nil).ListPopularResidences), arg0, arg1)
}

// ListResidencesByIDs mocks base method.
func (m *MockResidencesRepository) ListResidencesByIDs(arg0 context.Context, arg1 []domain.ResidenceID) ([]*domain.Residence, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResidencesByIDs", arg0, arg1)
	ret0, _ := ret[0].([]*domain.Residence)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResidencesByIDs indicates an expected call of ListResidencesByIDs.
func (mr *MockResidencesRepositoryMockRecorder) ListResidencesByIDs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResidencesByIDs", reflect.TypeOf((*MockResidencesRepository)(nil).ListResidencesByIDs), arg0, arg1)
}

// Update mocks base method.
func (m *MockResidencesRepository) Update(arg0 context.Context, arg1 domain.ResidenceID, arg2 *domain.Residence) (*domain.Residence, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*domain.Residence)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockResidencesRepositoryMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockResidencesRepository)(nil).Update), arg0, arg1, arg2)
}

// UpdateFlatPlan mocks base method.
func (m *MockResidencesRepository) UpdateFlatPlan(arg0 context.Context, arg1 domain.FlatPlanID, arg2 *domain.FlatPlan) (*domain.FlatPlan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFlatPlan", arg0, arg1, arg2)
	ret0, _ := ret[0].(*domain.FlatPlan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFlatPlan indicates an expected call of UpdateFlatPlan.
func (mr *MockResidencesRepositoryMockRecorder) UpdateFlatPlan(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFlatPlan", reflect.TypeOf((*MockResidencesRepository)(nil).UpdateFlatPlan), arg0, arg1, arg2)
}
