// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/zharzhanov/mercury/internal/domain (interfaces: FiltersService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "gitlab.com/zharzhanov/mercury/internal/domain"
)

// MockFiltersService is a mock of FiltersService interface.
type MockFiltersService struct {
	ctrl     *gomock.Controller
	recorder *MockFiltersServiceMockRecorder
}

// MockFiltersServiceMockRecorder is the mock recorder for MockFiltersService.
type MockFiltersServiceMockRecorder struct {
	mock *MockFiltersService
}

// NewMockFiltersService creates a new mock instance.
func NewMockFiltersService(ctrl *gomock.Controller) *MockFiltersService {
	mock := &MockFiltersService{ctrl: ctrl}
	mock.recorder = &MockFiltersServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFiltersService) EXPECT() *MockFiltersServiceMockRecorder {
	return m.recorder
}

// CreateCity mocks base method.
func (m *MockFiltersService) CreateCity(arg0 context.Context, arg1 *domain.City, arg2 domain.CallerID) (domain.CityID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCity", arg0, arg1, arg2)
	ret0, _ := ret[0].(domain.CityID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCity indicates an expected call of CreateCity.
func (mr *MockFiltersServiceMockRecorder) CreateCity(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCity", reflect.TypeOf((*MockFiltersService)(nil).CreateCity), arg0, arg1, arg2)
}

// CreateDistrict mocks base method.
func (m *MockFiltersService) CreateDistrict(arg0 context.Context, arg1 *domain.District, arg2 domain.CallerID) (domain.DistrictID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDistrict", arg0, arg1, arg2)
	ret0, _ := ret[0].(domain.DistrictID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDistrict indicates an expected call of CreateDistrict.
func (mr *MockFiltersServiceMockRecorder) CreateDistrict(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDistrict", reflect.TypeOf((*MockFiltersService)(nil).CreateDistrict), arg0, arg1, arg2)
}

// CreateFilter mocks base method.
func (m *MockFiltersService) CreateFilter(arg0 context.Context, arg1 string, arg2 *domain.Filter, arg3 domain.CallerID) (*domain.Filter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFilter", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*domain.Filter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFilter indicates an expected call of CreateFilter.
func (mr *MockFiltersServiceMockRecorder) CreateFilter(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFilter", reflect.TypeOf((*MockFiltersService)(nil).CreateFilter), arg0, arg1, arg2, arg3)
}

// DeleteCity mocks base method.
func (m *MockFiltersService) DeleteCity(arg0 context.Context, arg1 domain.CityID, arg2 domain.CallerID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCity", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCity indicates an expected call of DeleteCity.
func (mr *MockFiltersServiceMockRecorder) DeleteCity(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCity", reflect.TypeOf((*MockFiltersService)(nil).DeleteCity), arg0, arg1, arg2)
}

// DeleteDistrict mocks base method.
func (m *MockFiltersService) DeleteDistrict(arg0 context.Context, arg1 domain.DistrictID, arg2 domain.CallerID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDistrict", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDistrict indicates an expected call of DeleteDistrict.
func (mr *MockFiltersServiceMockRecorder) DeleteDistrict(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDistrict", reflect.TypeOf((*MockFiltersService)(nil).DeleteDistrict), arg0, arg1, arg2)
}

// DeleteFilter mocks base method.
func (m *MockFiltersService) DeleteFilter(arg0 context.Context, arg1 int64, arg2 string, arg3 domain.CallerID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFilter", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFilter indicates an expected call of DeleteFilter.
func (mr *MockFiltersServiceMockRecorder) DeleteFilter(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFilter", reflect.TypeOf((*MockFiltersService)(nil).DeleteFilter), arg0, arg1, arg2, arg3)
}

// ListBuilders mocks base method.
func (m *MockFiltersService) ListBuilders(arg0 context.Context, arg1 domain.CallerID) ([]*domain.FilterBuilder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBuilders", arg0, arg1)
	ret0, _ := ret[0].([]*domain.FilterBuilder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBuilders indicates an expected call of ListBuilders.
func (mr *MockFiltersServiceMockRecorder) ListBuilders(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBuilders", reflect.TypeOf((*MockFiltersService)(nil).ListBuilders), arg0, arg1)
}

// ListCities mocks base method.
func (m *MockFiltersService) ListCities(arg0 context.Context, arg1 domain.CitySearchCriteria, arg2 domain.CallerID) ([]*domain.City, domain.Total, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCities", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*domain.City)
	ret1, _ := ret[1].(domain.Total)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListCities indicates an expected call of ListCities.
func (mr *MockFiltersServiceMockRecorder) ListCities(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCities", reflect.TypeOf((*MockFiltersService)(nil).ListCities), arg0, arg1, arg2)
}

// ListDistricts mocks base method.
func (m *MockFiltersService) ListDistricts(arg0 context.Context, arg1 domain.DistrictSearchCriteria, arg2 domain.CallerID) ([]*domain.District, domain.Total, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDistricts", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*domain.District)
	ret1, _ := ret[1].(domain.Total)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListDistricts indicates an expected call of ListDistricts.
func (mr *MockFiltersServiceMockRecorder) ListDistricts(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDistricts", reflect.TypeOf((*MockFiltersService)(nil).ListDistricts), arg0, arg1, arg2)
}

// ListFilters mocks base method.
func (m *MockFiltersService) ListFilters(arg0 context.Context, arg1 domain.CallerID) (map[string][]*domain.Filter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFilters", arg0, arg1)
	ret0, _ := ret[0].(map[string][]*domain.Filter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFilters indicates an expected call of ListFilters.
func (mr *MockFiltersServiceMockRecorder) ListFilters(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFilters", reflect.TypeOf((*MockFiltersService)(nil).ListFilters), arg0, arg1)
}

// UpdateCity mocks base method.
func (m *MockFiltersService) UpdateCity(arg0 context.Context, arg1 domain.CityID, arg2 *domain.City, arg3 domain.CallerID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCity", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCity indicates an expected call of UpdateCity.
func (mr *MockFiltersServiceMockRecorder) UpdateCity(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCity", reflect.TypeOf((*MockFiltersService)(nil).UpdateCity), arg0, arg1, arg2, arg3)
}

// UpdateDistrict mocks base method.
func (m *MockFiltersService) UpdateDistrict(arg0 context.Context, arg1 domain.DistrictID, arg2 *domain.District, arg3 domain.CallerID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDistrict", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDistrict indicates an expected call of UpdateDistrict.
func (mr *MockFiltersServiceMockRecorder) UpdateDistrict(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDistrict", reflect.TypeOf((*MockFiltersService)(nil).UpdateDistrict), arg0, arg1, arg2, arg3)
}
