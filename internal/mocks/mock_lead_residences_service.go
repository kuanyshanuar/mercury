// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/zharzhanov/mercury/internal/domain (interfaces: LeadResidenceService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "gitlab.com/zharzhanov/mercury/internal/domain"
)

// MockLeadResidenceService is a mock of LeadResidenceService interface.
type MockLeadResidenceService struct {
	ctrl     *gomock.Controller
	recorder *MockLeadResidenceServiceMockRecorder
}

// MockLeadResidenceServiceMockRecorder is the mock recorder for MockLeadResidenceService.
type MockLeadResidenceServiceMockRecorder struct {
	mock *MockLeadResidenceService
}

// NewMockLeadResidenceService creates a new mock instance.
func NewMockLeadResidenceService(ctrl *gomock.Controller) *MockLeadResidenceService {
	mock := &MockLeadResidenceService{ctrl: ctrl}
	mock.recorder = &MockLeadResidenceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLeadResidenceService) EXPECT() *MockLeadResidenceServiceMockRecorder {
	return m.recorder
}

// CreateLeadResidence mocks base method.
func (m *MockLeadResidenceService) CreateLeadResidence(arg0 context.Context, arg1 *domain.LeadResidence, arg2 domain.CallerID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLeadResidence", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLeadResidence indicates an expected call of CreateLeadResidence.
func (mr *MockLeadResidenceServiceMockRecorder) CreateLeadResidence(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLeadResidence", reflect.TypeOf((*MockLeadResidenceService)(nil).CreateLeadResidence), arg0, arg1, arg2)
}

// DeleteLeadResidence mocks base method.
func (m *MockLeadResidenceService) DeleteLeadResidence(arg0 context.Context, arg1 domain.LeadID, arg2 domain.CallerID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLeadResidence", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLeadResidence indicates an expected call of DeleteLeadResidence.
func (mr *MockLeadResidenceServiceMockRecorder) DeleteLeadResidence(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLeadResidence", reflect.TypeOf((*MockLeadResidenceService)(nil).DeleteLeadResidence), arg0, arg1, arg2)
}

// GetLeadResidence mocks base method.
func (m *MockLeadResidenceService) GetLeadResidence(arg0 context.Context, arg1 domain.LeadID, arg2 domain.CallerID) (*domain.LeadResidence, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLeadResidence", arg0, arg1, arg2)
	ret0, _ := ret[0].(*domain.LeadResidence)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLeadResidence indicates an expected call of GetLeadResidence.
func (mr *MockLeadResidenceServiceMockRecorder) GetLeadResidence(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLeadResidence", reflect.TypeOf((*MockLeadResidenceService)(nil).GetLeadResidence), arg0, arg1, arg2)
}

// ListLeadResidences mocks base method.
func (m *MockLeadResidenceService) ListLeadResidences(arg0 context.Context, arg1 domain.LeadResidenceSearchCriteria, arg2 domain.CallerID) ([]*domain.LeadResidence, domain.Total, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLeadResidences", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*domain.LeadResidence)
	ret1, _ := ret[1].(domain.Total)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListLeadResidences indicates an expected call of ListLeadResidences.
func (mr *MockLeadResidenceServiceMockRecorder) ListLeadResidences(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLeadResidences", reflect.TypeOf((*MockLeadResidenceService)(nil).ListLeadResidences), arg0, arg1, arg2)
}

// RevokeLeadResidence mocks base method.
func (m *MockLeadResidenceService) RevokeLeadResidence(arg0 context.Context, arg1 domain.LeadID, arg2 domain.CallerID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeLeadResidence", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeLeadResidence indicates an expected call of RevokeLeadResidence.
func (mr *MockLeadResidenceServiceMockRecorder) RevokeLeadResidence(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeLeadResidence", reflect.TypeOf((*MockLeadResidenceService)(nil).RevokeLeadResidence), arg0, arg1, arg2)
}

// UpdateLeadResidence mocks base method.
func (m *MockLeadResidenceService) UpdateLeadResidence(arg0 context.Context, arg1 domain.LeadID, arg2 *domain.LeadResidence, arg3 domain.CallerID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLeadResidence", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLeadResidence indicates an expected call of UpdateLeadResidence.
func (mr *MockLeadResidenceServiceMockRecorder) UpdateLeadResidence(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLeadResidence", reflect.TypeOf((*MockLeadResidenceService)(nil).UpdateLeadResidence), arg0, arg1, arg2, arg3)
}
